!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
AbortProcess	.\2D\itkTubeExtractor2D.h	/^  void   AbortProcess(bool (*abortProcess)());$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(bool (abortProcess)))
AbortProcess	.\itkTubeExtractor.h	/^  void   AbortProcess(bool (*abortProcess)());$/;"	p	class:itk::TubeExtractor	access:public	signature:(bool (abortProcess)))
AddTube	.\2D\itkRidgeExtractor2D.h	/^  bool AddTube(TubeType * tube);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(TubeType * tube)
AddTube	.\itkRidgeExtractor.h	/^  bool AddTube(TubeType * tube);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(TubeType * tube)
ApplyKernMeasures	.\itkRadiusExtractor.h	/^  void ApplyKernMeasures(TubeType * tube);$/;"	p	class:itk::RadiusExtractor	access:private	signature:(TubeType * tube)
AutoExtract	.\2D\itkTubeNetExtractor2D.h	/^  bool   AutoExtract(int zMin, int zMax);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(int zMin, int zMax)
AutoExtract	.\itkTubeNetExtractor.h	/^  bool   AutoExtract(int zMin, int zMax);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(int zMin, int zMax)
AutoExtractAutoThresh	.\2D\itkTubeNetExtractor2D.h	/^  void   AutoExtractAutoThresh(double alpha=0.002);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(double alpha=0.002)
AutoExtractAutoThresh	.\itkTubeNetExtractor.h	/^  void   AutoExtractAutoThresh(double alpha=0.002);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(double alpha=0.002)
AutoExtractThresh	.\2D\itkTubeNetExtractor2D.h	/^  double  AutoExtractThresh(void);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(void)
AutoExtractThresh	.\2D\itkTubeNetExtractor2D.h	/^  void   AutoExtractThresh(double newAEThresh);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(double newAEThresh)
AutoExtractThresh	.\itkTubeNetExtractor.h	/^  double  AutoExtractThresh(void);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(void)
AutoExtractThresh	.\itkTubeNetExtractor.h	/^  void   AutoExtractThresh(double newAEThresh);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(double newAEThresh)
Blur3DImageFunction	.\itkBlur3DImageFunction.h	/^  Blur3DImageFunction( const Self& );$/;"	p	class:itk::Blur3DImageFunction	access:private	signature:( const Self& )
Blur3DImageFunction	.\itkBlur3DImageFunction.h	/^  Blur3DImageFunction();$/;"	p	class:itk::Blur3DImageFunction	access:protected	signature:()
Blur3DImageFunction	.\itkBlur3DImageFunction.h	/^class ITK_EXPORT Blur3DImageFunction :$/;"	c	namespace:itk	inherits:ImageFunction
Blur3DTest	.\Testing\Blur3DTest.cxx	/^int Blur3DTest(int argc, char * argv[])$/;"	f	signature:(int argc, char * argv[])
BranchnessAtKern	.\2D\itkRadiusExtractor2D.h	/^  double  BranchnessAtKern(TubeType * tube, double pntR);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(TubeType * tube, double pntR)
BranchnessAtPoint	.\2D\itkRadiusExtractor2D.h	/^  double BranchnessAtPoint(TubePointType pnt,double pntR);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(TubePointType pnt,double pntR)
CalcKernArray	.\itkRadiusExtractor.h	/^  void CalcKernArray(TubeType * tube);$/;"	p	class:itk::RadiusExtractor	access:private	signature:(TubeType * tube)
CalcKernMeasures	.\itkRadiusExtractor.h	/^  void CalcKernMeasures(void);$/;"	p	class:itk::RadiusExtractor	access:private	signature:(void)
CalcKernRadiiOneWay	.\itkRadiusExtractor.h	/^  void CalcKernRadiiOneWay(int iStart, int iEnd, bool forward);$/;"	p	class:itk::RadiusExtractor	access:private	signature:(int iStart, int iEnd, bool forward)
CalcOptimalScale	.\2D\itkRadiusExtractor2D.h	/^  bool  CalcOptimalScale(TubePointType pnt, bool firstGuess =false);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(TubePointType pnt, bool firstGuess =false)
CalcOptimalScale	.\itkRadiusExtractor.h	/^  bool  CalcOptimalScale(TubePointType pnt, bool firstGuess =false);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(TubePointType pnt, bool firstGuess =false)
CalcRadii	.\2D\itkRadiusExtractor2D.h	/^  bool     CalcRadii(TubeType * tube);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(TubeType * tube)
CalcRadii	.\itkRadiusExtractor.h	/^  bool     CalcRadii(TubeType * tube);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(TubeType * tube)
CalcRadiiOneWay	.\2D\itkRadiusExtractor2D.h	/^  bool  CalcRadiiOneWay(std::vector<TubePointType>::iterator tubePntFrom,$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(std::vector<TubePointType>::iterator tubePntFrom, std::vector<TubePointType>::iterator tubePntTo, bool forward=true)
CalcRadiiOneWay	.\itkRadiusExtractor.h	/^  bool  CalcRadiiOneWay(std::vector<TubePointType>::iterator tubePntFrom,$/;"	p	class:itk::RadiusExtractor	access:public	signature:(std::vector<TubePointType>::iterator tubePntFrom, std::vector<TubePointType>::iterator tubePntTo, bool forward=true)
ComputeEuclideanDistance	.\itkMatrixMath.h	/^template <class PointType> double ComputeEuclideanDistance(PointType x,PointType y);$/;"	p	namespace:itk	signature:(PointType x,PointType y)
ComputeEuclideanDistanceVector	.\itkMatrixMath.h	/^template <class T> T ComputeEuclideanDistanceVector(vnl_vector<T> x, const vnl_vector<T> y);$/;"	p	namespace:itk	signature:(vnl_vector<T> x, const vnl_vector<T> y)
ComputeLineStep	.\itkMatrixMath.h	/^template <class T> vnl_vector<T> ComputeLineStep(vnl_vector<T> x, double a, vnl_vector<T> dir);$/;"	p	namespace:itk	signature:(vnl_vector<T> x, double a, vnl_vector<T> dir)
ComputeMnessBness	.\itkRadiusExtractor.h	/^  void     ComputeMnessBness(double pntR, double w,$/;"	p	class:itk::RadiusExtractor	access:public	signature:(double pntR, double w, double *kernPos, double *kernPosCnt, double *kernNeg, double *kernNegCnt, double *kernBrn, double *kernBrnCnt, double *mness, double *bness, bool doBNess)
ConstPointer	.\2D\itkRadiusExtractor2D.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::RadiusExtractor2D	access:public
ConstPointer	.\2D\itkRidgeExtractor2D.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::RidgeExtractor2D	access:public
ConstPointer	.\2D\itkTubeExtractor2D.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::TubeExtractor2D	access:public
ConstPointer	.\2D\itkTubeNetExtractor2D.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::TubeNetExtractor2D	access:public
ConstPointer	.\itkBlur3DImageFunction.h	/^  typedef SmartPointer<const Self>                     ConstPointer;$/;"	t	class:itk::Blur3DImageFunction	access:public
ConstPointer	.\itkRadiusExtractor.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::RadiusExtractor	access:public
ConstPointer	.\itkRidgeExtractor.h	/^  typedef SmartPointer<const Self>   ConstPointer;$/;"	t	class:itk::RidgeExtractor	access:public
ConstPointer	.\itkTubeExtractor.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::TubeExtractor	access:public
ConstPointer	.\itkTubeNetExtractor.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::TubeNetExtractor	access:public
ContinuousIndexType	.\itkBlur3DImageFunction.h	/^  typedef typename Superclass::ContinuousIndexType   ContinuousIndexType;$/;"	t	class:itk::Blur3DImageFunction	access:public
ContinuousIndexType	.\itkRidgeExtractor.h	/^  typedef typename ContinuousIndex<double, 3> ContinuousIndexType;$/;"	t	class:itk::RidgeExtractor	access:public
ContinuousIndexType	.\itkTubeExtractor.h	/^  typedef typename ContinuousIndex<double, 3>  ContinuousIndexType;$/;"	t	class:itk::TubeExtractor	access:public
DeleteTube	.\2D\itkRidgeExtractor2D.h	/^  bool DeleteTube(TubeType * tube);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(TubeType * tube)
DeleteTube	.\2D\itkTubeExtractor2D.h	/^  bool DeleteTube(TubeType* tube);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(TubeType* tube)
DeleteTube	.\2D\itkTubeNetExtractor2D.h	/^  bool DeleteTube(Tube * newTube);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(Tube * newTube)
DeleteTube	.\itkRidgeExtractor.h	/^  bool DeleteTube(TubeType * tube);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(TubeType * tube)
DeleteTube	.\itkTubeExtractor.h	/^  bool DeleteTube(TubeType* tube);$/;"	p	class:itk::TubeExtractor	access:public	signature:(TubeType* tube)
DeleteTube	.\itkTubeNetExtractor.h	/^  bool DeleteTube(TubeType * newTube);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(TubeType * newTube)
EIGEN_MAX_ITERATIONS	.\itkMatrixMath.h	21;"	d
EXTRACT_WORDS	.\vMathPrivate.h	69;"	d
Eigen	.\itkMatrixMath.h	/^template <class T> void Eigen(vnl_matrix<T> &mat, vnl_matrix<T> &eVects,vnl_vector_ref<T> eVals, bool orderByAbs);$/;"	p	namespace:itk	signature:(vnl_matrix<T> &mat, vnl_matrix<T> &eVects,vnl_vector_ref<T> eVals, bool orderByAbs)
Evaluate	.\itkBlur3DImageFunction.h	/^  virtual double Evaluate( const PointType& point ) const;$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( const PointType& point ) const
EvaluateAtContinuousIndex	.\itkBlur3DImageFunction.h	/^  virtual double EvaluateAtContinuousIndex( $/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( const ContinuousIndexType & index ) const
EvaluateAtIndex	.\itkBlur3DImageFunction.h	/^  virtual double EvaluateAtIndex( const IndexType & index ) const;$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( const IndexType & index ) const
EvaluateLinearInterpolate	.\itkBlur3DImageFunction.h	/^  double EvaluateLinearInterpolate(const ContinuousIndexType & point) const;$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(const ContinuousIndexType & point) const
Extract	.\2D\itkRidgeExtractor2D.h	/^  TubePointer  Extract(VectorType * x, int tubeID);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(VectorType * x, int tubeID)
Extract	.\itkRidgeExtractor.h	/^  TubePointer  Extract(ContinuousIndexType & x, int tubeID);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ContinuousIndexType & x, int tubeID)
ExtractRidge	.\2D\itkTubeExtractor2D.h	/^  bool ExtractRidge(void); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
ExtractRidge	.\2D\itkTubeExtractor2D.h	/^  void ExtractRidge(bool extractRidge); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(bool extractRidge)
ExtractRidge	.\itkTubeExtractor.h	/^  bool ExtractRidge(void); $/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
ExtractRidge	.\itkTubeExtractor.h	/^  void ExtractRidge(bool extractRidge); $/;"	p	class:itk::TubeExtractor	access:public	signature:(bool extractRidge)
ExtractTube	.\2D\itkTubeExtractor2D.h	/^  bool ExtractTube(float x, float y, unsigned int tubeID); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(float x, float y, unsigned int tubeID)
ExtractTube	.\2D\itkTubeNetExtractor2D.h	/^  bool ExtractTube(float x, float y);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(float x, float y)
ExtractTube	.\itkTubeExtractor.h	/^  bool ExtractTube(float x, float y, float z, unsigned int tubeID); $/;"	p	class:itk::TubeExtractor	access:public	signature:(float x, float y, float z, unsigned int tubeID)
ExtractTube	.\itkTubeNetExtractor.h	/^  bool ExtractTube(float x, float y);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(float x, float y)
ExtractTube	.\itkTubeNetExtractor.h	/^  bool ExtractTube(float x, float y, float z);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(float x, float y, float z)
ExtractValley	.\2D\itkTubeExtractor2D.h	/^  bool ExtractValley(void); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
ExtractValley	.\2D\itkTubeExtractor2D.h	/^  void ExtractValley(bool extractValley); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(bool extractValley)
ExtractValley	.\itkTubeExtractor.h	/^  bool ExtractValley(void); $/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
ExtractValley	.\itkTubeExtractor.h	/^  void ExtractValley(bool extractValley); $/;"	p	class:itk::TubeExtractor	access:public	signature:(bool extractValley)
GET_FLOAT_WORD	.\vMathPrivate.h	136;"	d
GET_HIGH_WORD	.\vMathPrivate.h	79;"	d
GET_LOW_WORD	.\vMathPrivate.h	88;"	d
GetCrossVector	.\itkMatrixMath.h	/^template <class T> vnl_vector<T> GetCrossVector(vnl_vector<T> x);$/;"	p	namespace:itk	signature:(vnl_vector<T> x)
GetDataMax	.\2D\itkTubeExtractor2D.h	/^  double GetDataMax(void); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
GetDataMax	.\itkTubeExtractor.h	/^  double GetDataMax(void); $/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
GetDataMin	.\2D\itkTubeExtractor2D.h	/^  double GetDataMin(void); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
GetDataMin	.\itkTubeExtractor.h	/^  double GetDataMin(void); $/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
GetDataSpline	.\2D\itkRidgeExtractor2D.h	/^  SplineND* GetDataSpline(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
GetDataSpline	.\itkRidgeExtractor.h	/^  SplineND* GetDataSpline(void);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void)
GetDataSpline1D	.\2D\itkRidgeExtractor2D.h	/^  Spline1D* GetDataSpline1D(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
GetDataSpline1D	.\itkRidgeExtractor.h	/^  Spline1D* GetDataSpline1D(void);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void)
GetDataSplineOptimizer	.\2D\itkRidgeExtractor2D.h	/^  Optimizer1D* GetDataSplineOptimizer(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
GetDataSplineOptimizer	.\itkRidgeExtractor.h	/^  Optimizer1D* GetDataSplineOptimizer(void);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void)
GetExtent	.\2D\itkRidgeExtractor2D.h	/^  double GetExtent(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
GetExtent	.\itkRidgeExtractor.h	/^  double GetExtent(void);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void)
GetExtractBoundMax	.\2D\itkRidgeExtractor2D.h	/^  IntVectorType* GetExtractBoundMax(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
GetExtractBoundMin	.\2D\itkRidgeExtractor2D.h	/^  IntVectorType* GetExtractBoundMin(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
GetLastPosition	.\2D\itkTubeExtractor2D.h	/^  VectorType* GetLastPosition(void);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
GetLastPosition	.\itkTubeExtractor.h	/^  ContinuousIndexType   GetLastPosition(void);$/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
GetLastTube	.\2D\itkTubeExtractor2D.h	/^  TubePointer GetLastTube(void);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
GetLastTube	.\itkTubeExtractor.h	/^  TubePointer GetLastTube(void);$/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
GetMedialnessOpt	.\2D\itkRadiusExtractor2D.h	/^  OptimizerType & GetMedialnessOpt(void);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(void)
GetMedialnessOpt	.\itkRadiusExtractor.h	/^  OptParabolicFit1D & GetMedialnessOpt(void);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(void)
GetOrthogonalVector	.\itkMatrixMath.h	/^template <class T> vnl_vector<T> GetOrthogonalVector(vnl_vector<T> x);$/;"	p	namespace:itk	signature:(vnl_vector<T> x)
GetRadius	.\2D\itkTubeExtractor2D.h	/^  double GetRadius(void); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
GetRadius	.\itkTubeExtractor.h	/^  double GetRadius(void); $/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
GetRadiusOp	.\2D\itkTubeExtractor2D.h	/^  typename RadiusExtractor2D<TInputImage>::Pointer GetRadiusOp(void);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
GetRadiusOp	.\itkTubeExtractor.h	/^  typename RadiusExtractor<ImageType>::Pointer GetRadiusOp(void);$/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
GetRidgeOp	.\2D\itkTubeExtractor2D.h	/^  typename RidgeExtractor2D<TInputImage>::Pointer GetRidgeOp(void);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
GetRidgeOp	.\itkTubeExtractor.h	/^  typename RidgeExtractor<ImageType>::Pointer GetRidgeOp(void);$/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
GetScale	.\2D\itkRidgeExtractor2D.h	/^  double GetScale(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
GetScale	.\itkRidgeExtractor.h	/^  double GetScale(void);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void)
GetTubeNet	.\2D\itkTubeNetExtractor2D.h	/^  TubeNet::Pointer GetTubeNet(void);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(void)
GetTubeNet	.\itkTubeNetExtractor.h	/^  TubeType::Pointer GetTubeNet(void);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(void)
INSERT_WORDS	.\vMathPrivate.h	97;"	d
ITKVectorType	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TubeType::VectorType ITKVectorType;$/;"	t	class:itk::RadiusExtractor2D	access:public
ITKVectorType	.\itkRadiusExtractor.h	/^  typedef typename TubeType::VectorType ITKVectorType;$/;"	t	class:itk::RadiusExtractor	access:public
ITK_TEST_DIMENSION_MAX	.\Testing\ImageCompare.cxx	29;"	d	file:
ITK_TEST_DIMENSION_MAX	.\Testing\ImageCompare.cxx	31;"	d	file:
ITK_TEST_DIMENSION_MAX	.\Testing\ImageCompareCommand.cxx	33;"	d	file:
ITK_TEST_DIMENSION_MAX	.\Testing\ImageCompareCommand.cxx	35;"	d	file:
IdleCallBack	.\2D\itkRidgeExtractor2D.h	/^  void   IdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool (idleCallBack)))
IdleCallBack	.\2D\itkTubeExtractor2D.h	/^  void   IdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(bool (idleCallBack)))
IdleCallBack	.\itkRidgeExtractor.h	/^  void   IdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::RidgeExtractor	access:public	signature:(bool (idleCallBack)))
IdleCallBack	.\itkTubeExtractor.h	/^  void   IdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::TubeExtractor	access:public	signature:(bool (idleCallBack)))
ImageConstPointer	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::RadiusExtractor2D	access:public
ImageConstPointer	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::RidgeExtractor2D	access:public
ImageConstPointer	.\2D\itkTubeExtractor2D.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::TubeExtractor2D	access:public
ImageConstPointer	.\2D\itkTubeNetExtractor2D.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::TubeNetExtractor2D	access:public
ImageConstPointer	.\itkRadiusExtractor.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::RadiusExtractor	access:public
ImageConstPointer	.\itkRidgeExtractor.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::RidgeExtractor	access:public
ImageConstPointer	.\itkTubeExtractor.h	/^  typedef typename ImageType::ConstPointer ImageConstPointer;$/;"	t	class:itk::TubeExtractor	access:public
ImageDimension	.\2D\itkRadiusExtractor2D.h	/^  enum {ImageDimension = ImageType::ImageDimension};$/;"	e	enum:itk::RadiusExtractor2D::__anon1
ImageDimension	.\2D\itkRidgeExtractor2D.h	/^  enum {ImageDimension = ImageType::ImageDimension};$/;"	e	enum:itk::RidgeExtractor2D::__anon2
ImageDimension	.\2D\itkTubeExtractor2D.h	/^  enum {ImageDimension = ImageType::ImageDimension};$/;"	e	enum:itk::TubeExtractor2D::__anon3
ImageDimension	.\2D\itkTubeNetExtractor2D.h	/^  enum {ImageDimension = ImageType::ImageDimension};$/;"	e	enum:itk::TubeNetExtractor2D::__anon4
ImagePointer	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TInputImage::Pointer  ImagePointer;$/;"	t	class:itk::RadiusExtractor2D	access:public
ImagePointer	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TInputImage::Pointer  ImagePointer;$/;"	t	class:itk::RidgeExtractor2D	access:public
ImagePointer	.\2D\itkTubeExtractor2D.h	/^  typedef typename TInputImage::Pointer  ImagePointer;$/;"	t	class:itk::TubeExtractor2D	access:public
ImagePointer	.\2D\itkTubeNetExtractor2D.h	/^  typedef typename TInputImage::Pointer  ImagePointer;$/;"	t	class:itk::TubeNetExtractor2D	access:public
ImagePointer	.\itkRadiusExtractor.h	/^  typedef typename TInputImage::Pointer  ImagePointer;$/;"	t	class:itk::RadiusExtractor	access:public
ImagePointer	.\itkRidgeExtractor.h	/^  typedef typename TInputImage::Pointer      ImagePointer;$/;"	t	class:itk::RidgeExtractor	access:public
ImagePointer	.\itkTubeExtractor.h	/^  typedef typename ImageType::Pointer      ImagePointer;$/;"	t	class:itk::TubeExtractor	access:public
ImagePointer	.\itkTubeNetExtractor.h	/^  typedef typename ImageType::Pointer      ImagePointer;$/;"	t	class:itk::TubeNetExtractor	access:public
ImageType	.\2D\itkRadiusExtractor2D.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::RadiusExtractor2D	access:public
ImageType	.\2D\itkRidgeExtractor2D.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::RidgeExtractor2D	access:public
ImageType	.\2D\itkTubeExtractor2D.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::TubeExtractor2D	access:public
ImageType	.\2D\itkTubeNetExtractor2D.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::TubeNetExtractor2D	access:public
ImageType	.\itkRadiusExtractor.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::RadiusExtractor	access:public
ImageType	.\itkRidgeExtractor.h	/^  typedef TInputImage                        ImageType;$/;"	t	class:itk::RidgeExtractor	access:public
ImageType	.\itkSplineND.h	/^  typedef Image<double,3>   ImageType;$/;"	t	class:itk::SplineND	access:public
ImageType	.\itkTubeExtractor.h	/^  typedef TInputImage                        ImageType;$/;"	t	class:itk::TubeExtractor	access:public
ImageType	.\itkTubeNetExtractor.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::TubeNetExtractor	access:public
IndexType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename ImageType::IndexType  IndexType; $/;"	t	class:itk::RidgeExtractor2D	access:public
IndexType	.\itkBlur3DImageFunction.h	/^  typedef typename InputImageType::IndexType         IndexType;$/;"	t	class:itk::Blur3DImageFunction	access:public
IndexType	.\itkRidgeExtractor.h	/^  typedef typename TInputImage::IndexType    IndexType;$/;"	t	class:itk::RidgeExtractor	access:public
IndexType	.\itkTubeNetExtractor.h	/^  typedef typename TInputImage::IndexType  IndexType;$/;"	t	class:itk::TubeNetExtractor	access:public
InputImageType	.\itkBlur3DImageFunction.h	/^  typedef TInputImage                                InputImageType;$/;"	t	class:itk::Blur3DImageFunction	access:public
IntVectorType	.\2D\itkRidgeExtractor2D.h	/^  typedef itk::Vector<int,2> IntVectorType;$/;"	t	class:itk::RidgeExtractor2D	access:public
IntVectorType	.\itkSplineND.h	/^  typedef vnl_vector<int> IntVectorType;$/;"	t	class:itk::SplineND	access:public
Intensity	.\2D\itkRidgeExtractor2D.h	/^  double  Intensity(VnlIntVectorType * x);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(VnlIntVectorType * x)
Intensity	.\itkRidgeExtractor.h	/^  double  Intensity(IndexType & x);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(IndexType & x)
KernelWeightsListType	.\itkBlur3DImageFunction.h	/^  typedef std::list<double>                       KernelWeightsListType;$/;"	t	class:itk::Blur3DImageFunction	access:private
KernelXListType	.\itkBlur3DImageFunction.h	/^  typedef std::list< Index<3> >                   KernelXListType;$/;"	t	class:itk::Blur3DImageFunction	access:private
LocalRidge	.\2D\itkRidgeExtractor2D.h	/^  bool   LocalRidge(VectorType * x);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(VectorType * x)
LocalRidge	.\itkRidgeExtractor.h	/^  bool   LocalRidge(ContinuousIndexType & x);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ContinuousIndexType & x)
MaskPointer	.\itkTubeNetExtractor.h	/^  typedef typename MaskType::Pointer       MaskPointer;$/;"	t	class:itk::TubeNetExtractor	access:public
MaskType	.\itkRidgeExtractor.h	/^  typedef Image<float, 3>                    MaskType;$/;"	t	class:itk::RidgeExtractor	access:public
MaskType	.\itkTubeNetExtractor.h	/^  typedef TInputMask                       MaskType;$/;"	t	class:itk::TubeNetExtractor	access:public
MatrixType	.\2D\itkRidgeExtractor2D.h	/^  typedef itk::Matrix<double,2> MatrixType;$/;"	t	class:itk::RidgeExtractor2D	access:public
MatrixType	.\itkOptimizerND.h	/^  typedef vnl_matrix<double> MatrixType;$/;"	t	class:itk::OptimizerND	access:public
MatrixType	.\itkRidgeExtractor.h	/^  typedef Matrix<double, 3, 3>               MatrixType;$/;"	t	class:itk::RidgeExtractor	access:public
MatrixType	.\itkSplineND.h	/^  typedef vnl_matrix<double> MatrixType;$/;"	t	class:itk::SplineND	access:public
MedialnessAtKern	.\2D\itkRadiusExtractor2D.h	/^  double   MedialnessAtKern(std::list<TubePointType> * tube, double pntR);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(std::list<TubePointType> * tube, double pntR)
MedialnessAtKern	.\itkRadiusExtractor.h	/^  double   MedialnessAtKern(std::list<TubePointType> * tube, double pntR, bool doBNess);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(std::list<TubePointType> * tube, double pntR, bool doBNess)
MedialnessAtPoint	.\2D\itkRadiusExtractor2D.h	/^  double MedialnessAtPoint(TubePointType pnt,double pntR);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(TubePointType pnt,double pntR)
MedialnessAtPoint	.\itkRadiusExtractor.h	/^  double   MedialnessAtPoint(TubePointType pnt, double pntR,$/;"	p	class:itk::RadiusExtractor	access:public	signature:(TubePointType pnt, double pntR, bool doBNess=false, bool newKern=true, double w=1)
NewTubeCallBack	.\2D\itkTubeExtractor2D.h	/^  void   NewTubeCallBack(void (*newTubeCallBack)(Tube *));$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void (*newTubeCallBack)(Tube *))
NewTubeCallBack	.\2D\itkTubeNetExtractor2D.h	/^  void   NewTubeCallBack(void (*newTubeCallBack)(Tube *));$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(void (*newTubeCallBack)(Tube *))
NewTubeCallBack	.\itkTubeExtractor.h	/^  void   NewTubeCallBack(void (*newTubeCallBack)(TubeType *));$/;"	p	class:itk::TubeExtractor	access:public	signature:(void (*newTubeCallBack)(TubeType *))
NewTubeCallBack	.\itkTubeNetExtractor.h	/^  void   NewTubeCallBack(void (*newTubeCallBack)(TubeType *));$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(void (*newTubeCallBack)(TubeType *))
NormalPlaneMatrixType	.\itkRidgeExtractor.h	/^  typedef Matrix<double, 3, 2>               NormalPlaneMatrixType;$/;"	t	class:itk::RidgeExtractor	access:public
OptBrent1D	.\itkOptBrent1D.cxx	/^OptBrent1D::OptBrent1D()$/;"	f	class:itk::OptBrent1D	signature:()
OptBrent1D	.\itkOptBrent1D.cxx	/^OptBrent1D::OptBrent1D(UserFunc<double, double> *newFuncVal)$/;"	f	class:itk::OptBrent1D	signature:(UserFunc<double, double> *newFuncVal)
OptBrent1D	.\itkOptBrent1D.h	/^  OptBrent1D();$/;"	p	class:itk::OptBrent1D	access:public	signature:()
OptBrent1D	.\itkOptBrent1D.h	/^  OptBrent1D(UserFunc<double, double> *newFuncVal);$/;"	p	class:itk::OptBrent1D	access:public	signature:(UserFunc<double, double> *newFuncVal)
OptBrent1D	.\itkOptBrent1D.h	/^class OptBrent1D : public Optimizer1D $/;"	c	namespace:itk	inherits:Optimizer1D
OptDerivFuncND	.\itkOptimizerND.cxx	/^  OptDerivFuncND(OptimizerND * newOpt)$/;"	f	class:itk::OptDerivFuncND	access:public	signature:(OptimizerND * newOpt)
OptDerivFuncND	.\itkOptimizerND.cxx	/^class OptDerivFuncND : public UserFunc<double, double> {$/;"	c	namespace:itk	file:	inherits:UserFunc
OptGoldenMean1D	.\itkOptGoldenMean1D.cxx	/^OptGoldenMean1D::OptGoldenMean1D()$/;"	f	class:itk::OptGoldenMean1D	signature:()
OptGoldenMean1D	.\itkOptGoldenMean1D.cxx	/^OptGoldenMean1D::OptGoldenMean1D(UserFunc<double, double> *newFuncVal)$/;"	f	class:itk::OptGoldenMean1D	signature:(UserFunc<double, double> *newFuncVal)
OptGoldenMean1D	.\itkOptGoldenMean1D.h	/^  OptGoldenMean1D();$/;"	p	class:itk::OptGoldenMean1D	access:public	signature:()
OptGoldenMean1D	.\itkOptGoldenMean1D.h	/^  OptGoldenMean1D(UserFunc<double, double> *newFuncVal);$/;"	p	class:itk::OptGoldenMean1D	access:public	signature:(UserFunc<double, double> *newFuncVal)
OptGoldenMean1D	.\itkOptGoldenMean1D.h	/^class OptGoldenMean1D : public Optimizer1D $/;"	c	namespace:itk	inherits:Optimizer1D
OptParabolicFit1D	.\itkOptParabolicFit1D.cxx	/^OptParabolicFit1D::OptParabolicFit1D()$/;"	f	class:itk::OptParabolicFit1D	signature:()
OptParabolicFit1D	.\itkOptParabolicFit1D.cxx	/^OptParabolicFit1D::OptParabolicFit1D(UserFunc<double, double> *newFuncVal)$/;"	f	class:itk::OptParabolicFit1D	signature:(UserFunc<double, double> *newFuncVal)
OptParabolicFit1D	.\itkOptParabolicFit1D.h	/^  OptParabolicFit1D();$/;"	p	class:itk::OptParabolicFit1D	access:public	signature:()
OptParabolicFit1D	.\itkOptParabolicFit1D.h	/^  OptParabolicFit1D(UserFunc<double, double> *newFuncVal);$/;"	p	class:itk::OptParabolicFit1D	access:public	signature:(UserFunc<double, double> *newFuncVal)
OptParabolicFit1D	.\itkOptParabolicFit1D.h	/^class OptParabolicFit1D : public Optimizer1D $/;"	c	namespace:itk	inherits:Optimizer1D
OptValFuncND	.\itkOptimizerND.cxx	/^  OptValFuncND(OptimizerND * newOpt)$/;"	f	class:itk::OptValFuncND	access:public	signature:(OptimizerND * newOpt)
OptValFuncND	.\itkOptimizerND.cxx	/^class OptValFuncND : public UserFunc<double, double> {$/;"	c	namespace:itk	file:	inherits:UserFunc
Optimizer1D	.\itkOptimizer1D.cxx	/^::Optimizer1D()$/;"	f	class:itk::Optimizer1D	signature:()
Optimizer1D	.\itkOptimizer1D.cxx	/^Optimizer1D::Optimizer1D(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)$/;"	f	class:itk::Optimizer1D	signature:(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)
Optimizer1D	.\itkOptimizer1D.h	/^  Optimizer1D();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
Optimizer1D	.\itkOptimizer1D.h	/^  Optimizer1D(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv);$/;"	p	class:itk::Optimizer1D	access:public	signature:(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)
Optimizer1D	.\itkOptimizer1D.h	/^class Optimizer1D$/;"	c	namespace:itk
OptimizerND	.\itkOptimizerND.cxx	/^OptimizerND::OptimizerND()$/;"	f	class:itk::OptimizerND	signature:()
OptimizerND	.\itkOptimizerND.cxx	/^OptimizerND::OptimizerND(int newNDims, UserFunc<VectorType *, double> * newFuncValND, UserFunc<VectorType *, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)$/;"	f	class:itk::OptimizerND	signature:(int newNDims, UserFunc<VectorType *, double> * newFuncValND, UserFunc<VectorType *, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)
OptimizerND	.\itkOptimizerND.h	/^  OptimizerND();$/;"	p	class:itk::OptimizerND	access:public	signature:()
OptimizerND	.\itkOptimizerND.h	/^  OptimizerND(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D);$/;"	p	class:itk::OptimizerND	access:public	signature:(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)
OptimizerND	.\itkOptimizerND.h	/^class OptimizerND$/;"	c	namespace:itk
OptimizerType	.\2D\itkRadiusExtractor2D.h	/^  typedef OptGoldenMean1D OptimizerType;$/;"	t	class:itk::RadiusExtractor2D	access:public
OptimizerType	.\2D\itkRidgeExtractor2D.h	/^  typedef OptBrent1D OptimizerType;$/;"	t	class:itk::RidgeExtractor2D	access:public
PixelType	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TInputImage::PixelType PixelType;$/;"	t	class:itk::RadiusExtractor2D	access:public
PixelType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TInputImage::PixelType PixelType;$/;"	t	class:itk::RidgeExtractor2D	access:public
PixelType	.\2D\itkTubeExtractor2D.h	/^  typedef typename TInputImage::PixelType PixelType;$/;"	t	class:itk::TubeExtractor2D	access:public
PixelType	.\2D\itkTubeNetExtractor2D.h	/^  typedef typename TInputImage::PixelType PixelType;$/;"	t	class:itk::TubeNetExtractor2D	access:public
PixelType	.\itkRadiusExtractor.h	/^  typedef typename TInputImage::PixelType PixelType;$/;"	t	class:itk::RadiusExtractor	access:public
PixelType	.\itkRidgeExtractor.h	/^  typedef typename TInputImage::PixelType    PixelType;$/;"	t	class:itk::RidgeExtractor	access:public
PixelType	.\itkTubeExtractor.h	/^  typedef typename ImageType::PixelType    PixelType;$/;"	t	class:itk::TubeExtractor	access:public
PixelType	.\itkTubeNetExtractor.h	/^  typedef typename TInputImage::PixelType  PixelType;$/;"	t	class:itk::TubeNetExtractor	access:public
PointType	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TubeType::PointType PointType;$/;"	t	class:itk::RadiusExtractor2D	access:public
PointType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TubeType::PointType PointType;$/;"	t	class:itk::RidgeExtractor2D	access:public
PointType	.\itkBlur3DImageFunction.h	/^  typedef typename Superclass::PointType             PointType;$/;"	t	class:itk::Blur3DImageFunction	access:public
PointType	.\itkRadiusExtractor.h	/^  typedef typename TubeType::PointType PointType;$/;"	t	class:itk::RadiusExtractor	access:public
Pointer	.\2D\itkRadiusExtractor2D.h	/^  typedef SmartPointer<Self>   Pointer;$/;"	t	class:itk::RadiusExtractor2D	access:public
Pointer	.\2D\itkRidgeExtractor2D.h	/^  typedef SmartPointer<Self>   Pointer;$/;"	t	class:itk::RidgeExtractor2D	access:public
Pointer	.\2D\itkTubeExtractor2D.h	/^  typedef SmartPointer<Self>   Pointer;$/;"	t	class:itk::TubeExtractor2D	access:public
Pointer	.\2D\itkTubeNetExtractor2D.h	/^  typedef SmartPointer<Self>   Pointer;$/;"	t	class:itk::TubeNetExtractor2D	access:public
Pointer	.\itkBlur3DImageFunction.h	/^  typedef SmartPointer<Self>                           Pointer;$/;"	t	class:itk::Blur3DImageFunction	access:public
Pointer	.\itkRadiusExtractor.h	/^  typedef SmartPointer<Self>   Pointer;$/;"	t	class:itk::RadiusExtractor	access:public
Pointer	.\itkRidgeExtractor.h	/^  typedef SmartPointer<Self>         Pointer;$/;"	t	class:itk::RidgeExtractor	access:public
Pointer	.\itkTubeExtractor.h	/^  typedef SmartPointer<Self>        Pointer;$/;"	t	class:itk::TubeExtractor	access:public
Pointer	.\itkTubeNetExtractor.h	/^  typedef SmartPointer<Self>        Pointer;$/;"	t	class:itk::TubeNetExtractor	access:public
PrintSelf	.\itkBlur3DImageFunction.h	/^  void PrintSelf(std::ostream& os, Indent indent) const;$/;"	p	class:itk::Blur3DImageFunction	access:protected	signature:(std::ostream& os, Indent indent) const
RadiusExtractor	.\itkRadiusExtractor.h	/^  RadiusExtractor();$/;"	p	class:itk::RadiusExtractor	access:protected	signature:()
RadiusExtractor	.\itkRadiusExtractor.h	/^  RadiusExtractor(const Self&) {}$/;"	f	class:itk::RadiusExtractor	access:protected	signature:(const Self&)
RadiusExtractor	.\itkRadiusExtractor.h	/^class ITK_EXPORT RadiusExtractor : public Object $/;"	c	namespace:itk	inherits:Object
RadiusExtractor2D	.\2D\itkRadiusExtractor2D.h	/^  RadiusExtractor2D();$/;"	p	class:itk::RadiusExtractor2D	access:protected	signature:()
RadiusExtractor2D	.\2D\itkRadiusExtractor2D.h	/^  RadiusExtractor2D(const Self&) {}$/;"	f	class:itk::RadiusExtractor2D	access:protected	signature:(const Self&)
RadiusExtractor2D	.\2D\itkRadiusExtractor2D.h	/^class ITK_EXPORT RadiusExtractor2D : public Object $/;"	c	namespace:itk	inherits:Object
RecomputeKernel	.\itkBlur3DImageFunction.h	/^  void RecomputeKernel( void );$/;"	p	class:itk::Blur3DImageFunction	access:protected	signature:( void )
RegionType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename ImageType::RegionType RegionType;$/;"	t	class:itk::RidgeExtractor2D	access:public
RegisterTests	.\Testing\TubeExtractorLibTests.cxx	/^void RegisterTests()$/;"	f	signature:()
RegressionTestImage	.\Testing\ImageCompare.cxx	/^int RegressionTestImage (const char *, const char *, int, bool);$/;"	p	file:	signature:(const char *, const char *, int, bool)
RegressionTestImage	.\Testing\ImageCompare.cxx	/^int RegressionTestImage (const char *testImageFilename, const char *baselineImageFilename,$/;"	f	signature:(const char *testImageFilename, const char *baselineImageFilename, int reportErrors, bool differences)
RegressionTestImage	.\Testing\ImageCompareCommand.cxx	/^int RegressionTestImage (const char *, const char *, int, bool,double,int,int);$/;"	p	file:	signature:(const char *, const char *, int, bool,double,int,int)
RegressionTestImage	.\Testing\ImageCompareCommand.cxx	/^int RegressionTestImage (const char *testImageFilename, const char *baselineImageFilename,$/;"	f	signature:(const char *testImageFilename, const char *baselineImageFilename, int reportErrors, bool createDifferenceImage, double intensityTolerance, int radiusTolerance, int numberOfPixelsTolerance)
RidgeExtractor	.\itkRidgeExtractor.h	/^  RidgeExtractor();$/;"	p	class:itk::RidgeExtractor	access:protected	signature:()
RidgeExtractor	.\itkRidgeExtractor.h	/^  RidgeExtractor(const Self&) {}$/;"	f	class:itk::RidgeExtractor	access:protected	signature:(const Self&)
RidgeExtractor	.\itkRidgeExtractor.h	/^class ITK_EXPORT RidgeExtractor : public Object $/;"	c	namespace:itk	inherits:Object
RidgeExtractor2D	.\2D\itkRidgeExtractor2D.h	/^  RidgeExtractor2D();$/;"	p	class:itk::RidgeExtractor2D	access:protected	signature:()
RidgeExtractor2D	.\2D\itkRidgeExtractor2D.h	/^  RidgeExtractor2D(const Self&) {}$/;"	f	class:itk::RidgeExtractor2D	access:protected	signature:(const Self&)
RidgeExtractor2D	.\2D\itkRidgeExtractor2D.h	/^class ITK_EXPORT RidgeExtractor2D : public Object $/;"	c	namespace:itk	inherits:Object
Ridgeness	.\2D\itkRidgeExtractor2D.h	/^  double  Ridgeness(VectorType * x);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(VectorType * x)
Ridgeness	.\itkRidgeExtractor.h	/^  double  Ridgeness(ContinuousIndexType & x);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ContinuousIndexType & x)
SET_FLOAT_WORD	.\vMathPrivate.h	145;"	d
SET_HIGH_WORD	.\vMathPrivate.h	107;"	d
SET_LOW_WORD	.\vMathPrivate.h	117;"	d
Self	.\2D\itkRadiusExtractor2D.h	/^  typedef RadiusExtractor2D Self;$/;"	t	class:itk::RadiusExtractor2D	access:public
Self	.\2D\itkRidgeExtractor2D.h	/^  typedef RidgeExtractor2D Self;$/;"	t	class:itk::RidgeExtractor2D	access:public
Self	.\2D\itkTubeExtractor2D.h	/^  typedef TubeExtractor2D Self;$/;"	t	class:itk::TubeExtractor2D	access:public
Self	.\2D\itkTubeNetExtractor2D.h	/^  typedef TubeNetExtractor2D Self;$/;"	t	class:itk::TubeNetExtractor2D	access:public
Self	.\itkBlur3DImageFunction.h	/^  typedef Blur3DImageFunction                          Self;$/;"	t	class:itk::Blur3DImageFunction	access:public
Self	.\itkRadiusExtractor.h	/^  typedef RadiusExtractor Self;$/;"	t	class:itk::RadiusExtractor	access:public
Self	.\itkRidgeExtractor.h	/^  typedef RidgeExtractor             Self;$/;"	t	class:itk::RidgeExtractor	access:public
Self	.\itkTubeExtractor.h	/^  typedef TubeExtractor             Self;$/;"	t	class:itk::TubeExtractor	access:public
Self	.\itkTubeNetExtractor.h	/^  typedef TubeNetExtractor          Self;$/;"	t	class:itk::TubeNetExtractor	access:public
SetAutoExtractMask	.\2D\itkTubeNetExtractor2D.h	/^  void SetAutoExtractMask(ImagePointer autoExtractMask);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(ImagePointer autoExtractMask)
SetAutoExtractMask	.\itkTubeNetExtractor.h	/^  void SetAutoExtractMask(MaskPointer autoExtractMask);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(MaskPointer autoExtractMask)
SetAutoScale	.\2D\itkRidgeExtractor2D.h	/^  void SetAutoScale(bool autoScale);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool autoScale)
SetColor	.\2D\itkTubeExtractor2D.h	/^  void SetColor(float* color);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(float* color)
SetColor	.\itkTubeExtractor.h	/^  void SetColor(float* color);$/;"	p	class:itk::TubeExtractor	access:public	signature:(float* color)
SetDataMax	.\2D\itkRidgeExtractor2D.h	/^  void SetDataMax(double dataMax); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(double dataMax)
SetDataMax	.\2D\itkTubeExtractor2D.h	/^  void SetDataMax(double dataMax); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(double dataMax)
SetDataMax	.\itkRidgeExtractor.h	/^  void SetDataMax(double dataMax); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(double dataMax)
SetDataMax	.\itkTubeExtractor.h	/^  void SetDataMax(double dataMax); $/;"	p	class:itk::TubeExtractor	access:public	signature:(double dataMax)
SetDataMin	.\2D\itkRidgeExtractor2D.h	/^  void SetDataMin(double dataMin); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(double dataMin)
SetDataMin	.\2D\itkTubeExtractor2D.h	/^  void SetDataMin(double dataMin); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(double dataMin)
SetDataMin	.\itkRidgeExtractor.h	/^  void SetDataMin(double dataMin); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(double dataMin)
SetDataMin	.\itkTubeExtractor.h	/^  void SetDataMin(double dataMin); $/;"	p	class:itk::TubeExtractor	access:public	signature:(double dataMin)
SetDynamicScale	.\2D\itkRidgeExtractor2D.h	/^  void SetDynamicScale(bool dynamicScale);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool dynamicScale)
SetDynamicScale	.\itkRidgeExtractor.h	/^  void SetDynamicScale(bool dynamicScale);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(bool dynamicScale)
SetExtent	.\2D\itkRadiusExtractor2D.h	/^  void SetExtent(double extent);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(double extent)
SetExtent	.\2D\itkRidgeExtractor2D.h	/^  void SetExtent(double extent);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(double extent)
SetExtent	.\itkBlur3DImageFunction.h	/^  void SetExtent(double extent);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(double extent)
SetExtent	.\itkRadiusExtractor.h	/^  void SetExtent(double extent);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(double extent)
SetExtent	.\itkRidgeExtractor.h	/^  void SetExtent(double extent);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(double extent)
SetExtractBoundMax	.\2D\itkRidgeExtractor2D.h	/^  void SetExtractBoundMax(IntVectorType* extractBoundMax);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(IntVectorType* extractBoundMax)
SetExtractBoundMin	.\2D\itkRidgeExtractor2D.h	/^  void SetExtractBoundMin(IntVectorType* extractBoundMin);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(IntVectorType* extractBoundMin)
SetExtractValley	.\2D\itkRidgeExtractor2D.h	/^  void SetExtractValley(bool extractvalley)$/;"	f	class:itk::RidgeExtractor2D	access:public	signature:(bool extractvalley)
SetIdleCallBack	.\2D\itkRadiusExtractor2D.h	/^  void     SetIdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(bool (idleCallBack)))
SetIdleCallBack	.\itkRadiusExtractor.h	/^  void     SetIdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::RadiusExtractor	access:public	signature:(bool (idleCallBack)))
SetInputImage	.\2D\itkRadiusExtractor2D.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ImagePointer inputImage)
SetInputImage	.\2D\itkRidgeExtractor2D.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ImagePointer inputImage)
SetInputImage	.\2D\itkTubeExtractor2D.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(ImagePointer inputImage)
SetInputImage	.\2D\itkTubeNetExtractor2D.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(ImagePointer inputImage)
SetInputImage	.\itkBlur3DImageFunction.h	/^  virtual void SetInputImage( const InputImageType * ptr ); $/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( const InputImageType * ptr )
SetInputImage	.\itkRadiusExtractor.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(ImagePointer inputImage)
SetInputImage	.\itkRidgeExtractor.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ImagePointer inputImage)
SetInputImage	.\itkTubeExtractor.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::TubeExtractor	access:public	signature:(ImagePointer inputImage)
SetInputImage	.\itkTubeNetExtractor.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(ImagePointer inputImage)
SetModeCT	.\2D\itkRadiusExtractor2D.h	/^  void SetModeCT(bool modeCT);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(bool modeCT)
SetModeCT	.\2D\itkRidgeExtractor2D.h	/^  void SetModeCT(bool modeCT);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool modeCT)
SetModeCT	.\itkRadiusExtractor.h	/^  void SetModeCT(bool modeCT);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(bool modeCT)
SetModeMR	.\2D\itkRidgeExtractor2D.h	/^  void SetModeMR(bool ModeMR); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool ModeMR)
SetModeRetina	.\2D\itkRadiusExtractor2D.h	/^  void SetModeRetina(bool modeRetina);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(bool modeRetina)
SetModeRetina	.\2D\itkRidgeExtractor2D.h	/^  void SetModeRetina(bool ModeRetina); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool ModeRetina)
SetModeRetina	.\2D\itkTubeExtractor2D.h	/^  void SetModeRetina(bool modeRetina);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(bool modeRetina)
SetRadius	.\2D\itkTubeExtractor2D.h	/^  void SetRadius(double radius); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(double radius)
SetRadius	.\itkTubeExtractor.h	/^  void SetRadius(double radius); $/;"	p	class:itk::TubeExtractor	access:public	signature:(double radius)
SetRadiusExtractor	.\2D\itkRidgeExtractor2D.h	/^  void  SetRadiusExtractor(RadiusExtractor2D<TInputImage> * radiusExtractor);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(RadiusExtractor2D<TInputImage> * radiusExtractor)
SetRadiusExtractor	.\itkRidgeExtractor.h	/^  void  SetRadiusExtractor(RadiusExtractor<TInputImage> * radiusExtractor);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(RadiusExtractor<TInputImage> * radiusExtractor)
SetRadiusMax	.\2D\itkRadiusExtractor2D.h	/^  void SetRadiusMax(double radiusMax);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(double radiusMax)
SetRadiusMax	.\itkRadiusExtractor.h	/^  void SetRadiusMax(double radiusMax);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(double radiusMax)
SetRadiusMin	.\2D\itkRadiusExtractor2D.h	/^  void SetRadiusMin(double radiusMin);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(double radiusMin)
SetRadiusMin	.\itkRadiusExtractor.h	/^  void SetRadiusMin(double radiusMin);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(double radiusMin)
SetScale	.\2D\itkRadiusExtractor2D.h	/^  void SetScale(double scale);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(double scale)
SetScale	.\2D\itkRidgeExtractor2D.h	/^  void SetScale(double scale);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(double scale)
SetScale	.\itkBlur3DImageFunction.h	/^  void SetScale(double scale);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(double scale)
SetScale	.\itkRadiusExtractor.h	/^  void SetScale(double scale);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(double scale)
SetScale	.\itkRidgeExtractor.h	/^  void SetScale(double scale);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(double scale)
SetStatusCallBack	.\2D\itkRadiusExtractor2D.h	/^  void     SetStatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(void (*statusCallBack)(char *, char *, int))
SetStatusCallBack	.\itkRadiusExtractor.h	/^  void     SetStatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::RadiusExtractor	access:public	signature:(void (*statusCallBack)(char *, char *, int))
SetUseRelativeSpacing	.\itkBlur3DImageFunction.h	/^  void SetUseRelativeSpacing( bool useRelativeSpacing);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( bool useRelativeSpacing)
SizeType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename ImageType::SizeType SizeType;$/;"	t	class:itk::RidgeExtractor2D	access:public
SmoothTubeX	.\2D\itkRidgeExtractor2D.h	/^  void   SmoothTubeX(TubeType * tube, int h);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(TubeType * tube, int h)
SmoothTubeX	.\itkRidgeExtractor.h	/^  void SmoothTubeX(TubeType * tube, int h);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(TubeType * tube, int h)
SpacingType	.\itkBlur3DImageFunction.h	/^  typedef typename InputImageType::SpacingType       SpacingType;$/;"	t	class:itk::Blur3DImageFunction	access:public
Spline1D	.\itkSpline1D.cxx	/^Spline1D::Spline1D()$/;"	f	class:itk::Spline1D	signature:()
Spline1D	.\itkSpline1D.cxx	/^Spline1D::Spline1D(UserFunc<int, double> *newFuncVal, Optimizer1D *newOpt1D)$/;"	f	class:itk::Spline1D	signature:(UserFunc<int, double> *newFuncVal, Optimizer1D *newOpt1D)
Spline1D	.\itkSpline1D.h	/^  Spline1D();$/;"	p	class:itk::Spline1D	access:public	signature:()
Spline1D	.\itkSpline1D.h	/^  Spline1D(UserFunc<int, double> *newFuncVal, Optimizer1D * newOpt1D);$/;"	p	class:itk::Spline1D	access:public	signature:(UserFunc<int, double> *newFuncVal, Optimizer1D * newOpt1D)
Spline1D	.\itkSpline1D.h	/^class  Spline1D$/;"	c	namespace:itk
Spline1DDerivFunc	.\itkSpline1D.cxx	/^    Spline1DDerivFunc(Spline1D * newSpline)$/;"	f	class:itk::Spline1DDerivFunc	access:public	signature:(Spline1D * newSpline)
Spline1DDerivFunc	.\itkSpline1D.cxx	/^class Spline1DDerivFunc : public UserFunc<double, double> {$/;"	c	namespace:itk	file:	inherits:UserFunc
Spline1DValFunc	.\itkSpline1D.cxx	/^    Spline1DValFunc(Spline1D * newSpline)$/;"	f	class:itk::Spline1DValFunc	access:public	signature:(Spline1D * newSpline)
Spline1DValFunc	.\itkSpline1D.cxx	/^class Spline1DValFunc : public UserFunc<double, double> {$/;"	c	namespace:itk	file:	inherits:UserFunc
SplineApproximation1D	.\itkSplineApproximation1D.cxx	/^SplineApproximation1D::SplineApproximation1D()$/;"	f	class:itk::SplineApproximation1D	signature:()
SplineApproximation1D	.\itkSplineApproximation1D.cxx	/^SplineApproximation1D::SplineApproximation1D(UserFunc<int, double> *newFunval, Optimizer1D *newOpt1D)$/;"	f	class:itk::SplineApproximation1D	signature:(UserFunc<int, double> *newFunval, Optimizer1D *newOpt1D)
SplineApproximation1D	.\itkSplineApproximation1D.h	/^  SplineApproximation1D();$/;"	p	class:itk::SplineApproximation1D	access:public	signature:()
SplineApproximation1D	.\itkSplineApproximation1D.h	/^  SplineApproximation1D(UserFunc<int, double> *newFunval, Optimizer1D * newOpt1D);$/;"	p	class:itk::SplineApproximation1D	access:public	signature:(UserFunc<int, double> *newFunval, Optimizer1D * newOpt1D)
SplineApproximation1D	.\itkSplineApproximation1D.h	/^class SplineApproximation1D : public Spline1D$/;"	c	namespace:itk	inherits:Spline1D
SplineND	.\itkSplineND.cxx	/^  SplineND::SplineND()$/;"	f	class:itk::SplineND	signature:()
SplineND	.\itkSplineND.cxx	/^  SplineND::SplineND(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOpt1D)$/;"	f	class:itk::SplineND	signature:(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOpt1D)
SplineND	.\itkSplineND.h	/^  SplineND();$/;"	p	class:itk::SplineND	access:public	signature:()
SplineND	.\itkSplineND.h	/^  SplineND(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOptND);$/;"	p	class:itk::SplineND	access:public	signature:(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOptND)
SplineND	.\itkSplineND.h	/^class SplineND$/;"	c	namespace:itk
SplineNDDerivFunc	.\itkSplineND.cxx	/^  SplineNDDerivFunc(SplineND * newSpline)$/;"	f	class:itk::SplineNDDerivFunc	access:public	signature:(SplineND * newSpline)
SplineNDDerivFunc	.\itkSplineND.cxx	/^  class SplineNDDerivFunc : public UserFunc< vnl_vector<double>*, vnl_vector<double> & > $/;"	c	namespace:itk	file:	inherits:UserFunc
SplineNDValFunc	.\itkSplineND.cxx	/^  SplineNDValFunc(SplineND * newSpline)$/;"	f	class:itk::SplineNDValFunc	access:public	signature:(SplineND * newSpline)
SplineNDValFunc	.\itkSplineND.cxx	/^  class SplineNDValFunc : public UserFunc<vnl_vector<double> *, double> $/;"	c	namespace:itk	file:	inherits:UserFunc
StatusCallBack	.\2D\itkRidgeExtractor2D.h	/^  void   StatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void (*statusCallBack)(char *, char *, int))
StatusCallBack	.\2D\itkTubeExtractor2D.h	/^  void   StatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void (*statusCallBack)(char *, char *, int))
StatusCallBack	.\itkRidgeExtractor.h	/^  void   StatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void (*statusCallBack)(char *, char *, int))
StatusCallBack	.\itkTubeExtractor.h	/^  void   StatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::TubeExtractor	access:public	signature:(void (*statusCallBack)(char *, char *, int))
Superclass	.\2D\itkRadiusExtractor2D.h	/^  typedef Object  Superclass;$/;"	t	class:itk::RadiusExtractor2D	access:public
Superclass	.\2D\itkRidgeExtractor2D.h	/^  typedef Object  Superclass;$/;"	t	class:itk::RidgeExtractor2D	access:public
Superclass	.\2D\itkTubeExtractor2D.h	/^  typedef Object  Superclass;$/;"	t	class:itk::TubeExtractor2D	access:public
Superclass	.\2D\itkTubeNetExtractor2D.h	/^  typedef Object  Superclass;$/;"	t	class:itk::TubeNetExtractor2D	access:public
Superclass	.\itkBlur3DImageFunction.h	/^  typedef ImageFunction<TInputImage, double, double>   Superclass;$/;"	t	class:itk::Blur3DImageFunction	access:public
Superclass	.\itkRadiusExtractor.h	/^  typedef Object  Superclass;$/;"	t	class:itk::RadiusExtractor	access:public
Superclass	.\itkRidgeExtractor.h	/^  typedef Object                     Superclass;$/;"	t	class:itk::RidgeExtractor	access:public
Superclass	.\itkTubeExtractor.h	/^  typedef Object                    Superclass;$/;"	t	class:itk::TubeExtractor	access:public
Superclass	.\itkTubeNetExtractor.h	/^  typedef Object                    Superclass;$/;"	t	class:itk::TubeNetExtractor	access:public
TWO52	.\vRInt.cxx	/^TWO52[2]={$/;"	v	file:
Tqli	.\itkMatrixMath.h	/^template <class T> void Tqli (vnl_vector<T> &diag, vnl_vector<T> &subD, vnl_matrix<T> &mat);$/;"	p	namespace:itk	signature:(vnl_vector<T> &diag, vnl_vector<T> &subD, vnl_matrix<T> &mat)
TraverseOneWay	.\2D\itkRidgeExtractor2D.h	/^  TubePointer  TraverseOneWay(VectorType * newX, VectorType * newT, VectorType  * newN, int dir);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(VectorType * newX, VectorType * newT, VectorType * newN, int dir)
TraverseOneWay	.\itkRidgeExtractor.h	/^  TubeType *  TraverseOneWay(ContinuousIndexType & newX, VectorType & newT,$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ContinuousIndexType & newX, VectorType & newT, NormalPlaneMatrixType & newN, int dir)
TriDiag	.\itkMatrixMath.h	/^template <class T> void TriDiag(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD);$/;"	p	namespace:itk	signature:(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD)
TriDiag2D	.\itkMatrixMath.h	/^template <class T> void TriDiag2D(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD);$/;"	p	namespace:itk	signature:(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD)
TriDiag3D	.\itkMatrixMath.h	/^template <class T> void TriDiag3D(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD);$/;"	p	namespace:itk	signature:(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD)
TubeExtractor	.\itkTubeExtractor.h	/^  TubeExtractor();$/;"	p	class:itk::TubeExtractor	access:protected	signature:()
TubeExtractor	.\itkTubeExtractor.h	/^  TubeExtractor(const Self&) {}$/;"	f	class:itk::TubeExtractor	access:protected	signature:(const Self&)
TubeExtractor	.\itkTubeExtractor.h	/^class ITK_EXPORT TubeExtractor : public Object $/;"	c	namespace:itk	inherits:Object
TubeExtractor2D	.\2D\itkTubeExtractor2D.h	/^  TubeExtractor2D();$/;"	p	class:itk::TubeExtractor2D	access:protected	signature:()
TubeExtractor2D	.\2D\itkTubeExtractor2D.h	/^  TubeExtractor2D(const Self&) {}$/;"	f	class:itk::TubeExtractor2D	access:protected	signature:(const Self&)
TubeExtractor2D	.\2D\itkTubeExtractor2D.h	/^class ITK_EXPORT TubeExtractor2D : public Object $/;"	c	namespace:itk	inherits:Object
TubeNetExtractor	.\itkTubeNetExtractor.h	/^  TubeNetExtractor();$/;"	p	class:itk::TubeNetExtractor	access:protected	signature:()
TubeNetExtractor	.\itkTubeNetExtractor.h	/^  TubeNetExtractor(const Self&) {}$/;"	f	class:itk::TubeNetExtractor	access:protected	signature:(const Self&)
TubeNetExtractor	.\itkTubeNetExtractor.h	/^class ITK_EXPORT TubeNetExtractor : public TubeExtractor<TInputImage> $/;"	c	namespace:itk	inherits:TubeExtractor
TubeNetExtractor2D	.\2D\itkTubeNetExtractor2D.h	/^  TubeNetExtractor2D();$/;"	p	class:itk::TubeNetExtractor2D	access:protected	signature:()
TubeNetExtractor2D	.\2D\itkTubeNetExtractor2D.h	/^  TubeNetExtractor2D(const Self&) {}$/;"	f	class:itk::TubeNetExtractor2D	access:protected	signature:(const Self&)
TubeNetExtractor2D	.\2D\itkTubeNetExtractor2D.h	/^class ITK_EXPORT TubeNetExtractor2D : public TubeExtractor<TInputImage> $/;"	c	namespace:itk	inherits:TubeExtractor
TubePointType	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TubeType::TubePointType TubePointType;$/;"	t	class:itk::RadiusExtractor2D	access:public
TubePointType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TubeType::TubePointType TubePointType;$/;"	t	class:itk::RidgeExtractor2D	access:public
TubePointType	.\2D\itkTubeExtractor2D.h	/^  typedef typename TubeType::TubePointType TubePointType;$/;"	t	class:itk::TubeExtractor2D	access:public
TubePointType	.\itkRadiusExtractor.h	/^  typedef typename TubeType::TubePointType TubePointType;$/;"	t	class:itk::RadiusExtractor	access:public
TubePointType	.\itkRidgeExtractor.h	/^  typedef typename TubeType::TubePointType   TubePointType;$/;"	t	class:itk::RidgeExtractor	access:public
TubePointType	.\itkTubeExtractor.h	/^  typedef typename TubeType::TubePointType   TubePointType;$/;"	t	class:itk::TubeExtractor	access:public
TubePointer	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TubeType::Pointer TubePointer;$/;"	t	class:itk::RadiusExtractor2D	access:public
TubePointer	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TubeType::Pointer TubePointer;$/;"	t	class:itk::RidgeExtractor2D	access:public
TubePointer	.\2D\itkTubeExtractor2D.h	/^  typedef typename TubeType::Pointer TubePointer;$/;"	t	class:itk::TubeExtractor2D	access:public
TubePointer	.\itkRadiusExtractor.h	/^  typedef typename TubeType::Pointer TubePointer;$/;"	t	class:itk::RadiusExtractor	access:public
TubePointer	.\itkRidgeExtractor.h	/^  typedef typename TubeType::Pointer         TubePointer;$/;"	t	class:itk::RidgeExtractor	access:public
TubePointer	.\itkTubeExtractor.h	/^  typedef typename TubeType::Pointer         TubePointer;$/;"	t	class:itk::TubeExtractor	access:public
TubePointer	.\itkTubeNetExtractor.h	/^  typedef typename TubeType::Pointer       TubePointer;$/;"	t	class:itk::TubeNetExtractor	access:public
TubeType	.\2D\itkRadiusExtractor2D.h	/^  typedef VesselTubeSpatialObject<2> TubeType;$/;"	t	class:itk::RadiusExtractor2D	access:public
TubeType	.\2D\itkRidgeExtractor2D.h	/^  typedef VesselTubeSpatialObject<2> TubeType;$/;"	t	class:itk::RidgeExtractor2D	access:public
TubeType	.\2D\itkTubeExtractor2D.h	/^  typedef VesselTubeSpatialObject<2> TubeType;$/;"	t	class:itk::TubeExtractor2D	access:public
TubeType	.\itkRadiusExtractor.h	/^  typedef VesselTubeSpatialObject<3> TubeType;$/;"	t	class:itk::RadiusExtractor	access:public
TubeType	.\itkRidgeExtractor.h	/^  typedef VesselTubeSpatialObject<3>         TubeType;$/;"	t	class:itk::RidgeExtractor	access:public
TubeType	.\itkTubeExtractor.h	/^  typedef VesselTubeSpatialObject<3>         TubeType;$/;"	t	class:itk::TubeExtractor	access:public
TubeType	.\itkTubeNetExtractor.h	/^  typedef TubeSpatialObject<3>             TubeType;$/;"	t	class:itk::TubeNetExtractor	access:public
USERFUNC_H	.\UserFunc.h	18;"	d
UserFunc	.\UserFunc.h	/^  UserFunc();$/;"	p	class:itk::UserFunc	access:public	signature:()
UserFunc	.\UserFunc.h	/^UserFunc<InT, OutT>::UserFunc()$/;"	f	class:itk::UserFunc	signature:()
UserFunc	.\UserFunc.h	/^class UserFunc$/;"	c	namespace:itk
VERBOSE	.\2D\itkRidgeExtractor2D.h	/^  bool VERBOSE;$/;"	m	class:itk::RidgeExtractor2D	access:private
VERF_H	.\vErf.h	2;"	d
VRINT_H	.\vRInt.h	2;"	d
VectorRefType	.\itkSplineND.h	/^  typedef vnl_vector_ref<double> VectorRefType; $/;"	t	class:itk::SplineND	access:public
VectorType	.\2D\itkRadiusExtractor2D.h	/^  typedef vnl_vector<double> VectorType; $/;"	t	class:itk::RadiusExtractor2D	access:public
VectorType	.\2D\itkRidgeExtractor2D.h	/^  typedef itk::Vector<double,2> VectorType;$/;"	t	class:itk::RidgeExtractor2D	access:public
VectorType	.\2D\itkTubeExtractor2D.h	/^  typedef itk::Vector<double,2> VectorType;$/;"	t	class:itk::TubeExtractor2D	access:public
VectorType	.\2D\itkTubeNetExtractor2D.h	/^	typedef vnl_vector<double> VectorType; $/;"	t	class:itk::TubeNetExtractor2D	access:public
VectorType	.\itkOptimizerND.h	/^  typedef vnl_vector<double> VectorType;$/;"	t	class:itk::OptimizerND	access:public
VectorType	.\itkRadiusExtractor.h	/^  typedef vnl_vector<double> VectorType; $/;"	t	class:itk::RadiusExtractor	access:public
VectorType	.\itkRidgeExtractor.h	/^  typedef Vector<double, 3>                  VectorType;$/;"	t	class:itk::RidgeExtractor	access:public
VectorType	.\itkSpline1D.h	/^  typedef vnl_vector<double> VectorType;$/;"	t	class:itk::Spline1D	access:public
VectorType	.\itkSplineApproximation1D.h	/^  typedef vnl_vector<double> VectorType;$/;"	t	class:itk::SplineApproximation1D	access:public
VectorType	.\itkSplineND.h	/^  typedef vnl_vector<double> VectorType;$/;"	t	class:itk::SplineND	access:public
VectorType	.\itkTubeExtractor.h	/^  typedef itk::Vector<double, 3>                     VectorType;$/;"	t	class:itk::TubeExtractor	access:public
VectorType	.\itkTubeNetExtractor.h	/^  typedef Vector<double, 3>                VectorType; $/;"	t	class:itk::TubeNetExtractor	access:public
VnlIntVectorType	.\2D\itkRidgeExtractor2D.h	/^  typedef vnl_vector<int> VnlIntVectorType; $/;"	t	class:itk::RidgeExtractor2D	access:public
VnlMatrixType	.\2D\itkRidgeExtractor2D.h	/^  typedef vnl_matrix<double> VnlMatrixType; $/;"	t	class:itk::RidgeExtractor2D	access:public
VnlVectorType	.\2D\itkRidgeExtractor2D.h	/^  typedef vnl_vector<double> VnlVectorType; $/;"	t	class:itk::RidgeExtractor2D	access:public
_MATH_PRIVATE_H_	.\vMathPrivate.h	18;"	d
__anon5::__anon6::lsw	.\vMathPrivate.h	/^    unsigned int lsw;$/;"	m	struct:__anon5::__anon6	access:public
__anon5::__anon6::msw	.\vMathPrivate.h	/^    unsigned int msw;$/;"	m	struct:__anon5::__anon6	access:public
__anon5::parts	.\vMathPrivate.h	/^  } parts;$/;"	m	union:__anon5	typeref:struct:__anon5::__anon6
__anon5::value	.\vMathPrivate.h	/^  double value;$/;"	m	union:__anon5
__anon7::__anon8::lsw	.\vMathPrivate.h	/^    unsigned int lsw;$/;"	m	struct:__anon7::__anon8	access:public
__anon7::__anon8::msw	.\vMathPrivate.h	/^    unsigned int msw;$/;"	m	struct:__anon7::__anon8	access:public
__anon7::parts	.\vMathPrivate.h	/^  } parts;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon8
__anon7::value	.\vMathPrivate.h	/^  double value;$/;"	m	union:__anon7
__anon9::value	.\vMathPrivate.h	/^  float value;$/;"	m	union:__anon9
__anon9::word	.\vMathPrivate.h	/^  unsigned int word;$/;"	m	union:__anon9
__itkMatrixMath_h	.\itkMatrixMath.h	18;"	d
__itkOptBrent1D_h	.\itkOptBrent1D.h	18;"	d
__itkOptGoldenMean1D_h	.\itkOptGoldenMean1D.h	18;"	d
__itkOptParabolicFit1D_h	.\itkOptParabolicFit1D.h	18;"	d
__itkOptimizer1D_h	.\itkOptimizer1D.h	18;"	d
__itkOptimizerND_h	.\itkOptimizerND.h	18;"	d
__itkRadiusExtractor2D_h	.\2D\itkRadiusExtractor2D.h	18;"	d
__itkRadiusExtractor_h	.\itkRadiusExtractor.h	18;"	d
__itkRidgeExtractor2D_h	.\2D\itkRidgeExtractor2D.h	18;"	d
__itkRidgeExtractor_h	.\itkRidgeExtractor.h	18;"	d
__itkTubeExtractor2D_h	.\2D\itkTubeExtractor2D.h	18;"	d
__itkTubeExtractor_h	.\itkTubeExtractor.h	18;"	d
__itkTubeNetExtractor2D_h	.\2D\itkTubeNetExtractor2D.h	18;"	d
__itkTubeNetExtractor_h	.\itkTubeNetExtractor.h	18;"	d
_itkBlur3DImageFunction_h	.\itkBlur3DImageFunction.h	18;"	d
cCenter	.\itkOptParabolicFit1D.cxx	/^double OptParabolicFit1D::cCenter(double x1, double y1, $/;"	f	class:itk::OptParabolicFit1D	signature:(double x1, double y1, double x2, double y2, double x3, double y3)
cCenter	.\itkOptParabolicFit1D.h	/^  double cCenter(double x1, double y1, $/;"	p	class:itk::OptParabolicFit1D	access:protected	signature:(double x1, double y1, double x2, double y2, double x3, double y3)
cClip	.\itkSpline1D.h	/^  bool    cClip;$/;"	m	class:itk::Spline1D	access:protected
cClip	.\itkSplineND.h	/^  bool    cClip;$/;"	m	class:itk::SplineND	access:protected
cD	.\itkSplineND.h	/^  VectorType *cD;$/;"	m	class:itk::SplineND	access:protected
cData	.\itkSpline1D.h	/^  VectorType* cData;$/;"	m	class:itk::Spline1D	access:protected
cData	.\itkSplineND.h	/^  ImageType::Pointer  cData;$/;"	m	class:itk::SplineND	access:protected
cData1D	.\itkSplineND.h	/^  VectorType*  cData1D;$/;"	m	class:itk::SplineND	access:protected
cDataWS	.\itkSplineND.h	/^  ImageType::Pointer  cDataWS;$/;"	m	class:itk::SplineND	access:protected
cDefined	.\itkOptimizer1D.h	/^  bool     cDefined;$/;"	m	class:itk::Optimizer1D	access:protected
cDefined	.\itkOptimizerND.h	/^  bool            cDefined;$/;"	m	class:itk::OptimizerND	access:protected
cDefined	.\itkSpline1D.h	/^  bool    cDefined;$/;"	m	class:itk::Spline1D	access:protected
cDefined	.\itkSplineND.h	/^  bool    cDefined;$/;"	m	class:itk::SplineND	access:protected
cExtreme	.\itkOptBrent1D.cxx	/^bool OptBrent1D::cExtreme(double *extX, double *extVal)$/;"	f	class:itk::OptBrent1D	signature:(double *extX, double *extVal)
cExtreme	.\itkOptBrent1D.h	/^  bool cExtreme(double * x, double * xVal);$/;"	p	class:itk::OptBrent1D	access:protected	signature:(double * x, double * xVal)
cExtreme	.\itkOptGoldenMean1D.cxx	/^bool OptGoldenMean1D::cExtreme(double *extX, double *extVal)$/;"	f	class:itk::OptGoldenMean1D	signature:(double *extX, double *extVal)
cExtreme	.\itkOptGoldenMean1D.h	/^  bool cExtreme(double * x, double * xVal);$/;"	p	class:itk::OptGoldenMean1D	access:protected	signature:(double * x, double * xVal)
cExtreme	.\itkOptParabolicFit1D.cxx	/^bool OptParabolicFit1D::cExtreme(double *extX, double *extVal)$/;"	f	class:itk::OptParabolicFit1D	signature:(double *extX, double *extVal)
cExtreme	.\itkOptParabolicFit1D.h	/^  bool cExtreme(double * x, double * xVal);$/;"	p	class:itk::OptParabolicFit1D	access:protected	signature:(double * x, double * xVal)
cExtreme	.\itkOptimizer1D.cxx	/^::cExtreme(double * itkNotUsed(x), double * itkNotUsed(xVal))$/;"	f	class:itk::Optimizer1D	signature:(double * itkNotUsed(x), double * itkNotUsed(xVal))
cExtreme	.\itkOptimizer1D.h	/^  virtual  bool cExtreme(double *x, double *xVal);$/;"	p	class:itk::Optimizer1D	access:protected	signature:(double *x, double *xVal)
cFuncDeriv	.\itkOptimizer1D.h	/^  UserFunc<double, double> *cFuncDeriv;$/;"	m	class:itk::Optimizer1D	access:protected
cFuncDerivND	.\itkOptimizerND.h	/^  UserFunc<VectorType*, VectorType &> *      cFuncDerivND;$/;"	m	class:itk::OptimizerND	access:protected
cFuncVal	.\itkOptimizer1D.h	/^  UserFunc<double, double> *cFuncVal;$/;"	m	class:itk::Optimizer1D	access:protected
cFuncVal	.\itkSpline1D.h	/^  UserFunc<int, double> * cFuncVal;$/;"	m	class:itk::Spline1D	access:protected
cFuncVal	.\itkSplineND.h	/^  UserFunc<IntVectorType*, double> * cFuncVal;$/;"	m	class:itk::SplineND	access:protected
cFuncValND	.\itkOptimizerND.h	/^  UserFunc<VectorType*, double> *      cFuncValND;$/;"	m	class:itk::OptimizerND	access:protected
cGetData	.\itkSpline1D.cxx	/^void Spline1D::cGetData(double x)$/;"	f	class:itk::Spline1D	signature:(double x)
cGetData	.\itkSpline1D.h	/^  void    cGetData(double x);$/;"	p	class:itk::Spline1D	access:protected	signature:(double x)
cGetData	.\itkSplineND.cxx	/^  void SplineND::cGetData(VectorType & x)$/;"	f	class:itk::SplineND	signature:(VectorType & x)
cGetData	.\itkSplineND.h	/^  void    cGetData(VectorType &x);  $/;"	p	class:itk::SplineND	access:protected	signature:(VectorType &x)
cH	.\itkSplineND.h	/^  MatrixType *cH;$/;"	m	class:itk::SplineND	access:protected
cMaxIterations	.\itkOptimizer1D.h	/^  unsigned int     cMaxIterations;$/;"	m	class:itk::Optimizer1D	access:protected
cMaxIterations	.\itkOptimizerND.h	/^  unsigned int            cMaxIterations;$/;"	m	class:itk::OptimizerND	access:protected
cMove	.\itkOptBrent1D.cxx	/^void OptBrent1D::cMove(double & a, double & b, double & c, double d, double e, double f)$/;"	f	class:itk::OptBrent1D	signature:(double & a, double & b, double & c, double d, double e, double f)
cMove	.\itkOptBrent1D.h	/^  void cMove(double & a, double & b, double & c, double d, double e, double f);$/;"	p	class:itk::OptBrent1D	access:protected	signature:(double & a, double & b, double & c, double d, double e, double f)
cNDims	.\itkOptimizerND.h	/^  unsigned int            cNDims;$/;"	m	class:itk::OptimizerND	access:protected
cNDims	.\itkSplineND.h	/^  unsigned int    cNDims;$/;"	m	class:itk::SplineND	access:protected
cNewData	.\itkSpline1D.h	/^  bool    cNewData;$/;"	m	class:itk::Spline1D	access:protected
cNewData	.\itkSplineND.h	/^  bool            cNewData;$/;"	m	class:itk::SplineND	access:protected
cOpt	.\itkOptimizerND.cxx	/^    OptimizerND * cOpt;$/;"	m	class:itk::OptDerivFuncND	file:	access:private
cOpt	.\itkOptimizerND.cxx	/^    OptimizerND * cOpt;$/;"	m	class:itk::OptValFuncND	file:	access:private
cOpt1D	.\itkOptimizerND.h	/^  Optimizer1D *   cOpt1D;$/;"	m	class:itk::OptimizerND	access:protected
cOpt1D	.\itkSpline1D.h	/^  Optimizer1D *       cOpt1D;$/;"	m	class:itk::Spline1D	access:protected
cOpt1DDeriv	.\itkOptimizerND.h	/^  UserFunc<double, double> * cOpt1DDeriv;$/;"	m	class:itk::OptimizerND	access:protected
cOpt1DDeriv	.\itkSpline1D.h	/^  UserFunc<double, double> *    cOpt1DDeriv;$/;"	m	class:itk::Spline1D	access:protected
cOpt1DVal	.\itkOptimizerND.h	/^  UserFunc<double, double> * cOpt1DVal;$/;"	m	class:itk::OptimizerND	access:protected
cOpt1DVal	.\itkSpline1D.h	/^  UserFunc<double, double> *      cOpt1DVal;$/;"	m	class:itk::Spline1D	access:protected
cOptND	.\itkSplineND.h	/^  OptimizerND *   cOptND;$/;"	m	class:itk::SplineND	access:protected
cOptNDDeriv	.\itkSplineND.h	/^  UserFunc<VectorType *, VectorType &> * cOptNDDeriv;$/;"	m	class:itk::SplineND	access:protected
cOptNDVal	.\itkSplineND.h	/^  UserFunc<VectorType *, double> * cOptNDVal;$/;"	m	class:itk::SplineND	access:protected
cSearchForMin	.\itkOptimizer1D.h	/^  bool     cSearchForMin;$/;"	m	class:itk::Optimizer1D	access:protected
cSearchForMin	.\itkOptimizerND.h	/^  bool            cSearchForMin;$/;"	m	class:itk::OptimizerND	access:protected
cSmall	.\itkOptBrent1D.h	/^  double cSmall;$/;"	m	class:itk::OptBrent1D	access:protected
cSpline	.\itkSplineND.cxx	/^  SplineND * cSpline;$/;"	m	class:itk::SplineNDDerivFunc	file:	access:private
cSpline	.\itkSplineND.cxx	/^  SplineND * cSpline;$/;"	m	class:itk::SplineNDValFunc	file:	access:private
cSpline1D	.\itkSplineND.h	/^  Spline1D *      cSpline1D;     $/;"	m	class:itk::SplineND	access:protected
cSplineApproximation1DMatrix	.\itkSplineApproximation1D.h	/^  float cSplineApproximation1DMatrix[4][4];$/;"	m	class:itk::SplineApproximation1D	access:protected
cSplineApproximation1DMatrixConst	.\itkSplineApproximation1D.h	/^  float cSplineApproximation1DMatrixConst;$/;"	m	class:itk::SplineApproximation1D	access:protected
cTolerance	.\itkOptimizer1D.h	/^  double   cTolerance;$/;"	m	class:itk::Optimizer1D	access:protected
cTolerance	.\itkOptimizerND.h	/^  double          cTolerance;$/;"	m	class:itk::OptimizerND	access:protected
cX0	.\itkOptimizerND.h	/^  VectorType *cX0;$/;"	m	class:itk::OptimizerND	access:protected
cX0Dir	.\itkOptimizerND.h	/^  VectorType *cX0Dir;$/;"	m	class:itk::OptimizerND	access:protected
cX0Temp	.\itkOptimizerND.h	/^  VectorType *cX0Temp;$/;"	m	class:itk::OptimizerND	access:protected
cXMax	.\itkOptimizer1D.h	/^  double   cXMax;$/;"	m	class:itk::Optimizer1D	access:protected
cXMax	.\itkOptimizerND.h	/^  VectorType *cXMax;$/;"	m	class:itk::OptimizerND	access:protected
cXMax	.\itkSpline1D.h	/^  int     cXMax;$/;"	m	class:itk::Spline1D	access:protected
cXMax	.\itkSplineND.h	/^  IntVectorType *   cXMax;$/;"	m	class:itk::SplineND	access:protected
cXMin	.\itkOptimizer1D.h	/^  double   cXMin;$/;"	m	class:itk::Optimizer1D	access:protected
cXMin	.\itkOptimizerND.h	/^  VectorType *cXMin;$/;"	m	class:itk::OptimizerND	access:protected
cXMin	.\itkSpline1D.h	/^  int     cXMin;$/;"	m	class:itk::Spline1D	access:protected
cXMin	.\itkSplineND.h	/^  IntVectorType *   cXMin;$/;"	m	class:itk::SplineND	access:protected
cXStep	.\itkOptimizer1D.h	/^  double   cXStep;         $/;"	m	class:itk::Optimizer1D	access:protected
cXStep	.\itkOptimizerND.h	/^  VectorType *cXStep;$/;"	m	class:itk::OptimizerND	access:protected
cXi	.\itkSplineND.h	/^  IntVectorType *   cXi;$/;"	m	class:itk::SplineND	access:protected
clipEdge	.\itkSpline1D.cxx	/^bool Spline1D::clipEdge(void)$/;"	f	class:itk::Spline1D	signature:(void)
clipEdge	.\itkSpline1D.cxx	/^void Spline1D::clipEdge(bool newClip)$/;"	f	class:itk::Spline1D	signature:(bool newClip)
clipEdge	.\itkSpline1D.h	/^  bool    clipEdge();$/;"	p	class:itk::Spline1D	access:public	signature:()
clipEdge	.\itkSpline1D.h	/^  void    clipEdge(bool newClip);$/;"	p	class:itk::Spline1D	access:public	signature:(bool newClip)
clipEdge	.\itkSplineND.cxx	/^  bool SplineND::clipEdge(void)$/;"	f	class:itk::SplineND	signature:(void)
clipEdge	.\itkSplineND.cxx	/^  void SplineND::clipEdge(bool newClip)$/;"	f	class:itk::SplineND	signature:(bool newClip)
clipEdge	.\itkSplineND.h	/^  bool    clipEdge();$/;"	p	class:itk::SplineND	access:public	signature:()
clipEdge	.\itkSplineND.h	/^  void    clipEdge(bool newClip);$/;"	p	class:itk::SplineND	access:public	signature:(bool newClip)
curv	.\itkSpline1D.cxx	/^double Spline1D::curv(double x)$/;"	f	class:itk::Spline1D	signature:(double x)
curv	.\itkSpline1D.h	/^  double  curv(double x);$/;"	p	class:itk::Spline1D	access:public	signature:(double x)
dataValue	.\itkSpline1D.h	/^  virtual double  dataValue(VectorType y, double x) = 0;$/;"	p	class:itk::Spline1D	access:public	signature:(VectorType y, double x)
dataValue	.\itkSplineApproximation1D.cxx	/^double SplineApproximation1D::dataValue(VectorType y, double x)$/;"	f	class:itk::SplineApproximation1D	signature:(VectorType y, double x)
dataValue	.\itkSplineApproximation1D.h	/^  double  dataValue(VectorType y, double x);$/;"	p	class:itk::SplineApproximation1D	access:public	signature:(VectorType y, double x)
dataValueD	.\itkSpline1D.h	/^  virtual double  dataValueD(VectorType y, double x) = 0;$/;"	p	class:itk::Spline1D	access:public	signature:(VectorType y, double x)
dataValueD	.\itkSplineApproximation1D.cxx	/^double SplineApproximation1D::dataValueD(VectorType y, double x)$/;"	f	class:itk::SplineApproximation1D	signature:(VectorType y, double x)
dataValueD	.\itkSplineApproximation1D.h	/^  double  dataValueD(VectorType y, double x);$/;"	p	class:itk::SplineApproximation1D	access:public	signature:(VectorType y, double x)
dataValueD2	.\itkSpline1D.h	/^  virtual double  dataValueD2(VectorType y, double x) = 0;$/;"	p	class:itk::Spline1D	access:public	signature:(VectorType y, double x)
dataValueD2	.\itkSplineApproximation1D.cxx	/^double SplineApproximation1D::dataValueD2(VectorType y, double x)$/;"	f	class:itk::SplineApproximation1D	signature:(VectorType y, double x)
dataValueD2	.\itkSplineApproximation1D.h	/^  double  dataValueD2(VectorType y, double x);$/;"	p	class:itk::SplineApproximation1D	access:public	signature:(VectorType y, double x)
dataValueJet	.\itkSpline1D.h	/^  virtual double  dataValueJet(VectorType y, double x, double * d, double * d2) = 0;$/;"	p	class:itk::Spline1D	access:public	signature:(VectorType y, double x, double * d, double * d2)
dataValueJet	.\itkSplineApproximation1D.cxx	/^double SplineApproximation1D::dataValueJet(VectorType y, double x, double *d, double *d2)$/;"	f	class:itk::SplineApproximation1D	signature:(VectorType y, double x, double *d, double *d2)
dataValueJet	.\itkSplineApproximation1D.h	/^  double  dataValueJet(VectorType y, double x, double *d, double *d2);$/;"	p	class:itk::SplineApproximation1D	access:public	signature:(VectorType y, double x, double *d, double *d2)
efx	.\vErf.cxx	/^efx =  1.28379167095512586316e-01, \/* 0x3FC06EBA, 0x8214DB69 *\/$/;"	v	file:
efx8	.\vErf.cxx	/^efx8=  1.02703333676410069053e+00, \/* 0x3FF06EBA, 0x8214DB69 *\/$/;"	v	file:
erx	.\vErf.cxx	/^erx =  8.45062911510467529297e-01, \/* 0x3FEB0AC1, 0x60000000 *\/$/;"	v	file:
extreme	.\itkOptimizer1D.cxx	/^bool Optimizer1D::extreme(double *x, double *xVal)$/;"	f	class:itk::Optimizer1D	signature:(double *x, double *xVal)
extreme	.\itkOptimizer1D.h	/^  bool     extreme(double *x, double *xVal);$/;"	p	class:itk::Optimizer1D	access:public	signature:(double *x, double *xVal)
extreme	.\itkOptimizerND.cxx	/^bool OptimizerND::extreme(VectorType & x, double * xVal)$/;"	f	class:itk::OptimizerND	signature:(VectorType & x, double * xVal)
extreme	.\itkOptimizerND.cxx	/^bool OptimizerND::extreme(VectorType & x, double * xVal, unsigned int n, MatrixType &dirs)$/;"	f	class:itk::OptimizerND	signature:(VectorType & x, double * xVal, unsigned int n, MatrixType &dirs)
extreme	.\itkOptimizerND.h	/^  bool    extreme(VectorType &x, double *xVal);$/;"	p	class:itk::OptimizerND	access:public	signature:(VectorType &x, double *xVal)
extreme	.\itkOptimizerND.h	/^  bool    extreme(VectorType &x, double *xVal, unsigned int n, MatrixType &dirs);$/;"	p	class:itk::OptimizerND	access:public	signature:(VectorType &x, double *xVal, unsigned int n, MatrixType &dirs)
extreme	.\itkSpline1D.cxx	/^bool Spline1D::extreme(double * extX, double * extVal)$/;"	f	class:itk::Spline1D	signature:(double * extX, double * extVal)
extreme	.\itkSpline1D.h	/^  bool    extreme(double *extX, double *extVal);$/;"	p	class:itk::Spline1D	access:public	signature:(double *extX, double *extVal)
extreme	.\itkSplineND.cxx	/^  bool SplineND::extreme(VectorRefType extX, double * extVal)$/;"	f	class:itk::SplineND	signature:(VectorRefType extX, double * extVal)
extreme	.\itkSplineND.cxx	/^  bool SplineND::extreme(VectorRefType extX, double *extVal, VectorType &dir)$/;"	f	class:itk::SplineND	signature:(VectorRefType extX, double *extVal, VectorType &dir)
extreme	.\itkSplineND.cxx	/^  bool SplineND::extreme(VectorRefType extX, double *extVal, unsigned int n, MatrixType &dirs)$/;"	f	class:itk::SplineND	signature:(VectorRefType extX, double *extVal, unsigned int n, MatrixType &dirs)
extreme	.\itkSplineND.h	/^  bool    extreme(VectorRefType extX, double * extVal);$/;"	p	class:itk::SplineND	access:public	signature:(VectorRefType extX, double * extVal)
extreme	.\itkSplineND.h	/^  bool    extreme(VectorRefType extX, double * extVal, VectorType &dir);$/;"	p	class:itk::SplineND	access:public	signature:(VectorRefType extX, double * extVal, VectorType &dir)
extreme	.\itkSplineND.h	/^  bool    extreme(VectorRefType extX, double * extVal, unsigned int n, MatrixType &dirs);$/;"	p	class:itk::SplineND	access:public	signature:(VectorRefType extX, double * extVal, unsigned int n, MatrixType &dirs)
extremeConjGrad	.\itkSplineND.cxx	/^  bool SplineND::extremeConjGrad(VectorType & extX, double * extVal)$/;"	f	class:itk::SplineND	signature:(VectorType & extX, double * extVal)
extremeConjGrad	.\itkSplineND.h	/^  bool    extremeConjGrad(VectorType & extX, double * extVal);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & extX, double * extVal)
funcDeriv	.\itkOptimizerND.cxx	/^double OptimizerND::funcDeriv(double a)$/;"	f	class:itk::OptimizerND	signature:(double a)
funcDeriv	.\itkOptimizerND.h	/^  double  funcDeriv(double x);$/;"	p	class:itk::OptimizerND	access:public	signature:(double x)
funcVal	.\itkOptimizerND.cxx	/^double OptimizerND::funcVal(double a)$/;"	f	class:itk::OptimizerND	signature:(double a)
funcVal	.\itkOptimizerND.h	/^  double  funcVal(double x);$/;"	p	class:itk::OptimizerND	access:public	signature:(double x)
half	.\vErf.cxx	/^half=  5.00000000000000000000e-01, \/* 0x3FE00000, 0x00000000 *\/$/;"	v	file:
hessian	.\itkSplineND.cxx	/^  SplineND::MatrixType & SplineND::hessian(VectorType & x)$/;"	f	class:itk::SplineND	signature:(VectorType & x)
hessian	.\itkSplineND.h	/^  MatrixType & hessian(VectorType & x);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & x)
ieee_double_shape_type	.\vMathPrivate.h	/^} ieee_double_shape_type;$/;"	t	typeref:union:__anon5
ieee_double_shape_type	.\vMathPrivate.h	/^} ieee_double_shape_type;$/;"	t	typeref:union:__anon7
ieee_float_shape_type	.\vMathPrivate.h	/^} ieee_float_shape_type;$/;"	t	typeref:union:__anon9
itk	.\2D\itkRadiusExtractor2D.h	/^namespace itk $/;"	n
itk	.\2D\itkRidgeExtractor2D.h	/^namespace itk $/;"	n
itk	.\2D\itkTubeExtractor2D.h	/^namespace itk $/;"	n
itk	.\2D\itkTubeNetExtractor2D.h	/^namespace itk $/;"	n
itk	.\UserFunc.h	/^namespace itk {$/;"	n
itk	.\itkBlur3DImageFunction.h	/^namespace itk$/;"	n
itk	.\itkMatrixMath.h	/^namespace itk $/;"	n
itk	.\itkOptBrent1D.cxx	/^namespace itk $/;"	n	file:
itk	.\itkOptBrent1D.h	/^namespace itk$/;"	n
itk	.\itkOptGoldenMean1D.cxx	/^namespace itk $/;"	n	file:
itk	.\itkOptGoldenMean1D.h	/^namespace itk$/;"	n
itk	.\itkOptParabolicFit1D.cxx	/^namespace itk $/;"	n	file:
itk	.\itkOptParabolicFit1D.h	/^namespace itk$/;"	n
itk	.\itkOptimizer1D.cxx	/^namespace itk$/;"	n	file:
itk	.\itkOptimizer1D.h	/^namespace itk$/;"	n
itk	.\itkOptimizerND.cxx	/^namespace itk$/;"	n	file:
itk	.\itkOptimizerND.h	/^namespace itk $/;"	n
itk	.\itkRadiusExtractor.h	/^namespace itk $/;"	n
itk	.\itkRidgeExtractor.h	/^namespace itk $/;"	n
itk	.\itkSpline1D.cxx	/^namespace itk $/;"	n	file:
itk	.\itkSpline1D.h	/^namespace itk $/;"	n
itk	.\itkSplineApproximation1D.cxx	/^namespace itk$/;"	n	file:
itk	.\itkSplineApproximation1D.h	/^namespace itk $/;"	n
itk	.\itkSplineND.cxx	/^namespace itk$/;"	n	file:
itk	.\itkSplineND.h	/^namespace itk $/;"	n
itk	.\itkTubeExtractor.h	/^namespace itk $/;"	n
itk	.\itkTubeNetExtractor.h	/^namespace itk $/;"	n
itk::Blur3DImageFunction	.\itkBlur3DImageFunction.h	/^class ITK_EXPORT Blur3DImageFunction :$/;"	c	namespace:itk	inherits:ImageFunction
itk::Blur3DImageFunction::Blur3DImageFunction	.\itkBlur3DImageFunction.h	/^  Blur3DImageFunction( const Self& );$/;"	p	class:itk::Blur3DImageFunction	access:private	signature:( const Self& )
itk::Blur3DImageFunction::Blur3DImageFunction	.\itkBlur3DImageFunction.h	/^  Blur3DImageFunction();$/;"	p	class:itk::Blur3DImageFunction	access:protected	signature:()
itk::Blur3DImageFunction::ConstPointer	.\itkBlur3DImageFunction.h	/^  typedef SmartPointer<const Self>                     ConstPointer;$/;"	t	class:itk::Blur3DImageFunction	access:public
itk::Blur3DImageFunction::ContinuousIndexType	.\itkBlur3DImageFunction.h	/^  typedef typename Superclass::ContinuousIndexType   ContinuousIndexType;$/;"	t	class:itk::Blur3DImageFunction	access:public
itk::Blur3DImageFunction::Evaluate	.\itkBlur3DImageFunction.h	/^  virtual double Evaluate( const PointType& point ) const;$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( const PointType& point ) const
itk::Blur3DImageFunction::EvaluateAtContinuousIndex	.\itkBlur3DImageFunction.h	/^  virtual double EvaluateAtContinuousIndex( $/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( const ContinuousIndexType & index ) const
itk::Blur3DImageFunction::EvaluateAtIndex	.\itkBlur3DImageFunction.h	/^  virtual double EvaluateAtIndex( const IndexType & index ) const;$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( const IndexType & index ) const
itk::Blur3DImageFunction::EvaluateLinearInterpolate	.\itkBlur3DImageFunction.h	/^  double EvaluateLinearInterpolate(const ContinuousIndexType & point) const;$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(const ContinuousIndexType & point) const
itk::Blur3DImageFunction::IndexType	.\itkBlur3DImageFunction.h	/^  typedef typename InputImageType::IndexType         IndexType;$/;"	t	class:itk::Blur3DImageFunction	access:public
itk::Blur3DImageFunction::InputImageType	.\itkBlur3DImageFunction.h	/^  typedef TInputImage                                InputImageType;$/;"	t	class:itk::Blur3DImageFunction	access:public
itk::Blur3DImageFunction::KernelWeightsListType	.\itkBlur3DImageFunction.h	/^  typedef std::list<double>                       KernelWeightsListType;$/;"	t	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::KernelXListType	.\itkBlur3DImageFunction.h	/^  typedef std::list< Index<3> >                   KernelXListType;$/;"	t	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::PointType	.\itkBlur3DImageFunction.h	/^  typedef typename Superclass::PointType             PointType;$/;"	t	class:itk::Blur3DImageFunction	access:public
itk::Blur3DImageFunction::Pointer	.\itkBlur3DImageFunction.h	/^  typedef SmartPointer<Self>                           Pointer;$/;"	t	class:itk::Blur3DImageFunction	access:public
itk::Blur3DImageFunction::PrintSelf	.\itkBlur3DImageFunction.h	/^  void PrintSelf(std::ostream& os, Indent indent) const;$/;"	p	class:itk::Blur3DImageFunction	access:protected	signature:(std::ostream& os, Indent indent) const
itk::Blur3DImageFunction::RecomputeKernel	.\itkBlur3DImageFunction.h	/^  void RecomputeKernel( void );$/;"	p	class:itk::Blur3DImageFunction	access:protected	signature:( void )
itk::Blur3DImageFunction::Self	.\itkBlur3DImageFunction.h	/^  typedef Blur3DImageFunction                          Self;$/;"	t	class:itk::Blur3DImageFunction	access:public
itk::Blur3DImageFunction::SetExtent	.\itkBlur3DImageFunction.h	/^  void SetExtent(double extent);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(double extent)
itk::Blur3DImageFunction::SetInputImage	.\itkBlur3DImageFunction.h	/^  virtual void SetInputImage( const InputImageType * ptr ); $/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( const InputImageType * ptr )
itk::Blur3DImageFunction::SetScale	.\itkBlur3DImageFunction.h	/^  void SetScale(double scale);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(double scale)
itk::Blur3DImageFunction::SetUseRelativeSpacing	.\itkBlur3DImageFunction.h	/^  void SetUseRelativeSpacing( bool useRelativeSpacing);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( bool useRelativeSpacing)
itk::Blur3DImageFunction::SpacingType	.\itkBlur3DImageFunction.h	/^  typedef typename InputImageType::SpacingType       SpacingType;$/;"	t	class:itk::Blur3DImageFunction	access:public
itk::Blur3DImageFunction::Superclass	.\itkBlur3DImageFunction.h	/^  typedef ImageFunction<TInputImage, double, double>   Superclass;$/;"	t	class:itk::Blur3DImageFunction	access:public
itk::Blur3DImageFunction::itkGetMacro	.\itkBlur3DImageFunction.h	/^   itkGetMacro( Scale, double);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( Scale, double)
itk::Blur3DImageFunction::itkGetMacro	.\itkBlur3DImageFunction.h	/^  itkGetMacro( Extent, double);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( Extent, double)
itk::Blur3DImageFunction::itkGetMacro	.\itkBlur3DImageFunction.h	/^  itkGetMacro( Spacing, SpacingType );$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( Spacing, SpacingType )
itk::Blur3DImageFunction::itkGetMacro	.\itkBlur3DImageFunction.h	/^  itkGetMacro( UseRelativeSpacing, bool );$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( UseRelativeSpacing, bool )
itk::Blur3DImageFunction::itkNewMacro	.\itkBlur3DImageFunction.h	/^  itkNewMacro(Self);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(Self)
itk::Blur3DImageFunction::itkStaticConstMacro	.\itkBlur3DImageFunction.h	/^  itkStaticConstMacro(ImageDimension, unsigned int, 3 ); $/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(ImageDimension, unsigned int, 3 )
itk::Blur3DImageFunction::itkTypeMacro	.\itkBlur3DImageFunction.h	/^  itkTypeMacro(Blur3DImageFunction, ImageFunction);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(Blur3DImageFunction, ImageFunction)
itk::Blur3DImageFunction::m_Debug	.\itkBlur3DImageFunction.h	/^  bool                    m_Debug;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_Extent	.\itkBlur3DImageFunction.h	/^  double                  m_Extent;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_ImageSize	.\itkBlur3DImageFunction.h	/^  Size<itkGetStaticConstMacro(ImageDimension)>    m_ImageSize;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_KernelMax	.\itkBlur3DImageFunction.h	/^  IndexType               m_KernelMax;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_KernelMin	.\itkBlur3DImageFunction.h	/^  IndexType               m_KernelMin;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_KernelTotal	.\itkBlur3DImageFunction.h	/^  double                  m_KernelTotal;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_KernelWeights	.\itkBlur3DImageFunction.h	/^  KernelWeightsListType   m_KernelWeights;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_KernelX	.\itkBlur3DImageFunction.h	/^  KernelXListType         m_KernelX;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_OriginalSpacing	.\itkBlur3DImageFunction.h	/^  SpacingType             m_OriginalSpacing;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_Scale	.\itkBlur3DImageFunction.h	/^  double                  m_Scale;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_Spacing	.\itkBlur3DImageFunction.h	/^  SpacingType             m_Spacing;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::m_UseRelativeSpacing	.\itkBlur3DImageFunction.h	/^  bool                    m_UseRelativeSpacing;$/;"	m	class:itk::Blur3DImageFunction	access:private
itk::Blur3DImageFunction::operator =	.\itkBlur3DImageFunction.h	/^  void operator=( const Self& );$/;"	p	class:itk::Blur3DImageFunction	access:private	signature:( const Self& )
itk::Blur3DImageFunction::~Blur3DImageFunction	.\itkBlur3DImageFunction.h	/^  virtual ~Blur3DImageFunction(){};$/;"	f	class:itk::Blur3DImageFunction	access:protected	signature:()
itk::ComputeEuclideanDistance	.\itkMatrixMath.h	/^template <class PointType> double ComputeEuclideanDistance(PointType x,PointType y);$/;"	p	namespace:itk	signature:(PointType x,PointType y)
itk::ComputeEuclideanDistanceVector	.\itkMatrixMath.h	/^template <class T> T ComputeEuclideanDistanceVector(vnl_vector<T> x, const vnl_vector<T> y);$/;"	p	namespace:itk	signature:(vnl_vector<T> x, const vnl_vector<T> y)
itk::ComputeLineStep	.\itkMatrixMath.h	/^template <class T> vnl_vector<T> ComputeLineStep(vnl_vector<T> x, double a, vnl_vector<T> dir);$/;"	p	namespace:itk	signature:(vnl_vector<T> x, double a, vnl_vector<T> dir)
itk::Eigen	.\itkMatrixMath.h	/^template <class T> void Eigen(vnl_matrix<T> &mat, vnl_matrix<T> &eVects,vnl_vector_ref<T> eVals, bool orderByAbs);$/;"	p	namespace:itk	signature:(vnl_matrix<T> &mat, vnl_matrix<T> &eVects,vnl_vector_ref<T> eVals, bool orderByAbs)
itk::GetCrossVector	.\itkMatrixMath.h	/^template <class T> vnl_vector<T> GetCrossVector(vnl_vector<T> x);$/;"	p	namespace:itk	signature:(vnl_vector<T> x)
itk::GetOrthogonalVector	.\itkMatrixMath.h	/^template <class T> vnl_vector<T> GetOrthogonalVector(vnl_vector<T> x);$/;"	p	namespace:itk	signature:(vnl_vector<T> x)
itk::OptBrent1D	.\itkOptBrent1D.h	/^class OptBrent1D : public Optimizer1D $/;"	c	namespace:itk	inherits:Optimizer1D
itk::OptBrent1D::OptBrent1D	.\itkOptBrent1D.cxx	/^OptBrent1D::OptBrent1D()$/;"	f	class:itk::OptBrent1D	signature:()
itk::OptBrent1D::OptBrent1D	.\itkOptBrent1D.cxx	/^OptBrent1D::OptBrent1D(UserFunc<double, double> *newFuncVal)$/;"	f	class:itk::OptBrent1D	signature:(UserFunc<double, double> *newFuncVal)
itk::OptBrent1D::OptBrent1D	.\itkOptBrent1D.h	/^  OptBrent1D();$/;"	p	class:itk::OptBrent1D	access:public	signature:()
itk::OptBrent1D::OptBrent1D	.\itkOptBrent1D.h	/^  OptBrent1D(UserFunc<double, double> *newFuncVal);$/;"	p	class:itk::OptBrent1D	access:public	signature:(UserFunc<double, double> *newFuncVal)
itk::OptBrent1D::cExtreme	.\itkOptBrent1D.cxx	/^bool OptBrent1D::cExtreme(double *extX, double *extVal)$/;"	f	class:itk::OptBrent1D	signature:(double *extX, double *extVal)
itk::OptBrent1D::cExtreme	.\itkOptBrent1D.h	/^  bool cExtreme(double * x, double * xVal);$/;"	p	class:itk::OptBrent1D	access:protected	signature:(double * x, double * xVal)
itk::OptBrent1D::cMove	.\itkOptBrent1D.cxx	/^void OptBrent1D::cMove(double & a, double & b, double & c, double d, double e, double f)$/;"	f	class:itk::OptBrent1D	signature:(double & a, double & b, double & c, double d, double e, double f)
itk::OptBrent1D::cMove	.\itkOptBrent1D.h	/^  void cMove(double & a, double & b, double & c, double d, double e, double f);$/;"	p	class:itk::OptBrent1D	access:protected	signature:(double & a, double & b, double & c, double d, double e, double f)
itk::OptBrent1D::cSmall	.\itkOptBrent1D.h	/^  double cSmall;$/;"	m	class:itk::OptBrent1D	access:protected
itk::OptBrent1D::smallDouble	.\itkOptBrent1D.h	/^  double   smallDouble();$/;"	p	class:itk::OptBrent1D	access:public	signature:()
itk::OptBrent1D::smallDouble	.\itkOptBrent1D.h	/^  void     smallDouble(double newSmall);$/;"	p	class:itk::OptBrent1D	access:public	signature:(double newSmall)
itk::OptBrent1D::use	.\itkOptBrent1D.cxx	/^void OptBrent1D::use(UserFunc<double, double> * newFuncVal)$/;"	f	class:itk::OptBrent1D	signature:(UserFunc<double, double> * newFuncVal)
itk::OptBrent1D::use	.\itkOptBrent1D.h	/^  void use(UserFunc<double, double> *newFuncVal);$/;"	p	class:itk::OptBrent1D	access:public	signature:(UserFunc<double, double> *newFuncVal)
itk::OptBrent1D::~OptBrent1D	.\itkOptBrent1D.cxx	/^OptBrent1D::~OptBrent1D()$/;"	f	class:itk::OptBrent1D	signature:()
itk::OptBrent1D::~OptBrent1D	.\itkOptBrent1D.h	/^  ~OptBrent1D();$/;"	p	class:itk::OptBrent1D	access:public	signature:()
itk::OptDerivFuncND	.\itkOptimizerND.cxx	/^class OptDerivFuncND : public UserFunc<double, double> {$/;"	c	namespace:itk	file:	inherits:UserFunc
itk::OptDerivFuncND::OptDerivFuncND	.\itkOptimizerND.cxx	/^  OptDerivFuncND(OptimizerND * newOpt)$/;"	f	class:itk::OptDerivFuncND	access:public	signature:(OptimizerND * newOpt)
itk::OptDerivFuncND::cOpt	.\itkOptimizerND.cxx	/^    OptimizerND * cOpt;$/;"	m	class:itk::OptDerivFuncND	file:	access:private
itk::OptDerivFuncND::value	.\itkOptimizerND.cxx	/^  double value(double x)$/;"	f	class:itk::OptDerivFuncND	access:public	signature:(double x)
itk::OptGoldenMean1D	.\itkOptGoldenMean1D.h	/^class OptGoldenMean1D : public Optimizer1D $/;"	c	namespace:itk	inherits:Optimizer1D
itk::OptGoldenMean1D::OptGoldenMean1D	.\itkOptGoldenMean1D.cxx	/^OptGoldenMean1D::OptGoldenMean1D()$/;"	f	class:itk::OptGoldenMean1D	signature:()
itk::OptGoldenMean1D::OptGoldenMean1D	.\itkOptGoldenMean1D.cxx	/^OptGoldenMean1D::OptGoldenMean1D(UserFunc<double, double> *newFuncVal)$/;"	f	class:itk::OptGoldenMean1D	signature:(UserFunc<double, double> *newFuncVal)
itk::OptGoldenMean1D::OptGoldenMean1D	.\itkOptGoldenMean1D.h	/^  OptGoldenMean1D();$/;"	p	class:itk::OptGoldenMean1D	access:public	signature:()
itk::OptGoldenMean1D::OptGoldenMean1D	.\itkOptGoldenMean1D.h	/^  OptGoldenMean1D(UserFunc<double, double> *newFuncVal);$/;"	p	class:itk::OptGoldenMean1D	access:public	signature:(UserFunc<double, double> *newFuncVal)
itk::OptGoldenMean1D::cExtreme	.\itkOptGoldenMean1D.cxx	/^bool OptGoldenMean1D::cExtreme(double *extX, double *extVal)$/;"	f	class:itk::OptGoldenMean1D	signature:(double *extX, double *extVal)
itk::OptGoldenMean1D::cExtreme	.\itkOptGoldenMean1D.h	/^  bool cExtreme(double * x, double * xVal);$/;"	p	class:itk::OptGoldenMean1D	access:protected	signature:(double * x, double * xVal)
itk::OptGoldenMean1D::use	.\itkOptGoldenMean1D.cxx	/^void OptGoldenMean1D::use(UserFunc<double, double> * newFuncVal)$/;"	f	class:itk::OptGoldenMean1D	signature:(UserFunc<double, double> * newFuncVal)
itk::OptGoldenMean1D::use	.\itkOptGoldenMean1D.h	/^  void use(UserFunc<double, double> *newFuncVal);$/;"	p	class:itk::OptGoldenMean1D	access:public	signature:(UserFunc<double, double> *newFuncVal)
itk::OptGoldenMean1D::~OptGoldenMean1D	.\itkOptGoldenMean1D.cxx	/^OptGoldenMean1D::~OptGoldenMean1D()$/;"	f	class:itk::OptGoldenMean1D	signature:()
itk::OptGoldenMean1D::~OptGoldenMean1D	.\itkOptGoldenMean1D.h	/^  ~OptGoldenMean1D();$/;"	p	class:itk::OptGoldenMean1D	access:public	signature:()
itk::OptParabolicFit1D	.\itkOptParabolicFit1D.h	/^class OptParabolicFit1D : public Optimizer1D $/;"	c	namespace:itk	inherits:Optimizer1D
itk::OptParabolicFit1D::OptParabolicFit1D	.\itkOptParabolicFit1D.cxx	/^OptParabolicFit1D::OptParabolicFit1D()$/;"	f	class:itk::OptParabolicFit1D	signature:()
itk::OptParabolicFit1D::OptParabolicFit1D	.\itkOptParabolicFit1D.cxx	/^OptParabolicFit1D::OptParabolicFit1D(UserFunc<double, double> *newFuncVal)$/;"	f	class:itk::OptParabolicFit1D	signature:(UserFunc<double, double> *newFuncVal)
itk::OptParabolicFit1D::OptParabolicFit1D	.\itkOptParabolicFit1D.h	/^  OptParabolicFit1D();$/;"	p	class:itk::OptParabolicFit1D	access:public	signature:()
itk::OptParabolicFit1D::OptParabolicFit1D	.\itkOptParabolicFit1D.h	/^  OptParabolicFit1D(UserFunc<double, double> *newFuncVal);$/;"	p	class:itk::OptParabolicFit1D	access:public	signature:(UserFunc<double, double> *newFuncVal)
itk::OptParabolicFit1D::cCenter	.\itkOptParabolicFit1D.cxx	/^double OptParabolicFit1D::cCenter(double x1, double y1, $/;"	f	class:itk::OptParabolicFit1D	signature:(double x1, double y1, double x2, double y2, double x3, double y3)
itk::OptParabolicFit1D::cCenter	.\itkOptParabolicFit1D.h	/^  double cCenter(double x1, double y1, $/;"	p	class:itk::OptParabolicFit1D	access:protected	signature:(double x1, double y1, double x2, double y2, double x3, double y3)
itk::OptParabolicFit1D::cExtreme	.\itkOptParabolicFit1D.cxx	/^bool OptParabolicFit1D::cExtreme(double *extX, double *extVal)$/;"	f	class:itk::OptParabolicFit1D	signature:(double *extX, double *extVal)
itk::OptParabolicFit1D::cExtreme	.\itkOptParabolicFit1D.h	/^  bool cExtreme(double * x, double * xVal);$/;"	p	class:itk::OptParabolicFit1D	access:protected	signature:(double * x, double * xVal)
itk::OptParabolicFit1D::use	.\itkOptParabolicFit1D.cxx	/^void OptParabolicFit1D::use(UserFunc<double, double> * newFuncVal,$/;"	f	class:itk::OptParabolicFit1D	signature:(UserFunc<double, double> * newFuncVal, UserFunc<double,double> * itkNotUsed(derivative))
itk::OptParabolicFit1D::use	.\itkOptParabolicFit1D.h	/^  void use(UserFunc<double, double> *newFuncVal, UserFunc<double,double>* deriv = NULL);$/;"	p	class:itk::OptParabolicFit1D	access:public	signature:(UserFunc<double, double> *newFuncVal, UserFunc<double,double>* deriv = NULL)
itk::OptParabolicFit1D::~OptParabolicFit1D	.\itkOptParabolicFit1D.cxx	/^OptParabolicFit1D::~OptParabolicFit1D()$/;"	f	class:itk::OptParabolicFit1D	signature:()
itk::OptParabolicFit1D::~OptParabolicFit1D	.\itkOptParabolicFit1D.h	/^  ~OptParabolicFit1D();$/;"	p	class:itk::OptParabolicFit1D	access:public	signature:()
itk::OptValFuncND	.\itkOptimizerND.cxx	/^class OptValFuncND : public UserFunc<double, double> {$/;"	c	namespace:itk	file:	inherits:UserFunc
itk::OptValFuncND::OptValFuncND	.\itkOptimizerND.cxx	/^  OptValFuncND(OptimizerND * newOpt)$/;"	f	class:itk::OptValFuncND	access:public	signature:(OptimizerND * newOpt)
itk::OptValFuncND::cOpt	.\itkOptimizerND.cxx	/^    OptimizerND * cOpt;$/;"	m	class:itk::OptValFuncND	file:	access:private
itk::OptValFuncND::value	.\itkOptimizerND.cxx	/^  double value(double x)$/;"	f	class:itk::OptValFuncND	access:public	signature:(double x)
itk::Optimizer1D	.\itkOptimizer1D.h	/^class Optimizer1D$/;"	c	namespace:itk
itk::Optimizer1D::Optimizer1D	.\itkOptimizer1D.cxx	/^::Optimizer1D()$/;"	f	class:itk::Optimizer1D	signature:()
itk::Optimizer1D::Optimizer1D	.\itkOptimizer1D.cxx	/^Optimizer1D::Optimizer1D(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)$/;"	f	class:itk::Optimizer1D	signature:(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)
itk::Optimizer1D::Optimizer1D	.\itkOptimizer1D.h	/^  Optimizer1D();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
itk::Optimizer1D::Optimizer1D	.\itkOptimizer1D.h	/^  Optimizer1D(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv);$/;"	p	class:itk::Optimizer1D	access:public	signature:(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)
itk::Optimizer1D::cDefined	.\itkOptimizer1D.h	/^  bool     cDefined;$/;"	m	class:itk::Optimizer1D	access:protected
itk::Optimizer1D::cExtreme	.\itkOptimizer1D.cxx	/^::cExtreme(double * itkNotUsed(x), double * itkNotUsed(xVal))$/;"	f	class:itk::Optimizer1D	signature:(double * itkNotUsed(x), double * itkNotUsed(xVal))
itk::Optimizer1D::cExtreme	.\itkOptimizer1D.h	/^  virtual  bool cExtreme(double *x, double *xVal);$/;"	p	class:itk::Optimizer1D	access:protected	signature:(double *x, double *xVal)
itk::Optimizer1D::cFuncDeriv	.\itkOptimizer1D.h	/^  UserFunc<double, double> *cFuncDeriv;$/;"	m	class:itk::Optimizer1D	access:protected
itk::Optimizer1D::cFuncVal	.\itkOptimizer1D.h	/^  UserFunc<double, double> *cFuncVal;$/;"	m	class:itk::Optimizer1D	access:protected
itk::Optimizer1D::cMaxIterations	.\itkOptimizer1D.h	/^  unsigned int     cMaxIterations;$/;"	m	class:itk::Optimizer1D	access:protected
itk::Optimizer1D::cSearchForMin	.\itkOptimizer1D.h	/^  bool     cSearchForMin;$/;"	m	class:itk::Optimizer1D	access:protected
itk::Optimizer1D::cTolerance	.\itkOptimizer1D.h	/^  double   cTolerance;$/;"	m	class:itk::Optimizer1D	access:protected
itk::Optimizer1D::cXMax	.\itkOptimizer1D.h	/^  double   cXMax;$/;"	m	class:itk::Optimizer1D	access:protected
itk::Optimizer1D::cXMin	.\itkOptimizer1D.h	/^  double   cXMin;$/;"	m	class:itk::Optimizer1D	access:protected
itk::Optimizer1D::cXStep	.\itkOptimizer1D.h	/^  double   cXStep;         $/;"	m	class:itk::Optimizer1D	access:protected
itk::Optimizer1D::extreme	.\itkOptimizer1D.cxx	/^bool Optimizer1D::extreme(double *x, double *xVal)$/;"	f	class:itk::Optimizer1D	signature:(double *x, double *xVal)
itk::Optimizer1D::extreme	.\itkOptimizer1D.h	/^  bool     extreme(double *x, double *xVal);$/;"	p	class:itk::Optimizer1D	access:public	signature:(double *x, double *xVal)
itk::Optimizer1D::maxIterations	.\itkOptimizer1D.cxx	/^unsigned int Optimizer1D::maxIterations(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
itk::Optimizer1D::maxIterations	.\itkOptimizer1D.cxx	/^void Optimizer1D::maxIterations(unsigned int newMaxIterations)$/;"	f	class:itk::Optimizer1D	signature:(unsigned int newMaxIterations)
itk::Optimizer1D::maxIterations	.\itkOptimizer1D.h	/^  unsigned int     maxIterations(void);$/;"	p	class:itk::Optimizer1D	access:public	signature:(void)
itk::Optimizer1D::maxIterations	.\itkOptimizer1D.h	/^  void     maxIterations(unsigned int newMaxIterations); $/;"	p	class:itk::Optimizer1D	access:public	signature:(unsigned int newMaxIterations)
itk::Optimizer1D::searchForMin	.\itkOptimizer1D.cxx	/^bool Optimizer1D::searchForMin(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
itk::Optimizer1D::searchForMin	.\itkOptimizer1D.cxx	/^void Optimizer1D::searchForMin(bool newSearchForMin)$/;"	f	class:itk::Optimizer1D	signature:(bool newSearchForMin)
itk::Optimizer1D::searchForMin	.\itkOptimizer1D.h	/^  bool     searchForMin();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
itk::Optimizer1D::searchForMin	.\itkOptimizer1D.h	/^  void     searchForMin(bool newSearchForMin);$/;"	p	class:itk::Optimizer1D	access:public	signature:(bool newSearchForMin)
itk::Optimizer1D::tolerance	.\itkOptimizer1D.cxx	/^double Optimizer1D::tolerance(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
itk::Optimizer1D::tolerance	.\itkOptimizer1D.cxx	/^void Optimizer1D::tolerance(double newTolerance)$/;"	f	class:itk::Optimizer1D	signature:(double newTolerance)
itk::Optimizer1D::tolerance	.\itkOptimizer1D.h	/^  double   tolerance();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
itk::Optimizer1D::tolerance	.\itkOptimizer1D.h	/^  void     tolerance(double newTolerance);$/;"	p	class:itk::Optimizer1D	access:public	signature:(double newTolerance)
itk::Optimizer1D::use	.\itkOptimizer1D.cxx	/^void Optimizer1D::use(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)$/;"	f	class:itk::Optimizer1D	signature:(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)
itk::Optimizer1D::use	.\itkOptimizer1D.h	/^  void     use(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv);$/;"	p	class:itk::Optimizer1D	access:public	signature:(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)
itk::Optimizer1D::xMax	.\itkOptimizer1D.cxx	/^double Optimizer1D::xMax(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
itk::Optimizer1D::xMax	.\itkOptimizer1D.cxx	/^void Optimizer1D::xMax(double newXMax)$/;"	f	class:itk::Optimizer1D	signature:(double newXMax)
itk::Optimizer1D::xMax	.\itkOptimizer1D.h	/^  double   xMax();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
itk::Optimizer1D::xMax	.\itkOptimizer1D.h	/^  void     xMax(double newXMax);$/;"	p	class:itk::Optimizer1D	access:public	signature:(double newXMax)
itk::Optimizer1D::xMin	.\itkOptimizer1D.cxx	/^double Optimizer1D::xMin(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
itk::Optimizer1D::xMin	.\itkOptimizer1D.cxx	/^void Optimizer1D::xMin(double newXMin)$/;"	f	class:itk::Optimizer1D	signature:(double newXMin)
itk::Optimizer1D::xMin	.\itkOptimizer1D.h	/^  double   xMin();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
itk::Optimizer1D::xMin	.\itkOptimizer1D.h	/^  void     xMin(double newXMin);$/;"	p	class:itk::Optimizer1D	access:public	signature:(double newXMin)
itk::Optimizer1D::xStep	.\itkOptimizer1D.cxx	/^double Optimizer1D::xStep(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
itk::Optimizer1D::xStep	.\itkOptimizer1D.cxx	/^void Optimizer1D::xStep(double newXStep)$/;"	f	class:itk::Optimizer1D	signature:(double newXStep)
itk::Optimizer1D::xStep	.\itkOptimizer1D.h	/^  double   xStep();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
itk::Optimizer1D::xStep	.\itkOptimizer1D.h	/^  void     xStep(double newXStep);$/;"	p	class:itk::Optimizer1D	access:public	signature:(double newXStep)
itk::Optimizer1D::~Optimizer1D	.\itkOptimizer1D.cxx	/^Optimizer1D::~Optimizer1D()$/;"	f	class:itk::Optimizer1D	signature:()
itk::Optimizer1D::~Optimizer1D	.\itkOptimizer1D.h	/^  virtual ~Optimizer1D();  $/;"	p	class:itk::Optimizer1D	access:public	signature:()
itk::OptimizerND	.\itkOptimizerND.h	/^class OptimizerND$/;"	c	namespace:itk
itk::OptimizerND::MatrixType	.\itkOptimizerND.h	/^  typedef vnl_matrix<double> MatrixType;$/;"	t	class:itk::OptimizerND	access:public
itk::OptimizerND::OptimizerND	.\itkOptimizerND.cxx	/^OptimizerND::OptimizerND()$/;"	f	class:itk::OptimizerND	signature:()
itk::OptimizerND::OptimizerND	.\itkOptimizerND.cxx	/^OptimizerND::OptimizerND(int newNDims, UserFunc<VectorType *, double> * newFuncValND, UserFunc<VectorType *, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)$/;"	f	class:itk::OptimizerND	signature:(int newNDims, UserFunc<VectorType *, double> * newFuncValND, UserFunc<VectorType *, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)
itk::OptimizerND::OptimizerND	.\itkOptimizerND.h	/^  OptimizerND();$/;"	p	class:itk::OptimizerND	access:public	signature:()
itk::OptimizerND::OptimizerND	.\itkOptimizerND.h	/^  OptimizerND(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D);$/;"	p	class:itk::OptimizerND	access:public	signature:(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)
itk::OptimizerND::VectorType	.\itkOptimizerND.h	/^  typedef vnl_vector<double> VectorType;$/;"	t	class:itk::OptimizerND	access:public
itk::OptimizerND::cDefined	.\itkOptimizerND.h	/^  bool            cDefined;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cFuncDerivND	.\itkOptimizerND.h	/^  UserFunc<VectorType*, VectorType &> *      cFuncDerivND;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cFuncValND	.\itkOptimizerND.h	/^  UserFunc<VectorType*, double> *      cFuncValND;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cMaxIterations	.\itkOptimizerND.h	/^  unsigned int            cMaxIterations;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cNDims	.\itkOptimizerND.h	/^  unsigned int            cNDims;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cOpt1D	.\itkOptimizerND.h	/^  Optimizer1D *   cOpt1D;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cOpt1DDeriv	.\itkOptimizerND.h	/^  UserFunc<double, double> * cOpt1DDeriv;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cOpt1DVal	.\itkOptimizerND.h	/^  UserFunc<double, double> * cOpt1DVal;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cSearchForMin	.\itkOptimizerND.h	/^  bool            cSearchForMin;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cTolerance	.\itkOptimizerND.h	/^  double          cTolerance;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cX0	.\itkOptimizerND.h	/^  VectorType *cX0;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cX0Dir	.\itkOptimizerND.h	/^  VectorType *cX0Dir;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cX0Temp	.\itkOptimizerND.h	/^  VectorType *cX0Temp;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cXMax	.\itkOptimizerND.h	/^  VectorType *cXMax;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cXMin	.\itkOptimizerND.h	/^  VectorType *cXMin;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::cXStep	.\itkOptimizerND.h	/^  VectorType *cXStep;$/;"	m	class:itk::OptimizerND	access:protected
itk::OptimizerND::extreme	.\itkOptimizerND.cxx	/^bool OptimizerND::extreme(VectorType & x, double * xVal)$/;"	f	class:itk::OptimizerND	signature:(VectorType & x, double * xVal)
itk::OptimizerND::extreme	.\itkOptimizerND.cxx	/^bool OptimizerND::extreme(VectorType & x, double * xVal, unsigned int n, MatrixType &dirs)$/;"	f	class:itk::OptimizerND	signature:(VectorType & x, double * xVal, unsigned int n, MatrixType &dirs)
itk::OptimizerND::extreme	.\itkOptimizerND.h	/^  bool    extreme(VectorType &x, double *xVal);$/;"	p	class:itk::OptimizerND	access:public	signature:(VectorType &x, double *xVal)
itk::OptimizerND::extreme	.\itkOptimizerND.h	/^  bool    extreme(VectorType &x, double *xVal, unsigned int n, MatrixType &dirs);$/;"	p	class:itk::OptimizerND	access:public	signature:(VectorType &x, double *xVal, unsigned int n, MatrixType &dirs)
itk::OptimizerND::funcDeriv	.\itkOptimizerND.cxx	/^double OptimizerND::funcDeriv(double a)$/;"	f	class:itk::OptimizerND	signature:(double a)
itk::OptimizerND::funcDeriv	.\itkOptimizerND.h	/^  double  funcDeriv(double x);$/;"	p	class:itk::OptimizerND	access:public	signature:(double x)
itk::OptimizerND::funcVal	.\itkOptimizerND.cxx	/^double OptimizerND::funcVal(double a)$/;"	f	class:itk::OptimizerND	signature:(double a)
itk::OptimizerND::funcVal	.\itkOptimizerND.h	/^  double  funcVal(double x);$/;"	p	class:itk::OptimizerND	access:public	signature:(double x)
itk::OptimizerND::maxIterations	.\itkOptimizerND.cxx	/^unsigned int OptimizerND::maxIterations(void)$/;"	f	class:itk::OptimizerND	signature:(void)
itk::OptimizerND::maxIterations	.\itkOptimizerND.cxx	/^void OptimizerND::maxIterations(unsigned int newMaxIterations)$/;"	f	class:itk::OptimizerND	signature:(unsigned int newMaxIterations)
itk::OptimizerND::maxIterations	.\itkOptimizerND.h	/^  unsigned int    maxIterations(void);$/;"	p	class:itk::OptimizerND	access:public	signature:(void)
itk::OptimizerND::maxIterations	.\itkOptimizerND.h	/^  void    maxIterations(unsigned int newMaxIterations);$/;"	p	class:itk::OptimizerND	access:public	signature:(unsigned int newMaxIterations)
itk::OptimizerND::searchForMin	.\itkOptimizerND.cxx	/^bool OptimizerND::searchForMin(void)$/;"	f	class:itk::OptimizerND	signature:(void)
itk::OptimizerND::searchForMin	.\itkOptimizerND.cxx	/^void OptimizerND::searchForMin(bool newSearchForMin)$/;"	f	class:itk::OptimizerND	signature:(bool newSearchForMin)
itk::OptimizerND::searchForMin	.\itkOptimizerND.h	/^  bool    searchForMin();$/;"	p	class:itk::OptimizerND	access:public	signature:()
itk::OptimizerND::searchForMin	.\itkOptimizerND.h	/^  void    searchForMin(bool newSearchForMin);$/;"	p	class:itk::OptimizerND	access:public	signature:(bool newSearchForMin)
itk::OptimizerND::tolerance	.\itkOptimizerND.cxx	/^double OptimizerND::tolerance(void)$/;"	f	class:itk::OptimizerND	signature:(void)
itk::OptimizerND::tolerance	.\itkOptimizerND.cxx	/^void OptimizerND::tolerance(double newTolerance)$/;"	f	class:itk::OptimizerND	signature:(double newTolerance)
itk::OptimizerND::tolerance	.\itkOptimizerND.h	/^  double  tolerance();$/;"	p	class:itk::OptimizerND	access:public	signature:()
itk::OptimizerND::tolerance	.\itkOptimizerND.h	/^  void    tolerance(double newTolerance);$/;"	p	class:itk::OptimizerND	access:public	signature:(double newTolerance)
itk::OptimizerND::use	.\itkOptimizerND.cxx	/^void OptimizerND::use(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)$/;"	f	class:itk::OptimizerND	signature:(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)
itk::OptimizerND::use	.\itkOptimizerND.h	/^  void use(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D);$/;"	p	class:itk::OptimizerND	access:public	signature:(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)
itk::OptimizerND::xMax	.\itkOptimizerND.cxx	/^OptimizerND::VectorType & OptimizerND::xMax(void)$/;"	f	class:itk::OptimizerND	signature:(void)
itk::OptimizerND::xMax	.\itkOptimizerND.cxx	/^void OptimizerND::xMax(VectorType & newXMaxx)$/;"	f	class:itk::OptimizerND	signature:(VectorType & newXMaxx)
itk::OptimizerND::xMax	.\itkOptimizerND.h	/^  VectorType & xMax(void);$/;"	p	class:itk::OptimizerND	access:public	signature:(void)
itk::OptimizerND::xMax	.\itkOptimizerND.h	/^  void    xMax(VectorType & newXMaxx);$/;"	p	class:itk::OptimizerND	access:public	signature:(VectorType & newXMaxx)
itk::OptimizerND::xMin	.\itkOptimizerND.cxx	/^OptimizerND::VectorType & OptimizerND::xMin(void)$/;"	f	class:itk::OptimizerND	signature:(void)
itk::OptimizerND::xMin	.\itkOptimizerND.cxx	/^void OptimizerND::xMin(VectorType & newXMinn)$/;"	f	class:itk::OptimizerND	signature:(VectorType & newXMinn)
itk::OptimizerND::xMin	.\itkOptimizerND.h	/^  VectorType & xMin(void);$/;"	p	class:itk::OptimizerND	access:public	signature:(void)
itk::OptimizerND::xMin	.\itkOptimizerND.h	/^  void    xMin(VectorType & newXMinn);$/;"	p	class:itk::OptimizerND	access:public	signature:(VectorType & newXMinn)
itk::OptimizerND::xStep	.\itkOptimizerND.cxx	/^OptimizerND::VectorType & OptimizerND::xStep(void)$/;"	f	class:itk::OptimizerND	signature:(void)
itk::OptimizerND::xStep	.\itkOptimizerND.cxx	/^void OptimizerND::xStep(VectorType & newXStepp)$/;"	f	class:itk::OptimizerND	signature:(VectorType & newXStepp)
itk::OptimizerND::xStep	.\itkOptimizerND.h	/^  VectorType & xStep(void);$/;"	p	class:itk::OptimizerND	access:public	signature:(void)
itk::OptimizerND::xStep	.\itkOptimizerND.h	/^  void    xStep(VectorType & newXStepp);$/;"	p	class:itk::OptimizerND	access:public	signature:(VectorType & newXStepp)
itk::OptimizerND::~OptimizerND	.\itkOptimizerND.cxx	/^OptimizerND::~OptimizerND()$/;"	f	class:itk::OptimizerND	signature:()
itk::OptimizerND::~OptimizerND	.\itkOptimizerND.h	/^  virtual ~OptimizerND();$/;"	p	class:itk::OptimizerND	access:public	signature:()
itk::RadiusExtractor	.\itkRadiusExtractor.h	/^class ITK_EXPORT RadiusExtractor : public Object $/;"	c	namespace:itk	inherits:Object
itk::RadiusExtractor2D	.\2D\itkRadiusExtractor2D.h	/^class ITK_EXPORT RadiusExtractor2D : public Object $/;"	c	namespace:itk	inherits:Object
itk::RadiusExtractor2D::BranchnessAtKern	.\2D\itkRadiusExtractor2D.h	/^  double  BranchnessAtKern(TubeType * tube, double pntR);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(TubeType * tube, double pntR)
itk::RadiusExtractor2D::BranchnessAtPoint	.\2D\itkRadiusExtractor2D.h	/^  double BranchnessAtPoint(TubePointType pnt,double pntR);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(TubePointType pnt,double pntR)
itk::RadiusExtractor2D::CalcOptimalScale	.\2D\itkRadiusExtractor2D.h	/^  bool  CalcOptimalScale(TubePointType pnt, bool firstGuess =false);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(TubePointType pnt, bool firstGuess =false)
itk::RadiusExtractor2D::CalcRadii	.\2D\itkRadiusExtractor2D.h	/^  bool     CalcRadii(TubeType * tube);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(TubeType * tube)
itk::RadiusExtractor2D::CalcRadiiOneWay	.\2D\itkRadiusExtractor2D.h	/^  bool  CalcRadiiOneWay(std::vector<TubePointType>::iterator tubePntFrom,$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(std::vector<TubePointType>::iterator tubePntFrom, std::vector<TubePointType>::iterator tubePntTo, bool forward=true)
itk::RadiusExtractor2D::ConstPointer	.\2D\itkRadiusExtractor2D.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::GetMedialnessOpt	.\2D\itkRadiusExtractor2D.h	/^  OptimizerType & GetMedialnessOpt(void);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(void)
itk::RadiusExtractor2D::ITKVectorType	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TubeType::VectorType ITKVectorType;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::ImageConstPointer	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::ImageDimension	.\2D\itkRadiusExtractor2D.h	/^  enum {ImageDimension = ImageType::ImageDimension};$/;"	e	enum:itk::RadiusExtractor2D::__anon1
itk::RadiusExtractor2D::ImagePointer	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TInputImage::Pointer  ImagePointer;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::ImageType	.\2D\itkRadiusExtractor2D.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::MedialnessAtKern	.\2D\itkRadiusExtractor2D.h	/^  double   MedialnessAtKern(std::list<TubePointType> * tube, double pntR);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(std::list<TubePointType> * tube, double pntR)
itk::RadiusExtractor2D::MedialnessAtPoint	.\2D\itkRadiusExtractor2D.h	/^  double MedialnessAtPoint(TubePointType pnt,double pntR);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(TubePointType pnt,double pntR)
itk::RadiusExtractor2D::OptimizerType	.\2D\itkRadiusExtractor2D.h	/^  typedef OptGoldenMean1D OptimizerType;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::PixelType	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TInputImage::PixelType PixelType;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::PointType	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TubeType::PointType PointType;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::Pointer	.\2D\itkRadiusExtractor2D.h	/^  typedef SmartPointer<Self>   Pointer;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::RadiusExtractor2D	.\2D\itkRadiusExtractor2D.h	/^  RadiusExtractor2D();$/;"	p	class:itk::RadiusExtractor2D	access:protected	signature:()
itk::RadiusExtractor2D::RadiusExtractor2D	.\2D\itkRadiusExtractor2D.h	/^  RadiusExtractor2D(const Self&) {}$/;"	f	class:itk::RadiusExtractor2D	access:protected	signature:(const Self&)
itk::RadiusExtractor2D::Self	.\2D\itkRadiusExtractor2D.h	/^  typedef RadiusExtractor2D Self;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::SetExtent	.\2D\itkRadiusExtractor2D.h	/^  void SetExtent(double extent);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(double extent)
itk::RadiusExtractor2D::SetIdleCallBack	.\2D\itkRadiusExtractor2D.h	/^  void     SetIdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(bool (idleCallBack)))
itk::RadiusExtractor2D::SetInputImage	.\2D\itkRadiusExtractor2D.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ImagePointer inputImage)
itk::RadiusExtractor2D::SetModeCT	.\2D\itkRadiusExtractor2D.h	/^  void SetModeCT(bool modeCT);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(bool modeCT)
itk::RadiusExtractor2D::SetModeRetina	.\2D\itkRadiusExtractor2D.h	/^  void SetModeRetina(bool modeRetina);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(bool modeRetina)
itk::RadiusExtractor2D::SetRadiusMax	.\2D\itkRadiusExtractor2D.h	/^  void SetRadiusMax(double radiusMax);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(double radiusMax)
itk::RadiusExtractor2D::SetRadiusMin	.\2D\itkRadiusExtractor2D.h	/^  void SetRadiusMin(double radiusMin);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(double radiusMin)
itk::RadiusExtractor2D::SetScale	.\2D\itkRadiusExtractor2D.h	/^  void SetScale(double scale);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(double scale)
itk::RadiusExtractor2D::SetStatusCallBack	.\2D\itkRadiusExtractor2D.h	/^  void     SetStatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(void (*statusCallBack)(char *, char *, int))
itk::RadiusExtractor2D::Superclass	.\2D\itkRadiusExtractor2D.h	/^  typedef Object  Superclass;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::TubePointType	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TubeType::TubePointType TubePointType;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::TubePointer	.\2D\itkRadiusExtractor2D.h	/^  typedef typename TubeType::Pointer TubePointer;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::TubeType	.\2D\itkRadiusExtractor2D.h	/^  typedef VesselTubeSpatialObject<2> TubeType;$/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::VectorType	.\2D\itkRadiusExtractor2D.h	/^  typedef vnl_vector<double> VectorType; $/;"	t	class:itk::RadiusExtractor2D	access:public
itk::RadiusExtractor2D::itkGetConstObjectMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Image,ImageType)
itk::RadiusExtractor2D::itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(DataMax,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(DataMax,double)
itk::RadiusExtractor2D::itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(DataMin,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(DataMin,double)
itk::RadiusExtractor2D::itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(Extent,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Extent,double)
itk::RadiusExtractor2D::itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(ExtractRidge,bool); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ExtractRidge,bool)
itk::RadiusExtractor2D::itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(Radius0,double); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Radius0,double)
itk::RadiusExtractor2D::itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(RadiusMax,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(RadiusMax,double)
itk::RadiusExtractor2D::itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(RadiusMin,double);  $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(RadiusMin,double)
itk::RadiusExtractor2D::itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(Scale,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Scale,double)
itk::RadiusExtractor2D::itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(ThreshWVal,double); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ThreshWVal,double)
itk::RadiusExtractor2D::itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(ThreshWValStart,double); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ThreshWValStart,double)
itk::RadiusExtractor2D::itkNewMacro	.\2D\itkRadiusExtractor2D.h	/^  itkNewMacro(Self);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Self)
itk::RadiusExtractor2D::itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(DataMax,double); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(DataMax,double)
itk::RadiusExtractor2D::itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(DataMin,double); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(DataMin,double)
itk::RadiusExtractor2D::itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(ExtractRidge,bool);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ExtractRidge,bool)
itk::RadiusExtractor2D::itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(ModeMR,bool); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ModeMR,bool)
itk::RadiusExtractor2D::itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(Radius0,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Radius0,double)
itk::RadiusExtractor2D::itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(ThreshWVal,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ThreshWVal,double)
itk::RadiusExtractor2D::itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(ThreshWValStart,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ThreshWValStart,double)
itk::RadiusExtractor2D::itkTypeMacro	.\2D\itkRadiusExtractor2D.h	/^  itkTypeMacro(Self, Object);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Self, Object)
itk::RadiusExtractor2D::m_ArrayLen	.\2D\itkRadiusExtractor2D.h	/^  int      m_ArrayLen;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_DataMax	.\2D\itkRadiusExtractor2D.h	/^  double   m_DataMax;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_DataMin	.\2D\itkRadiusExtractor2D.h	/^  double   m_DataMin;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_DataOp	.\2D\itkRadiusExtractor2D.h	/^  typename BlurImageFunction<ImageType>::Pointer m_DataOp;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_Debug	.\2D\itkRadiusExtractor2D.h	/^  bool m_Debug;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_Extent	.\2D\itkRadiusExtractor2D.h	/^  double m_Extent;   $/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_ExtractRidge	.\2D\itkRadiusExtractor2D.h	/^  bool     m_ExtractRidge;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_IdleCallBack	.\2D\itkRadiusExtractor2D.h	/^  bool (*m_IdleCallBack)();$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_Image	.\2D\itkRadiusExtractor2D.h	/^  ImagePointer    m_Image; $/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_IterPntArray	.\2D\itkRadiusExtractor2D.h	/^  std::list<TubePoint *>::iterator * m_IterPntArray;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_Kern	.\2D\itkRadiusExtractor2D.h	/^  std::list<TubePointType>*    m_Kern;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernBranch	.\2D\itkRadiusExtractor2D.h	/^  double   m_KernBranch;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernBrn	.\2D\itkRadiusExtractor2D.h	/^  double m_KernBrn[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernBrnCnt	.\2D\itkRadiusExtractor2D.h	/^  double m_KernBrnCnt[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernCosT	.\2D\itkRadiusExtractor2D.h	/^  double m_KernCosT[20], m_KernSinT[20];$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernMedial	.\2D\itkRadiusExtractor2D.h	/^  double   m_KernMedial;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernN0	.\2D\itkRadiusExtractor2D.h	/^  VectorType* m_KernN0;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernN1	.\2D\itkRadiusExtractor2D.h	/^  VectorType* m_KernN1;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernNeg	.\2D\itkRadiusExtractor2D.h	/^  double m_KernPos[40], m_KernNeg[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernNegCnt	.\2D\itkRadiusExtractor2D.h	/^  double m_KernPosCnt[40], m_KernNegCnt[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernNumT	.\2D\itkRadiusExtractor2D.h	/^  int m_KernNumT;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernPntArray	.\2D\itkRadiusExtractor2D.h	/^  TubePoint ** m_KernPntArray;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernPos	.\2D\itkRadiusExtractor2D.h	/^  double m_KernPos[40], m_KernNeg[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernPosCnt	.\2D\itkRadiusExtractor2D.h	/^  double m_KernPosCnt[40], m_KernNegCnt[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_KernSinT	.\2D\itkRadiusExtractor2D.h	/^  double m_KernCosT[20], m_KernSinT[20];$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_MedialnessAtKern	.\2D\itkRadiusExtractor2D.h	/^  UserFunc<double, double> * m_MedialnessAtKern;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_MedialnessOpt	.\2D\itkRadiusExtractor2D.h	/^  OptimizerType m_MedialnessOpt;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_ModeMR	.\2D\itkRadiusExtractor2D.h	/^  bool     m_ModeMR;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_NumRadiusPoints	.\2D\itkRadiusExtractor2D.h	/^  int      m_NumRadiusPoints;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_Radius0	.\2D\itkRadiusExtractor2D.h	/^  double   m_Radius0;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_RadiusMax	.\2D\itkRadiusExtractor2D.h	/^  double   m_RadiusMax;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_RadiusMin	.\2D\itkRadiusExtractor2D.h	/^  double   m_RadiusMin;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_RadiusPointSpacing	.\2D\itkRadiusExtractor2D.h	/^  int      m_RadiusPointSpacing;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_Scale	.\2D\itkRadiusExtractor2D.h	/^  double m_Scale;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_StatusCallBack	.\2D\itkRadiusExtractor2D.h	/^  void (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_ThreshWVal	.\2D\itkRadiusExtractor2D.h	/^  double   m_ThreshWVal;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_ThreshWValStart	.\2D\itkRadiusExtractor2D.h	/^  double   m_ThreshWValStart;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_TubeLength	.\2D\itkRadiusExtractor2D.h	/^  int m_TubeLength;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::m_TubePointCount	.\2D\itkRadiusExtractor2D.h	/^  int m_TubePointCount;$/;"	m	class:itk::RadiusExtractor2D	access:private
itk::RadiusExtractor2D::operator =	.\2D\itkRadiusExtractor2D.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::RadiusExtractor2D	access:protected	signature:(const Self&)
itk::RadiusExtractor2D::~RadiusExtractor2D	.\2D\itkRadiusExtractor2D.h	/^  virtual ~RadiusExtractor2D();$/;"	p	class:itk::RadiusExtractor2D	access:protected	signature:()
itk::RadiusExtractor::ApplyKernMeasures	.\itkRadiusExtractor.h	/^  void ApplyKernMeasures(TubeType * tube);$/;"	p	class:itk::RadiusExtractor	access:private	signature:(TubeType * tube)
itk::RadiusExtractor::CalcKernArray	.\itkRadiusExtractor.h	/^  void CalcKernArray(TubeType * tube);$/;"	p	class:itk::RadiusExtractor	access:private	signature:(TubeType * tube)
itk::RadiusExtractor::CalcKernMeasures	.\itkRadiusExtractor.h	/^  void CalcKernMeasures(void);$/;"	p	class:itk::RadiusExtractor	access:private	signature:(void)
itk::RadiusExtractor::CalcKernRadiiOneWay	.\itkRadiusExtractor.h	/^  void CalcKernRadiiOneWay(int iStart, int iEnd, bool forward);$/;"	p	class:itk::RadiusExtractor	access:private	signature:(int iStart, int iEnd, bool forward)
itk::RadiusExtractor::CalcOptimalScale	.\itkRadiusExtractor.h	/^  bool  CalcOptimalScale(TubePointType pnt, bool firstGuess =false);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(TubePointType pnt, bool firstGuess =false)
itk::RadiusExtractor::CalcRadii	.\itkRadiusExtractor.h	/^  bool     CalcRadii(TubeType * tube);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(TubeType * tube)
itk::RadiusExtractor::CalcRadiiOneWay	.\itkRadiusExtractor.h	/^  bool  CalcRadiiOneWay(std::vector<TubePointType>::iterator tubePntFrom,$/;"	p	class:itk::RadiusExtractor	access:public	signature:(std::vector<TubePointType>::iterator tubePntFrom, std::vector<TubePointType>::iterator tubePntTo, bool forward=true)
itk::RadiusExtractor::ComputeMnessBness	.\itkRadiusExtractor.h	/^  void     ComputeMnessBness(double pntR, double w,$/;"	p	class:itk::RadiusExtractor	access:public	signature:(double pntR, double w, double *kernPos, double *kernPosCnt, double *kernNeg, double *kernNegCnt, double *kernBrn, double *kernBrnCnt, double *mness, double *bness, bool doBNess)
itk::RadiusExtractor::ConstPointer	.\itkRadiusExtractor.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::GetMedialnessOpt	.\itkRadiusExtractor.h	/^  OptParabolicFit1D & GetMedialnessOpt(void);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(void)
itk::RadiusExtractor::ITKVectorType	.\itkRadiusExtractor.h	/^  typedef typename TubeType::VectorType ITKVectorType;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::ImageConstPointer	.\itkRadiusExtractor.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::ImagePointer	.\itkRadiusExtractor.h	/^  typedef typename TInputImage::Pointer  ImagePointer;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::ImageType	.\itkRadiusExtractor.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::MedialnessAtKern	.\itkRadiusExtractor.h	/^  double   MedialnessAtKern(std::list<TubePointType> * tube, double pntR, bool doBNess);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(std::list<TubePointType> * tube, double pntR, bool doBNess)
itk::RadiusExtractor::MedialnessAtPoint	.\itkRadiusExtractor.h	/^  double   MedialnessAtPoint(TubePointType pnt, double pntR,$/;"	p	class:itk::RadiusExtractor	access:public	signature:(TubePointType pnt, double pntR, bool doBNess=false, bool newKern=true, double w=1)
itk::RadiusExtractor::PixelType	.\itkRadiusExtractor.h	/^  typedef typename TInputImage::PixelType PixelType;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::PointType	.\itkRadiusExtractor.h	/^  typedef typename TubeType::PointType PointType;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::Pointer	.\itkRadiusExtractor.h	/^  typedef SmartPointer<Self>   Pointer;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::RadiusExtractor	.\itkRadiusExtractor.h	/^  RadiusExtractor();$/;"	p	class:itk::RadiusExtractor	access:protected	signature:()
itk::RadiusExtractor::RadiusExtractor	.\itkRadiusExtractor.h	/^  RadiusExtractor(const Self&) {}$/;"	f	class:itk::RadiusExtractor	access:protected	signature:(const Self&)
itk::RadiusExtractor::Self	.\itkRadiusExtractor.h	/^  typedef RadiusExtractor Self;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::SetExtent	.\itkRadiusExtractor.h	/^  void SetExtent(double extent);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(double extent)
itk::RadiusExtractor::SetIdleCallBack	.\itkRadiusExtractor.h	/^  void     SetIdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::RadiusExtractor	access:public	signature:(bool (idleCallBack)))
itk::RadiusExtractor::SetInputImage	.\itkRadiusExtractor.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(ImagePointer inputImage)
itk::RadiusExtractor::SetModeCT	.\itkRadiusExtractor.h	/^  void SetModeCT(bool modeCT);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(bool modeCT)
itk::RadiusExtractor::SetRadiusMax	.\itkRadiusExtractor.h	/^  void SetRadiusMax(double radiusMax);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(double radiusMax)
itk::RadiusExtractor::SetRadiusMin	.\itkRadiusExtractor.h	/^  void SetRadiusMin(double radiusMin);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(double radiusMin)
itk::RadiusExtractor::SetScale	.\itkRadiusExtractor.h	/^  void SetScale(double scale);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(double scale)
itk::RadiusExtractor::SetStatusCallBack	.\itkRadiusExtractor.h	/^  void     SetStatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::RadiusExtractor	access:public	signature:(void (*statusCallBack)(char *, char *, int))
itk::RadiusExtractor::Superclass	.\itkRadiusExtractor.h	/^  typedef Object  Superclass;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::TubePointType	.\itkRadiusExtractor.h	/^  typedef typename TubeType::TubePointType TubePointType;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::TubePointer	.\itkRadiusExtractor.h	/^  typedef typename TubeType::Pointer TubePointer;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::TubeType	.\itkRadiusExtractor.h	/^  typedef VesselTubeSpatialObject<3> TubeType;$/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::VectorType	.\itkRadiusExtractor.h	/^  typedef vnl_vector<double> VectorType; $/;"	t	class:itk::RadiusExtractor	access:public
itk::RadiusExtractor::itkGetConstObjectMacro	.\itkRadiusExtractor.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(Image,ImageType)
itk::RadiusExtractor::itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(DataMax,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(DataMax,double)
itk::RadiusExtractor::itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(DataMin,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(DataMin,double)
itk::RadiusExtractor::itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(Extent,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(Extent,double)
itk::RadiusExtractor::itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(ExtractRidge,bool); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(ExtractRidge,bool)
itk::RadiusExtractor::itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(Radius0,double); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(Radius0,double)
itk::RadiusExtractor::itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(RadiusMax,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(RadiusMax,double)
itk::RadiusExtractor::itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(RadiusMin,double);  $/;"	p	class:itk::RadiusExtractor	access:public	signature:(RadiusMin,double)
itk::RadiusExtractor::itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(Scale,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(Scale,double)
itk::RadiusExtractor::itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(ThreshWVal,double); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(ThreshWVal,double)
itk::RadiusExtractor::itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(ThreshWValStart,double); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(ThreshWValStart,double)
itk::RadiusExtractor::itkNewMacro	.\itkRadiusExtractor.h	/^  itkNewMacro(RadiusExtractor);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(RadiusExtractor)
itk::RadiusExtractor::itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(DataMax,double); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(DataMax,double)
itk::RadiusExtractor::itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(DataMin,double); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(DataMin,double)
itk::RadiusExtractor::itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(ExtractRidge,bool);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(ExtractRidge,bool)
itk::RadiusExtractor::itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(ModeMR,bool); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(ModeMR,bool)
itk::RadiusExtractor::itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(Radius0,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(Radius0,double)
itk::RadiusExtractor::itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(ThreshWVal,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(ThreshWVal,double)
itk::RadiusExtractor::itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(ThreshWValStart,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(ThreshWValStart,double)
itk::RadiusExtractor::itkStaticConstMacro	.\itkRadiusExtractor.h	/^  itkStaticConstMacro(ImageDimension, unsigned int,$/;"	p	class:itk::RadiusExtractor	access:public	signature:(ImageDimension, unsigned int, ::itk::GetImageDimension< TInputImage>::ImageDimension)
itk::RadiusExtractor::itkTypeMacro	.\itkRadiusExtractor.h	/^  itkTypeMacro(RadiusExtractor, Object);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(RadiusExtractor, Object)
itk::RadiusExtractor::m_ArrayLen	.\itkRadiusExtractor.h	/^  int      m_ArrayLen;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_DataMax	.\itkRadiusExtractor.h	/^  double   m_DataMax;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_DataMin	.\itkRadiusExtractor.h	/^  double   m_DataMin;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_DataOp	.\itkRadiusExtractor.h	/^  typename Blur3DImageFunction<ImageType>::Pointer m_DataOp;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_Debug	.\itkRadiusExtractor.h	/^  bool m_Debug;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_Extent	.\itkRadiusExtractor.h	/^  double m_Extent;   $/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_ExtractRidge	.\itkRadiusExtractor.h	/^  bool     m_ExtractRidge;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_IdleCallBack	.\itkRadiusExtractor.h	/^  bool (*m_IdleCallBack)();$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_Image	.\itkRadiusExtractor.h	/^  ImagePointer    m_Image; $/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_IterPntArray	.\itkRadiusExtractor.h	/^  std::vector<TubePointType>::iterator  * m_IterPntArray;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_Kern	.\itkRadiusExtractor.h	/^  std::list<TubePointType>* m_Kern;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernBranch	.\itkRadiusExtractor.h	/^  double   m_KernBranch;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernBrn	.\itkRadiusExtractor.h	/^  double m_KernBrn[40];$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernBrnCnt	.\itkRadiusExtractor.h	/^  double m_KernBrnCnt[40];$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernCosT	.\itkRadiusExtractor.h	/^  double m_KernCosT[20], m_KernSinT[20];$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernMedial	.\itkRadiusExtractor.h	/^  double   m_KernMedial;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernN0	.\itkRadiusExtractor.h	/^  VectorType* m_KernN0;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernN1	.\itkRadiusExtractor.h	/^  VectorType* m_KernN1;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernNeg	.\itkRadiusExtractor.h	/^  double m_KernPos[40], m_KernNeg[40];$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernNegCnt	.\itkRadiusExtractor.h	/^  double m_KernPosCnt[40], m_KernNegCnt[40];$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernNumT	.\itkRadiusExtractor.h	/^  int m_KernNumT;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernPntArray	.\itkRadiusExtractor.h	/^  TubePointType * m_KernPntArray;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernPos	.\itkRadiusExtractor.h	/^  double m_KernPos[40], m_KernNeg[40];$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernPosCnt	.\itkRadiusExtractor.h	/^  double m_KernPosCnt[40], m_KernNegCnt[40];$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_KernSinT	.\itkRadiusExtractor.h	/^  double m_KernCosT[20], m_KernSinT[20];$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_MedialnessAtKern	.\itkRadiusExtractor.h	/^  UserFunc<double, double> * m_MedialnessAtKern;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_MedialnessOpt	.\itkRadiusExtractor.h	/^  OptParabolicFit1D m_MedialnessOpt;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_ModeMR	.\itkRadiusExtractor.h	/^  bool     m_ModeMR;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_NumRadiusPoints	.\itkRadiusExtractor.h	/^  int      m_NumRadiusPoints;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_Radius0	.\itkRadiusExtractor.h	/^  double   m_Radius0;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_RadiusMax	.\itkRadiusExtractor.h	/^  double   m_RadiusMax;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_RadiusMin	.\itkRadiusExtractor.h	/^  double   m_RadiusMin;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_RadiusPointSpacing	.\itkRadiusExtractor.h	/^  int      m_RadiusPointSpacing;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_Scale	.\itkRadiusExtractor.h	/^  double m_Scale;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_StatusCallBack	.\itkRadiusExtractor.h	/^  void (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_ThreshWVal	.\itkRadiusExtractor.h	/^  double   m_ThreshWVal;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_ThreshWValStart	.\itkRadiusExtractor.h	/^  double   m_ThreshWValStart;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_TubeLength	.\itkRadiusExtractor.h	/^  int m_TubeLength;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::m_TubePointCount	.\itkRadiusExtractor.h	/^  int m_TubePointCount;$/;"	m	class:itk::RadiusExtractor	access:private
itk::RadiusExtractor::operator =	.\itkRadiusExtractor.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::RadiusExtractor	access:protected	signature:(const Self&)
itk::RadiusExtractor::~RadiusExtractor	.\itkRadiusExtractor.h	/^  virtual ~RadiusExtractor();$/;"	p	class:itk::RadiusExtractor	access:protected	signature:()
itk::RidgeExtractor	.\itkRidgeExtractor.h	/^class ITK_EXPORT RidgeExtractor : public Object $/;"	c	namespace:itk	inherits:Object
itk::RidgeExtractor2D	.\2D\itkRidgeExtractor2D.h	/^class ITK_EXPORT RidgeExtractor2D : public Object $/;"	c	namespace:itk	inherits:Object
itk::RidgeExtractor2D::AddTube	.\2D\itkRidgeExtractor2D.h	/^  bool AddTube(TubeType * tube);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(TubeType * tube)
itk::RidgeExtractor2D::ConstPointer	.\2D\itkRidgeExtractor2D.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::DeleteTube	.\2D\itkRidgeExtractor2D.h	/^  bool DeleteTube(TubeType * tube);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(TubeType * tube)
itk::RidgeExtractor2D::Extract	.\2D\itkRidgeExtractor2D.h	/^  TubePointer  Extract(VectorType * x, int tubeID);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(VectorType * x, int tubeID)
itk::RidgeExtractor2D::GetDataSpline	.\2D\itkRidgeExtractor2D.h	/^  SplineND* GetDataSpline(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
itk::RidgeExtractor2D::GetDataSpline1D	.\2D\itkRidgeExtractor2D.h	/^  Spline1D* GetDataSpline1D(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
itk::RidgeExtractor2D::GetDataSplineOptimizer	.\2D\itkRidgeExtractor2D.h	/^  Optimizer1D* GetDataSplineOptimizer(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
itk::RidgeExtractor2D::GetExtent	.\2D\itkRidgeExtractor2D.h	/^  double GetExtent(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
itk::RidgeExtractor2D::GetExtractBoundMax	.\2D\itkRidgeExtractor2D.h	/^  IntVectorType* GetExtractBoundMax(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
itk::RidgeExtractor2D::GetExtractBoundMin	.\2D\itkRidgeExtractor2D.h	/^  IntVectorType* GetExtractBoundMin(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
itk::RidgeExtractor2D::GetScale	.\2D\itkRidgeExtractor2D.h	/^  double GetScale(void);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void)
itk::RidgeExtractor2D::IdleCallBack	.\2D\itkRidgeExtractor2D.h	/^  void   IdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool (idleCallBack)))
itk::RidgeExtractor2D::ImageConstPointer	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::ImageDimension	.\2D\itkRidgeExtractor2D.h	/^  enum {ImageDimension = ImageType::ImageDimension};$/;"	e	enum:itk::RidgeExtractor2D::__anon2
itk::RidgeExtractor2D::ImagePointer	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TInputImage::Pointer  ImagePointer;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::ImageType	.\2D\itkRidgeExtractor2D.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::IndexType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename ImageType::IndexType  IndexType; $/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::IntVectorType	.\2D\itkRidgeExtractor2D.h	/^  typedef itk::Vector<int,2> IntVectorType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::Intensity	.\2D\itkRidgeExtractor2D.h	/^  double  Intensity(VnlIntVectorType * x);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(VnlIntVectorType * x)
itk::RidgeExtractor2D::LocalRidge	.\2D\itkRidgeExtractor2D.h	/^  bool   LocalRidge(VectorType * x);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(VectorType * x)
itk::RidgeExtractor2D::MatrixType	.\2D\itkRidgeExtractor2D.h	/^  typedef itk::Matrix<double,2> MatrixType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::OptimizerType	.\2D\itkRidgeExtractor2D.h	/^  typedef OptBrent1D OptimizerType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::PixelType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TInputImage::PixelType PixelType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::PointType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TubeType::PointType PointType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::Pointer	.\2D\itkRidgeExtractor2D.h	/^  typedef SmartPointer<Self>   Pointer;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::RegionType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename ImageType::RegionType RegionType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::RidgeExtractor2D	.\2D\itkRidgeExtractor2D.h	/^  RidgeExtractor2D();$/;"	p	class:itk::RidgeExtractor2D	access:protected	signature:()
itk::RidgeExtractor2D::RidgeExtractor2D	.\2D\itkRidgeExtractor2D.h	/^  RidgeExtractor2D(const Self&) {}$/;"	f	class:itk::RidgeExtractor2D	access:protected	signature:(const Self&)
itk::RidgeExtractor2D::Ridgeness	.\2D\itkRidgeExtractor2D.h	/^  double  Ridgeness(VectorType * x);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(VectorType * x)
itk::RidgeExtractor2D::Self	.\2D\itkRidgeExtractor2D.h	/^  typedef RidgeExtractor2D Self;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::SetAutoScale	.\2D\itkRidgeExtractor2D.h	/^  void SetAutoScale(bool autoScale);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool autoScale)
itk::RidgeExtractor2D::SetDataMax	.\2D\itkRidgeExtractor2D.h	/^  void SetDataMax(double dataMax); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(double dataMax)
itk::RidgeExtractor2D::SetDataMin	.\2D\itkRidgeExtractor2D.h	/^  void SetDataMin(double dataMin); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(double dataMin)
itk::RidgeExtractor2D::SetDynamicScale	.\2D\itkRidgeExtractor2D.h	/^  void SetDynamicScale(bool dynamicScale);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool dynamicScale)
itk::RidgeExtractor2D::SetExtent	.\2D\itkRidgeExtractor2D.h	/^  void SetExtent(double extent);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(double extent)
itk::RidgeExtractor2D::SetExtractBoundMax	.\2D\itkRidgeExtractor2D.h	/^  void SetExtractBoundMax(IntVectorType* extractBoundMax);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(IntVectorType* extractBoundMax)
itk::RidgeExtractor2D::SetExtractBoundMin	.\2D\itkRidgeExtractor2D.h	/^  void SetExtractBoundMin(IntVectorType* extractBoundMin);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(IntVectorType* extractBoundMin)
itk::RidgeExtractor2D::SetExtractValley	.\2D\itkRidgeExtractor2D.h	/^  void SetExtractValley(bool extractvalley)$/;"	f	class:itk::RidgeExtractor2D	access:public	signature:(bool extractvalley)
itk::RidgeExtractor2D::SetInputImage	.\2D\itkRidgeExtractor2D.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ImagePointer inputImage)
itk::RidgeExtractor2D::SetModeCT	.\2D\itkRidgeExtractor2D.h	/^  void SetModeCT(bool modeCT);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool modeCT)
itk::RidgeExtractor2D::SetModeMR	.\2D\itkRidgeExtractor2D.h	/^  void SetModeMR(bool ModeMR); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool ModeMR)
itk::RidgeExtractor2D::SetModeRetina	.\2D\itkRidgeExtractor2D.h	/^  void SetModeRetina(bool ModeRetina); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(bool ModeRetina)
itk::RidgeExtractor2D::SetRadiusExtractor	.\2D\itkRidgeExtractor2D.h	/^  void  SetRadiusExtractor(RadiusExtractor2D<TInputImage> * radiusExtractor);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(RadiusExtractor2D<TInputImage> * radiusExtractor)
itk::RidgeExtractor2D::SetScale	.\2D\itkRidgeExtractor2D.h	/^  void SetScale(double scale);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(double scale)
itk::RidgeExtractor2D::SizeType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename ImageType::SizeType SizeType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::SmoothTubeX	.\2D\itkRidgeExtractor2D.h	/^  void   SmoothTubeX(TubeType * tube, int h);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(TubeType * tube, int h)
itk::RidgeExtractor2D::StatusCallBack	.\2D\itkRidgeExtractor2D.h	/^  void   StatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(void (*statusCallBack)(char *, char *, int))
itk::RidgeExtractor2D::Superclass	.\2D\itkRidgeExtractor2D.h	/^  typedef Object  Superclass;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::TraverseOneWay	.\2D\itkRidgeExtractor2D.h	/^  TubePointer  TraverseOneWay(VectorType * newX, VectorType * newT, VectorType  * newN, int dir);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(VectorType * newX, VectorType * newT, VectorType * newN, int dir)
itk::RidgeExtractor2D::TubePointType	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TubeType::TubePointType TubePointType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::TubePointer	.\2D\itkRidgeExtractor2D.h	/^  typedef typename TubeType::Pointer TubePointer;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::TubeType	.\2D\itkRidgeExtractor2D.h	/^  typedef VesselTubeSpatialObject<2> TubeType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::VERBOSE	.\2D\itkRidgeExtractor2D.h	/^  bool VERBOSE;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::VectorType	.\2D\itkRidgeExtractor2D.h	/^  typedef itk::Vector<double,2> VectorType;$/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::VnlIntVectorType	.\2D\itkRidgeExtractor2D.h	/^  typedef vnl_vector<int> VnlIntVectorType; $/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::VnlMatrixType	.\2D\itkRidgeExtractor2D.h	/^  typedef vnl_matrix<double> VnlMatrixType; $/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::VnlVectorType	.\2D\itkRidgeExtractor2D.h	/^  typedef vnl_vector<double> VnlVectorType; $/;"	t	class:itk::RidgeExtractor2D	access:public
itk::RidgeExtractor2D::itkGetConstObjectMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetConstObjectMacro(DataMask,ImageType);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(DataMask,ImageType)
itk::RidgeExtractor2D::itkGetConstObjectMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(Image,ImageType)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(AutoScale,bool);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(AutoScale,bool)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(AutoScaleUsed,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(AutoScaleUsed,double)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(DataMax,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(DataMax,double)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(DataMin,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(DataMin,double)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(DynamicScale,bool);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(DynamicScale,bool)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(RecoveryMax,int);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(RecoveryMax,int)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(StepX,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(StepX,double)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshEV,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEV,double)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshEVRatio,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEVRatio,double)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshEVRatioStart,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEVRatioStart,double)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshP2Q2,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshP2Q2,double)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshP2Q2Start,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshP2Q2Start,double)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshT,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshT,double)
itk::RidgeExtractor2D::itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshX,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshX,double)
itk::RidgeExtractor2D::itkNewMacro	.\2D\itkRidgeExtractor2D.h	/^  itkNewMacro(Self);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(Self)
itk::RidgeExtractor2D::itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ExtractRidge,bool);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ExtractRidge,bool)
itk::RidgeExtractor2D::itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(RecoveryMax,int);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(RecoveryMax,int)
itk::RidgeExtractor2D::itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(StepX,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(StepX,double)
itk::RidgeExtractor2D::itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshEV,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEV,double)
itk::RidgeExtractor2D::itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshEVRatio,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEVRatio,double)
itk::RidgeExtractor2D::itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshEVRatioStart,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEVRatioStart,double)
itk::RidgeExtractor2D::itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshP2Q2,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshP2Q2,double)
itk::RidgeExtractor2D::itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshP2Q2Start,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshP2Q2Start,double)
itk::RidgeExtractor2D::itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshT,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshT,double)
itk::RidgeExtractor2D::itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshX,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshX,double)
itk::RidgeExtractor2D::itkTypeMacro	.\2D\itkRidgeExtractor2D.h	/^  itkTypeMacro(Self, Object);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(Self, Object)
itk::RidgeExtractor2D::m_AutoScale	.\2D\itkRidgeExtractor2D.h	/^  bool             m_AutoScale;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_AutoScaleUsed	.\2D\itkRidgeExtractor2D.h	/^  double           m_AutoScaleUsed;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_CalcTangents	.\2D\itkRidgeExtractor2D.h	/^  bool   m_CalcTangents(TubeType *);$/;"	p	class:itk::RidgeExtractor2D	access:private	signature:(TubeType *)
itk::RidgeExtractor2D::m_DataMask	.\2D\itkRidgeExtractor2D.h	/^  ImagePointer     m_DataMask;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_DataMax	.\2D\itkRidgeExtractor2D.h	/^  double           m_DataMax;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_DataMin	.\2D\itkRidgeExtractor2D.h	/^  double           m_DataMin;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_DataOp	.\2D\itkRidgeExtractor2D.h	/^  typename BlurImageFunction<ImageType>::Pointer m_DataOp;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_DataRange	.\2D\itkRidgeExtractor2D.h	/^  double           m_DataRange;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_DataSpline	.\2D\itkRidgeExtractor2D.h	/^  SplineND *       m_DataSpline;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_DataSpline1D	.\2D\itkRidgeExtractor2D.h	/^  SplineApproximation1D      m_DataSpline1D;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_DataSplineOpt	.\2D\itkRidgeExtractor2D.h	/^  OptimizerType       m_DataSplineOpt;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_Debug	.\2D\itkRidgeExtractor2D.h	/^  bool m_Debug;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_DynamicScale	.\2D\itkRidgeExtractor2D.h	/^  bool             m_DynamicScale;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_DynamicScaleUsed	.\2D\itkRidgeExtractor2D.h	/^  double           m_DynamicScaleUsed;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ExtractBoundMax	.\2D\itkRidgeExtractor2D.h	/^  IntVectorType m_ExtractBoundMax;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ExtractBoundMin	.\2D\itkRidgeExtractor2D.h	/^  IntVectorType m_ExtractBoundMin;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ExtractRidge	.\2D\itkRidgeExtractor2D.h	/^  bool             m_ExtractRidge;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_IdleCallBack	.\2D\itkRidgeExtractor2D.h	/^  bool  (*m_IdleCallBack)();$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_Image	.\2D\itkRidgeExtractor2D.h	/^  ImagePointer    m_Image; $/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ModeMR	.\2D\itkRidgeExtractor2D.h	/^  bool             m_ModeMR;   $/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_RadiusExtractor	.\2D\itkRidgeExtractor2D.h	/^  RadiusExtractor2D<TInputImage> * m_RadiusExtractor;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_RecoveryMax	.\2D\itkRidgeExtractor2D.h	/^  int              m_RecoveryMax;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_SplineValueFunc	.\2D\itkRidgeExtractor2D.h	/^  UserFunc<vnl_vector<int> *, double> * m_SplineValueFunc;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_StatusCallBack	.\2D\itkRidgeExtractor2D.h	/^  void  (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_StepX	.\2D\itkRidgeExtractor2D.h	/^  double           m_StepX;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ThreshEV	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshEV;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ThreshEVRatio	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshEVRatio;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ThreshEVRatioStart	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshEVRatioStart;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ThreshP2Q2	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshP2Q2;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ThreshP2Q2Start	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshP2Q2Start;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ThreshT	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshT;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_ThreshX	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshX;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_Tube	.\2D\itkRidgeExtractor2D.h	/^  TubePointer     m_Tube;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_TubeID	.\2D\itkRidgeExtractor2D.h	/^  int         m_TubeID;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_TubePointCount	.\2D\itkRidgeExtractor2D.h	/^  int         m_TubePointCount;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_TubePointList	.\2D\itkRidgeExtractor2D.h	/^  std::list<TubePointType> m_TubePointList;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_X	.\2D\itkRidgeExtractor2D.h	/^  VectorType* m_X;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_XD	.\2D\itkRidgeExtractor2D.h	/^  VectorType* m_XD;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_XH	.\2D\itkRidgeExtractor2D.h	/^  VnlMatrixType* m_XH;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_XHEVal	.\2D\itkRidgeExtractor2D.h	/^  VectorType m_XHEVal;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_XHEVect	.\2D\itkRidgeExtractor2D.h	/^  VnlMatrixType* m_XHEVect;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_XP	.\2D\itkRidgeExtractor2D.h	/^  double                   m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_XQ	.\2D\itkRidgeExtractor2D.h	/^  double                   m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_XR	.\2D\itkRidgeExtractor2D.h	/^  double                   m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::m_XVal	.\2D\itkRidgeExtractor2D.h	/^  double                   m_XVal;$/;"	m	class:itk::RidgeExtractor2D	access:private
itk::RidgeExtractor2D::operator =	.\2D\itkRidgeExtractor2D.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::RidgeExtractor2D	access:protected	signature:(const Self&)
itk::RidgeExtractor2D::~RidgeExtractor2D	.\2D\itkRidgeExtractor2D.h	/^  virtual ~RidgeExtractor2D();$/;"	p	class:itk::RidgeExtractor2D	access:protected	signature:()
itk::RidgeExtractor::AddTube	.\itkRidgeExtractor.h	/^  bool AddTube(TubeType * tube);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(TubeType * tube)
itk::RidgeExtractor::ConstPointer	.\itkRidgeExtractor.h	/^  typedef SmartPointer<const Self>   ConstPointer;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::ContinuousIndexType	.\itkRidgeExtractor.h	/^  typedef typename ContinuousIndex<double, 3> ContinuousIndexType;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::DeleteTube	.\itkRidgeExtractor.h	/^  bool DeleteTube(TubeType * tube);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(TubeType * tube)
itk::RidgeExtractor::Extract	.\itkRidgeExtractor.h	/^  TubePointer  Extract(ContinuousIndexType & x, int tubeID);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ContinuousIndexType & x, int tubeID)
itk::RidgeExtractor::GetDataSpline	.\itkRidgeExtractor.h	/^  SplineND* GetDataSpline(void);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void)
itk::RidgeExtractor::GetDataSpline1D	.\itkRidgeExtractor.h	/^  Spline1D* GetDataSpline1D(void);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void)
itk::RidgeExtractor::GetDataSplineOptimizer	.\itkRidgeExtractor.h	/^  Optimizer1D* GetDataSplineOptimizer(void);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void)
itk::RidgeExtractor::GetExtent	.\itkRidgeExtractor.h	/^  double GetExtent(void);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void)
itk::RidgeExtractor::GetScale	.\itkRidgeExtractor.h	/^  double GetScale(void);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void)
itk::RidgeExtractor::IdleCallBack	.\itkRidgeExtractor.h	/^  void   IdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::RidgeExtractor	access:public	signature:(bool (idleCallBack)))
itk::RidgeExtractor::ImageConstPointer	.\itkRidgeExtractor.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::ImagePointer	.\itkRidgeExtractor.h	/^  typedef typename TInputImage::Pointer      ImagePointer;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::ImageType	.\itkRidgeExtractor.h	/^  typedef TInputImage                        ImageType;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::IndexType	.\itkRidgeExtractor.h	/^  typedef typename TInputImage::IndexType    IndexType;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::Intensity	.\itkRidgeExtractor.h	/^  double  Intensity(IndexType & x);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(IndexType & x)
itk::RidgeExtractor::LocalRidge	.\itkRidgeExtractor.h	/^  bool   LocalRidge(ContinuousIndexType & x);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ContinuousIndexType & x)
itk::RidgeExtractor::MaskType	.\itkRidgeExtractor.h	/^  typedef Image<float, 3>                    MaskType;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::MatrixType	.\itkRidgeExtractor.h	/^  typedef Matrix<double, 3, 3>               MatrixType;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::NormalPlaneMatrixType	.\itkRidgeExtractor.h	/^  typedef Matrix<double, 3, 2>               NormalPlaneMatrixType;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::PixelType	.\itkRidgeExtractor.h	/^  typedef typename TInputImage::PixelType    PixelType;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::Pointer	.\itkRidgeExtractor.h	/^  typedef SmartPointer<Self>         Pointer;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::RidgeExtractor	.\itkRidgeExtractor.h	/^  RidgeExtractor();$/;"	p	class:itk::RidgeExtractor	access:protected	signature:()
itk::RidgeExtractor::RidgeExtractor	.\itkRidgeExtractor.h	/^  RidgeExtractor(const Self&) {}$/;"	f	class:itk::RidgeExtractor	access:protected	signature:(const Self&)
itk::RidgeExtractor::Ridgeness	.\itkRidgeExtractor.h	/^  double  Ridgeness(ContinuousIndexType & x);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ContinuousIndexType & x)
itk::RidgeExtractor::Self	.\itkRidgeExtractor.h	/^  typedef RidgeExtractor             Self;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::SetDataMax	.\itkRidgeExtractor.h	/^  void SetDataMax(double dataMax); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(double dataMax)
itk::RidgeExtractor::SetDataMin	.\itkRidgeExtractor.h	/^  void SetDataMin(double dataMin); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(double dataMin)
itk::RidgeExtractor::SetDynamicScale	.\itkRidgeExtractor.h	/^  void SetDynamicScale(bool dynamicScale);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(bool dynamicScale)
itk::RidgeExtractor::SetExtent	.\itkRidgeExtractor.h	/^  void SetExtent(double extent);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(double extent)
itk::RidgeExtractor::SetInputImage	.\itkRidgeExtractor.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ImagePointer inputImage)
itk::RidgeExtractor::SetRadiusExtractor	.\itkRidgeExtractor.h	/^  void  SetRadiusExtractor(RadiusExtractor<TInputImage> * radiusExtractor);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(RadiusExtractor<TInputImage> * radiusExtractor)
itk::RidgeExtractor::SetScale	.\itkRidgeExtractor.h	/^  void SetScale(double scale);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(double scale)
itk::RidgeExtractor::SmoothTubeX	.\itkRidgeExtractor.h	/^  void SmoothTubeX(TubeType * tube, int h);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(TubeType * tube, int h)
itk::RidgeExtractor::StatusCallBack	.\itkRidgeExtractor.h	/^  void   StatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::RidgeExtractor	access:public	signature:(void (*statusCallBack)(char *, char *, int))
itk::RidgeExtractor::Superclass	.\itkRidgeExtractor.h	/^  typedef Object                     Superclass;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::TraverseOneWay	.\itkRidgeExtractor.h	/^  TubeType *  TraverseOneWay(ContinuousIndexType & newX, VectorType & newT,$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ContinuousIndexType & newX, VectorType & newT, NormalPlaneMatrixType & newN, int dir)
itk::RidgeExtractor::TubePointType	.\itkRidgeExtractor.h	/^  typedef typename TubeType::TubePointType   TubePointType;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::TubePointer	.\itkRidgeExtractor.h	/^  typedef typename TubeType::Pointer         TubePointer;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::TubeType	.\itkRidgeExtractor.h	/^  typedef VesselTubeSpatialObject<3>         TubeType;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::VectorType	.\itkRidgeExtractor.h	/^  typedef Vector<double, 3>                  VectorType;$/;"	t	class:itk::RidgeExtractor	access:public
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(DataMax, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(DataMax, double)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(DataMin, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(DataMin, double)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(DynamicScale, bool);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(DynamicScale, bool)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(DynamicScaleUsed, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(DynamicScaleUsed, double)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ExtractBoundMax, IndexType); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ExtractBoundMax, IndexType)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ExtractBoundMin, IndexType); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ExtractBoundMin, IndexType)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(RecoveryMax, int);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(RecoveryMax, int)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(StepX, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(StepX, double)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshEV, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEV, double)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshEVRatio, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEVRatio, double)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshEVRatioStart, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEVRatioStart, double)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshP2Q2, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshP2Q2, double)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshP2Q2Start, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshP2Q2Start, double)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshT, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshT, double)
itk::RidgeExtractor::itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshX, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshX, double)
itk::RidgeExtractor::itkGetObjectMacro	.\itkRidgeExtractor.h	/^  itkGetObjectMacro(DataMask, MaskType);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(DataMask, MaskType)
itk::RidgeExtractor::itkGetObjectMacro	.\itkRidgeExtractor.h	/^  itkGetObjectMacro(Image, ImageType);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(Image, ImageType)
itk::RidgeExtractor::itkNewMacro	.\itkRidgeExtractor.h	/^  itkNewMacro(RidgeExtractor);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(RidgeExtractor)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ExtractBoundMax, IndexType); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ExtractBoundMax, IndexType)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ExtractBoundMin, IndexType); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ExtractBoundMin, IndexType)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(RecoveryMax, int);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(RecoveryMax, int)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(StepX, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(StepX, double)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshEV, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEV, double)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshEVRatio, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEVRatio, double)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshEVRatioStart, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEVRatioStart, double)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshP2Q2, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshP2Q2, double)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshP2Q2Start, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshP2Q2Start, double)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshT, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshT, double)
itk::RidgeExtractor::itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshX, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshX, double)
itk::RidgeExtractor::itkStaticConstMacro	.\itkRidgeExtractor.h	/^  itkStaticConstMacro(ImageDimension, unsigned int,$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ImageDimension, unsigned int, ::itk::GetImageDimension< TInputImage>::ImageDimension)
itk::RidgeExtractor::itkTypeMacro	.\itkRidgeExtractor.h	/^  itkTypeMacro(RidgeExtractor, Object);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(RidgeExtractor, Object)
itk::RidgeExtractor::m_DataMask	.\itkRidgeExtractor.h	/^  MaskType::Pointer  m_DataMask;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_DataMax	.\itkRidgeExtractor.h	/^  double           m_DataMax;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_DataMin	.\itkRidgeExtractor.h	/^  double           m_DataMin;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_DataOp	.\itkRidgeExtractor.h	/^  typename Blur3DImageFunction<ImageType>::Pointer m_DataOp;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_DataRange	.\itkRidgeExtractor.h	/^  double           m_DataRange;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_DataSpline	.\itkRidgeExtractor.h	/^  SplineND*                             m_DataSpline;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_DataSpline1D	.\itkRidgeExtractor.h	/^  SplineApproximation1D                 m_DataSpline1D;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_DataSplineOpt	.\itkRidgeExtractor.h	/^  OptParabolicFit1D                     m_DataSplineOpt;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_Debug	.\itkRidgeExtractor.h	/^  bool m_Debug;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_DynamicScale	.\itkRidgeExtractor.h	/^  bool             m_DynamicScale;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_DynamicScaleUsed	.\itkRidgeExtractor.h	/^  double           m_DynamicScaleUsed;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_ExtractBoundMax	.\itkRidgeExtractor.h	/^  IndexType        m_ExtractBoundMax;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_ExtractBoundMin	.\itkRidgeExtractor.h	/^  IndexType        m_ExtractBoundMin;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_IdleCallBack	.\itkRidgeExtractor.h	/^  bool  (*m_IdleCallBack)();$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_Image	.\itkRidgeExtractor.h	/^  ImagePointer    m_Image; $/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_RadiusExtractor	.\itkRidgeExtractor.h	/^  RadiusExtractor<TInputImage> * m_RadiusExtractor;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_RecoveryMax	.\itkRidgeExtractor.h	/^  int              m_RecoveryMax;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_SplineValueFunc	.\itkRidgeExtractor.h	/^  UserFunc<vnl_vector<int> *, double> * m_SplineValueFunc;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_StatusCallBack	.\itkRidgeExtractor.h	/^  void  (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_StepX	.\itkRidgeExtractor.h	/^  double           m_StepX;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_ThreshEV	.\itkRidgeExtractor.h	/^  double           m_ThreshEV;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_ThreshEVRatio	.\itkRidgeExtractor.h	/^  double           m_ThreshEVRatio;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_ThreshEVRatioStart	.\itkRidgeExtractor.h	/^  double           m_ThreshEVRatioStart;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_ThreshP2Q2	.\itkRidgeExtractor.h	/^  double           m_ThreshP2Q2;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_ThreshP2Q2Start	.\itkRidgeExtractor.h	/^  double           m_ThreshP2Q2Start;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_ThreshT	.\itkRidgeExtractor.h	/^  double           m_ThreshT;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_ThreshX	.\itkRidgeExtractor.h	/^  double           m_ThreshX;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_Tube	.\itkRidgeExtractor.h	/^  TubePointer      m_Tube;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_TubeID	.\itkRidgeExtractor.h	/^  int              m_TubeID;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_TubePointCount	.\itkRidgeExtractor.h	/^  int              m_TubePointCount;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_TubePointList	.\itkRidgeExtractor.h	/^  std::list<TubePointType>               m_TubePointList;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_Verbose	.\itkRidgeExtractor.h	/^  bool m_Verbose;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_X	.\itkRidgeExtractor.h	/^  ContinuousIndexType       m_X;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_XD	.\itkRidgeExtractor.h	/^  VectorType       m_XD;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_XH	.\itkRidgeExtractor.h	/^  MatrixType       m_XH;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_XHEVal	.\itkRidgeExtractor.h	/^  VectorType       m_XHEVal;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_XHEVect	.\itkRidgeExtractor.h	/^  MatrixType       m_XHEVect;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_XP	.\itkRidgeExtractor.h	/^  double                    m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_XQ	.\itkRidgeExtractor.h	/^  double                    m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_XR	.\itkRidgeExtractor.h	/^  double                    m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::m_XVal	.\itkRidgeExtractor.h	/^  double                    m_XVal;$/;"	m	class:itk::RidgeExtractor	access:private
itk::RidgeExtractor::operator =	.\itkRidgeExtractor.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::RidgeExtractor	access:protected	signature:(const Self&)
itk::RidgeExtractor::~RidgeExtractor	.\itkRidgeExtractor.h	/^  virtual ~RidgeExtractor();$/;"	p	class:itk::RidgeExtractor	access:protected	signature:()
itk::Spline1D	.\itkSpline1D.h	/^class  Spline1D$/;"	c	namespace:itk
itk::Spline1D::Spline1D	.\itkSpline1D.cxx	/^Spline1D::Spline1D()$/;"	f	class:itk::Spline1D	signature:()
itk::Spline1D::Spline1D	.\itkSpline1D.cxx	/^Spline1D::Spline1D(UserFunc<int, double> *newFuncVal, Optimizer1D *newOpt1D)$/;"	f	class:itk::Spline1D	signature:(UserFunc<int, double> *newFuncVal, Optimizer1D *newOpt1D)
itk::Spline1D::Spline1D	.\itkSpline1D.h	/^  Spline1D();$/;"	p	class:itk::Spline1D	access:public	signature:()
itk::Spline1D::Spline1D	.\itkSpline1D.h	/^  Spline1D(UserFunc<int, double> *newFuncVal, Optimizer1D * newOpt1D);$/;"	p	class:itk::Spline1D	access:public	signature:(UserFunc<int, double> *newFuncVal, Optimizer1D * newOpt1D)
itk::Spline1D::VectorType	.\itkSpline1D.h	/^  typedef vnl_vector<double> VectorType;$/;"	t	class:itk::Spline1D	access:public
itk::Spline1D::cClip	.\itkSpline1D.h	/^  bool    cClip;$/;"	m	class:itk::Spline1D	access:protected
itk::Spline1D::cData	.\itkSpline1D.h	/^  VectorType* cData;$/;"	m	class:itk::Spline1D	access:protected
itk::Spline1D::cDefined	.\itkSpline1D.h	/^  bool    cDefined;$/;"	m	class:itk::Spline1D	access:protected
itk::Spline1D::cFuncVal	.\itkSpline1D.h	/^  UserFunc<int, double> * cFuncVal;$/;"	m	class:itk::Spline1D	access:protected
itk::Spline1D::cGetData	.\itkSpline1D.cxx	/^void Spline1D::cGetData(double x)$/;"	f	class:itk::Spline1D	signature:(double x)
itk::Spline1D::cGetData	.\itkSpline1D.h	/^  void    cGetData(double x);$/;"	p	class:itk::Spline1D	access:protected	signature:(double x)
itk::Spline1D::cNewData	.\itkSpline1D.h	/^  bool    cNewData;$/;"	m	class:itk::Spline1D	access:protected
itk::Spline1D::cOpt1D	.\itkSpline1D.h	/^  Optimizer1D *       cOpt1D;$/;"	m	class:itk::Spline1D	access:protected
itk::Spline1D::cOpt1DDeriv	.\itkSpline1D.h	/^  UserFunc<double, double> *    cOpt1DDeriv;$/;"	m	class:itk::Spline1D	access:protected
itk::Spline1D::cOpt1DVal	.\itkSpline1D.h	/^  UserFunc<double, double> *      cOpt1DVal;$/;"	m	class:itk::Spline1D	access:protected
itk::Spline1D::cXMax	.\itkSpline1D.h	/^  int     cXMax;$/;"	m	class:itk::Spline1D	access:protected
itk::Spline1D::cXMin	.\itkSpline1D.h	/^  int     cXMin;$/;"	m	class:itk::Spline1D	access:protected
itk::Spline1D::clipEdge	.\itkSpline1D.cxx	/^bool Spline1D::clipEdge(void)$/;"	f	class:itk::Spline1D	signature:(void)
itk::Spline1D::clipEdge	.\itkSpline1D.cxx	/^void Spline1D::clipEdge(bool newClip)$/;"	f	class:itk::Spline1D	signature:(bool newClip)
itk::Spline1D::clipEdge	.\itkSpline1D.h	/^  bool    clipEdge();$/;"	p	class:itk::Spline1D	access:public	signature:()
itk::Spline1D::clipEdge	.\itkSpline1D.h	/^  void    clipEdge(bool newClip);$/;"	p	class:itk::Spline1D	access:public	signature:(bool newClip)
itk::Spline1D::curv	.\itkSpline1D.cxx	/^double Spline1D::curv(double x)$/;"	f	class:itk::Spline1D	signature:(double x)
itk::Spline1D::curv	.\itkSpline1D.h	/^  double  curv(double x);$/;"	p	class:itk::Spline1D	access:public	signature:(double x)
itk::Spline1D::dataValue	.\itkSpline1D.h	/^  virtual double  dataValue(VectorType y, double x) = 0;$/;"	p	class:itk::Spline1D	access:public	signature:(VectorType y, double x)
itk::Spline1D::dataValueD	.\itkSpline1D.h	/^  virtual double  dataValueD(VectorType y, double x) = 0;$/;"	p	class:itk::Spline1D	access:public	signature:(VectorType y, double x)
itk::Spline1D::dataValueD2	.\itkSpline1D.h	/^  virtual double  dataValueD2(VectorType y, double x) = 0;$/;"	p	class:itk::Spline1D	access:public	signature:(VectorType y, double x)
itk::Spline1D::dataValueJet	.\itkSpline1D.h	/^  virtual double  dataValueJet(VectorType y, double x, double * d, double * d2) = 0;$/;"	p	class:itk::Spline1D	access:public	signature:(VectorType y, double x, double * d, double * d2)
itk::Spline1D::extreme	.\itkSpline1D.cxx	/^bool Spline1D::extreme(double * extX, double * extVal)$/;"	f	class:itk::Spline1D	signature:(double * extX, double * extVal)
itk::Spline1D::extreme	.\itkSpline1D.h	/^  bool    extreme(double *extX, double *extVal);$/;"	p	class:itk::Spline1D	access:public	signature:(double *extX, double *extVal)
itk::Spline1D::newData	.\itkSpline1D.cxx	/^bool Spline1D::newData(void)$/;"	f	class:itk::Spline1D	signature:(void)
itk::Spline1D::newData	.\itkSpline1D.cxx	/^void Spline1D::newData(bool newNewData)$/;"	f	class:itk::Spline1D	signature:(bool newNewData)
itk::Spline1D::newData	.\itkSpline1D.h	/^  bool    newData();$/;"	p	class:itk::Spline1D	access:public	signature:()
itk::Spline1D::newData	.\itkSpline1D.h	/^  void    newData(bool newNewData);$/;"	p	class:itk::Spline1D	access:public	signature:(bool newNewData)
itk::Spline1D::use	.\itkSpline1D.cxx	/^void Spline1D::use(UserFunc<int, double> *newFuncVal, Optimizer1D *newOpt1D)$/;"	f	class:itk::Spline1D	signature:(UserFunc<int, double> *newFuncVal, Optimizer1D *newOpt1D)
itk::Spline1D::use	.\itkSpline1D.h	/^   void    use(UserFunc<int, double> *newFuncVal, Optimizer1D * newOpt1D);    $/;"	p	class:itk::Spline1D	access:public	signature:(UserFunc<int, double> *newFuncVal, Optimizer1D * newOpt1D)
itk::Spline1D::value	.\itkSpline1D.cxx	/^double Spline1D::value(double x)$/;"	f	class:itk::Spline1D	signature:(double x)
itk::Spline1D::value	.\itkSpline1D.h	/^  double  value(double x);$/;"	p	class:itk::Spline1D	access:public	signature:(double x)
itk::Spline1D::valueD	.\itkSpline1D.cxx	/^double Spline1D::valueD(double x)$/;"	f	class:itk::Spline1D	signature:(double x)
itk::Spline1D::valueD	.\itkSpline1D.h	/^  double  valueD(double x);$/;"	p	class:itk::Spline1D	access:public	signature:(double x)
itk::Spline1D::valueD2	.\itkSpline1D.cxx	/^double Spline1D::valueD2(double x)$/;"	f	class:itk::Spline1D	signature:(double x)
itk::Spline1D::valueD2	.\itkSpline1D.h	/^  double  valueD2(double x);$/;"	p	class:itk::Spline1D	access:public	signature:(double x)
itk::Spline1D::valueJet	.\itkSpline1D.cxx	/^double Spline1D::valueJet(double x, double * d, double * d2)$/;"	f	class:itk::Spline1D	signature:(double x, double * d, double * d2)
itk::Spline1D::valueJet	.\itkSpline1D.h	/^  double  valueJet(double x, double * d, double * d2);$/;"	p	class:itk::Spline1D	access:public	signature:(double x, double * d, double * d2)
itk::Spline1D::xMax	.\itkSpline1D.cxx	/^int Spline1D::xMax(void)$/;"	f	class:itk::Spline1D	signature:(void)
itk::Spline1D::xMax	.\itkSpline1D.cxx	/^void Spline1D::xMax(int newXMax)$/;"	f	class:itk::Spline1D	signature:(int newXMax)
itk::Spline1D::xMax	.\itkSpline1D.h	/^  int     xMax();$/;"	p	class:itk::Spline1D	access:public	signature:()
itk::Spline1D::xMax	.\itkSpline1D.h	/^  void    xMax(int newXMax);$/;"	p	class:itk::Spline1D	access:public	signature:(int newXMax)
itk::Spline1D::xMin	.\itkSpline1D.cxx	/^int Spline1D::xMin(void)$/;"	f	class:itk::Spline1D	signature:(void)
itk::Spline1D::xMin	.\itkSpline1D.cxx	/^void Spline1D::xMin(int newXMin)$/;"	f	class:itk::Spline1D	signature:(int newXMin)
itk::Spline1D::xMin	.\itkSpline1D.h	/^  int     xMin();$/;"	p	class:itk::Spline1D	access:public	signature:()
itk::Spline1D::xMin	.\itkSpline1D.h	/^  void    xMin(int newXMin);$/;"	p	class:itk::Spline1D	access:public	signature:(int newXMin)
itk::Spline1D::~Spline1D	.\itkSpline1D.cxx	/^Spline1D::~Spline1D()$/;"	f	class:itk::Spline1D	signature:()
itk::Spline1D::~Spline1D	.\itkSpline1D.h	/^  virtual ~Spline1D();$/;"	p	class:itk::Spline1D	access:public	signature:()
itk::Spline1DDerivFunc	.\itkSpline1D.cxx	/^class Spline1DDerivFunc : public UserFunc<double, double> {$/;"	c	namespace:itk	file:	inherits:UserFunc
itk::Spline1DDerivFunc::Spline1DDerivFunc	.\itkSpline1D.cxx	/^    Spline1DDerivFunc(Spline1D * newSpline)$/;"	f	class:itk::Spline1DDerivFunc	access:public	signature:(Spline1D * newSpline)
itk::Spline1DDerivFunc::spline	.\itkSpline1D.cxx	/^    Spline1D * spline;$/;"	m	class:itk::Spline1DDerivFunc	file:	access:private
itk::Spline1DDerivFunc::value	.\itkSpline1D.cxx	/^    double value(double x)$/;"	f	class:itk::Spline1DDerivFunc	access:public	signature:(double x)
itk::Spline1DValFunc	.\itkSpline1D.cxx	/^class Spline1DValFunc : public UserFunc<double, double> {$/;"	c	namespace:itk	file:	inherits:UserFunc
itk::Spline1DValFunc::Spline1DValFunc	.\itkSpline1D.cxx	/^    Spline1DValFunc(Spline1D * newSpline)$/;"	f	class:itk::Spline1DValFunc	access:public	signature:(Spline1D * newSpline)
itk::Spline1DValFunc::spline	.\itkSpline1D.cxx	/^    Spline1D * spline;$/;"	m	class:itk::Spline1DValFunc	file:	access:private
itk::Spline1DValFunc::value	.\itkSpline1D.cxx	/^    double value(double x)$/;"	f	class:itk::Spline1DValFunc	access:public	signature:(double x)
itk::SplineApproximation1D	.\itkSplineApproximation1D.h	/^class SplineApproximation1D : public Spline1D$/;"	c	namespace:itk	inherits:Spline1D
itk::SplineApproximation1D::SplineApproximation1D	.\itkSplineApproximation1D.cxx	/^SplineApproximation1D::SplineApproximation1D()$/;"	f	class:itk::SplineApproximation1D	signature:()
itk::SplineApproximation1D::SplineApproximation1D	.\itkSplineApproximation1D.cxx	/^SplineApproximation1D::SplineApproximation1D(UserFunc<int, double> *newFunval, Optimizer1D *newOpt1D)$/;"	f	class:itk::SplineApproximation1D	signature:(UserFunc<int, double> *newFunval, Optimizer1D *newOpt1D)
itk::SplineApproximation1D::SplineApproximation1D	.\itkSplineApproximation1D.h	/^  SplineApproximation1D();$/;"	p	class:itk::SplineApproximation1D	access:public	signature:()
itk::SplineApproximation1D::SplineApproximation1D	.\itkSplineApproximation1D.h	/^  SplineApproximation1D(UserFunc<int, double> *newFunval, Optimizer1D * newOpt1D);$/;"	p	class:itk::SplineApproximation1D	access:public	signature:(UserFunc<int, double> *newFunval, Optimizer1D * newOpt1D)
itk::SplineApproximation1D::VectorType	.\itkSplineApproximation1D.h	/^  typedef vnl_vector<double> VectorType;$/;"	t	class:itk::SplineApproximation1D	access:public
itk::SplineApproximation1D::cSplineApproximation1DMatrix	.\itkSplineApproximation1D.h	/^  float cSplineApproximation1DMatrix[4][4];$/;"	m	class:itk::SplineApproximation1D	access:protected
itk::SplineApproximation1D::cSplineApproximation1DMatrixConst	.\itkSplineApproximation1D.h	/^  float cSplineApproximation1DMatrixConst;$/;"	m	class:itk::SplineApproximation1D	access:protected
itk::SplineApproximation1D::dataValue	.\itkSplineApproximation1D.cxx	/^double SplineApproximation1D::dataValue(VectorType y, double x)$/;"	f	class:itk::SplineApproximation1D	signature:(VectorType y, double x)
itk::SplineApproximation1D::dataValue	.\itkSplineApproximation1D.h	/^  double  dataValue(VectorType y, double x);$/;"	p	class:itk::SplineApproximation1D	access:public	signature:(VectorType y, double x)
itk::SplineApproximation1D::dataValueD	.\itkSplineApproximation1D.cxx	/^double SplineApproximation1D::dataValueD(VectorType y, double x)$/;"	f	class:itk::SplineApproximation1D	signature:(VectorType y, double x)
itk::SplineApproximation1D::dataValueD	.\itkSplineApproximation1D.h	/^  double  dataValueD(VectorType y, double x);$/;"	p	class:itk::SplineApproximation1D	access:public	signature:(VectorType y, double x)
itk::SplineApproximation1D::dataValueD2	.\itkSplineApproximation1D.cxx	/^double SplineApproximation1D::dataValueD2(VectorType y, double x)$/;"	f	class:itk::SplineApproximation1D	signature:(VectorType y, double x)
itk::SplineApproximation1D::dataValueD2	.\itkSplineApproximation1D.h	/^  double  dataValueD2(VectorType y, double x);$/;"	p	class:itk::SplineApproximation1D	access:public	signature:(VectorType y, double x)
itk::SplineApproximation1D::dataValueJet	.\itkSplineApproximation1D.cxx	/^double SplineApproximation1D::dataValueJet(VectorType y, double x, double *d, double *d2)$/;"	f	class:itk::SplineApproximation1D	signature:(VectorType y, double x, double *d, double *d2)
itk::SplineApproximation1D::dataValueJet	.\itkSplineApproximation1D.h	/^  double  dataValueJet(VectorType y, double x, double *d, double *d2);$/;"	p	class:itk::SplineApproximation1D	access:public	signature:(VectorType y, double x, double *d, double *d2)
itk::SplineApproximation1D::~SplineApproximation1D	.\itkSplineApproximation1D.cxx	/^SplineApproximation1D::~SplineApproximation1D()$/;"	f	class:itk::SplineApproximation1D	signature:()
itk::SplineApproximation1D::~SplineApproximation1D	.\itkSplineApproximation1D.h	/^  virtual ~SplineApproximation1D();$/;"	p	class:itk::SplineApproximation1D	access:public	signature:()
itk::SplineND	.\itkSplineND.h	/^class SplineND$/;"	c	namespace:itk
itk::SplineND::ImageType	.\itkSplineND.h	/^  typedef Image<double,3>   ImageType;$/;"	t	class:itk::SplineND	access:public
itk::SplineND::IntVectorType	.\itkSplineND.h	/^  typedef vnl_vector<int> IntVectorType;$/;"	t	class:itk::SplineND	access:public
itk::SplineND::MatrixType	.\itkSplineND.h	/^  typedef vnl_matrix<double> MatrixType;$/;"	t	class:itk::SplineND	access:public
itk::SplineND::SplineND	.\itkSplineND.cxx	/^  SplineND::SplineND()$/;"	f	class:itk::SplineND	signature:()
itk::SplineND::SplineND	.\itkSplineND.cxx	/^  SplineND::SplineND(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOpt1D)$/;"	f	class:itk::SplineND	signature:(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOpt1D)
itk::SplineND::SplineND	.\itkSplineND.h	/^  SplineND();$/;"	p	class:itk::SplineND	access:public	signature:()
itk::SplineND::SplineND	.\itkSplineND.h	/^  SplineND(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOptND);$/;"	p	class:itk::SplineND	access:public	signature:(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOptND)
itk::SplineND::VectorRefType	.\itkSplineND.h	/^  typedef vnl_vector_ref<double> VectorRefType; $/;"	t	class:itk::SplineND	access:public
itk::SplineND::VectorType	.\itkSplineND.h	/^  typedef vnl_vector<double> VectorType;$/;"	t	class:itk::SplineND	access:public
itk::SplineND::cClip	.\itkSplineND.h	/^  bool    cClip;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cD	.\itkSplineND.h	/^  VectorType *cD;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cData	.\itkSplineND.h	/^  ImageType::Pointer  cData;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cData1D	.\itkSplineND.h	/^  VectorType*  cData1D;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cDataWS	.\itkSplineND.h	/^  ImageType::Pointer  cDataWS;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cDefined	.\itkSplineND.h	/^  bool    cDefined;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cFuncVal	.\itkSplineND.h	/^  UserFunc<IntVectorType*, double> * cFuncVal;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cGetData	.\itkSplineND.cxx	/^  void SplineND::cGetData(VectorType & x)$/;"	f	class:itk::SplineND	signature:(VectorType & x)
itk::SplineND::cGetData	.\itkSplineND.h	/^  void    cGetData(VectorType &x);  $/;"	p	class:itk::SplineND	access:protected	signature:(VectorType &x)
itk::SplineND::cH	.\itkSplineND.h	/^  MatrixType *cH;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cNDims	.\itkSplineND.h	/^  unsigned int    cNDims;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cNewData	.\itkSplineND.h	/^  bool            cNewData;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cOptND	.\itkSplineND.h	/^  OptimizerND *   cOptND;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cOptNDDeriv	.\itkSplineND.h	/^  UserFunc<VectorType *, VectorType &> * cOptNDDeriv;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cOptNDVal	.\itkSplineND.h	/^  UserFunc<VectorType *, double> * cOptNDVal;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cSpline1D	.\itkSplineND.h	/^  Spline1D *      cSpline1D;     $/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cXMax	.\itkSplineND.h	/^  IntVectorType *   cXMax;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cXMin	.\itkSplineND.h	/^  IntVectorType *   cXMin;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::cXi	.\itkSplineND.h	/^  IntVectorType *   cXi;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::clipEdge	.\itkSplineND.cxx	/^  bool SplineND::clipEdge(void)$/;"	f	class:itk::SplineND	signature:(void)
itk::SplineND::clipEdge	.\itkSplineND.cxx	/^  void SplineND::clipEdge(bool newClip)$/;"	f	class:itk::SplineND	signature:(bool newClip)
itk::SplineND::clipEdge	.\itkSplineND.h	/^  bool    clipEdge();$/;"	p	class:itk::SplineND	access:public	signature:()
itk::SplineND::clipEdge	.\itkSplineND.h	/^  void    clipEdge(bool newClip);$/;"	p	class:itk::SplineND	access:public	signature:(bool newClip)
itk::SplineND::extreme	.\itkSplineND.cxx	/^  bool SplineND::extreme(VectorRefType extX, double * extVal)$/;"	f	class:itk::SplineND	signature:(VectorRefType extX, double * extVal)
itk::SplineND::extreme	.\itkSplineND.cxx	/^  bool SplineND::extreme(VectorRefType extX, double *extVal, VectorType &dir)$/;"	f	class:itk::SplineND	signature:(VectorRefType extX, double *extVal, VectorType &dir)
itk::SplineND::extreme	.\itkSplineND.cxx	/^  bool SplineND::extreme(VectorRefType extX, double *extVal, unsigned int n, MatrixType &dirs)$/;"	f	class:itk::SplineND	signature:(VectorRefType extX, double *extVal, unsigned int n, MatrixType &dirs)
itk::SplineND::extreme	.\itkSplineND.h	/^  bool    extreme(VectorRefType extX, double * extVal);$/;"	p	class:itk::SplineND	access:public	signature:(VectorRefType extX, double * extVal)
itk::SplineND::extreme	.\itkSplineND.h	/^  bool    extreme(VectorRefType extX, double * extVal, VectorType &dir);$/;"	p	class:itk::SplineND	access:public	signature:(VectorRefType extX, double * extVal, VectorType &dir)
itk::SplineND::extreme	.\itkSplineND.h	/^  bool    extreme(VectorRefType extX, double * extVal, unsigned int n, MatrixType &dirs);$/;"	p	class:itk::SplineND	access:public	signature:(VectorRefType extX, double * extVal, unsigned int n, MatrixType &dirs)
itk::SplineND::extremeConjGrad	.\itkSplineND.cxx	/^  bool SplineND::extremeConjGrad(VectorType & extX, double * extVal)$/;"	f	class:itk::SplineND	signature:(VectorType & extX, double * extVal)
itk::SplineND::extremeConjGrad	.\itkSplineND.h	/^  bool    extremeConjGrad(VectorType & extX, double * extVal);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & extX, double * extVal)
itk::SplineND::hessian	.\itkSplineND.cxx	/^  SplineND::MatrixType & SplineND::hessian(VectorType & x)$/;"	f	class:itk::SplineND	signature:(VectorType & x)
itk::SplineND::hessian	.\itkSplineND.h	/^  MatrixType & hessian(VectorType & x);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & x)
itk::SplineND::itkStaticConstMacro	.\itkSplineND.h	/^  itkStaticConstMacro(ImageDimension, unsigned int, 3);$/;"	p	class:itk::SplineND	access:public	signature:(ImageDimension, unsigned int, 3)
itk::SplineND::m_debug	.\itkSplineND.h	/^  bool m_debug;$/;"	m	class:itk::SplineND	access:protected
itk::SplineND::newData	.\itkSplineND.cxx	/^  bool SplineND::newData(void)$/;"	f	class:itk::SplineND	signature:(void)
itk::SplineND::newData	.\itkSplineND.cxx	/^  void SplineND::newData(bool newNewData)$/;"	f	class:itk::SplineND	signature:(bool newNewData)
itk::SplineND::newData	.\itkSplineND.h	/^  bool    newData();$/;"	p	class:itk::SplineND	access:public	signature:()
itk::SplineND::newData	.\itkSplineND.h	/^  void    newData(bool newNewData);$/;"	p	class:itk::SplineND	access:public	signature:(bool newNewData)
itk::SplineND::use	.\itkSplineND.cxx	/^  void SplineND::use(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOpt1D)$/;"	f	class:itk::SplineND	signature:(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOpt1D)
itk::SplineND::use	.\itkSplineND.h	/^  void    use(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOptND);$/;"	p	class:itk::SplineND	access:public	signature:(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOptND)
itk::SplineND::value	.\itkSplineND.cxx	/^  double SplineND::value(VectorType & x)$/;"	f	class:itk::SplineND	signature:(VectorType & x)
itk::SplineND::value	.\itkSplineND.h	/^  double              value(VectorType & x);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & x)
itk::SplineND::valueD	.\itkSplineND.cxx	/^  SplineND::VectorType & SplineND::valueD(VectorType & x)$/;"	f	class:itk::SplineND	signature:(VectorType & x)
itk::SplineND::valueD	.\itkSplineND.cxx	/^  double SplineND::valueD(VectorType & x, IntVectorType & dx)$/;"	f	class:itk::SplineND	signature:(VectorType & x, IntVectorType & dx)
itk::SplineND::valueD	.\itkSplineND.h	/^  VectorType &    valueD(VectorType & x);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & x)
itk::SplineND::valueD	.\itkSplineND.h	/^  double              valueD(VectorType & x, IntVectorType & dx);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & x, IntVectorType & dx)
itk::SplineND::valueJet	.\itkSplineND.cxx	/^  double SplineND::valueJet(VectorRefType x, VectorRefType d, MatrixType & h)$/;"	f	class:itk::SplineND	signature:(VectorRefType x, VectorRefType d, MatrixType & h)
itk::SplineND::valueJet	.\itkSplineND.h	/^  double   valueJet(VectorRefType x, VectorRefType d, MatrixType & h);$/;"	p	class:itk::SplineND	access:public	signature:(VectorRefType x, VectorRefType d, MatrixType & h)
itk::SplineND::valueVDD2	.\itkSplineND.cxx	/^  double SplineND::valueVDD2(VectorType & x, VectorType & d, VectorType & d2)$/;"	f	class:itk::SplineND	signature:(VectorType & x, VectorType & d, VectorType & d2)
itk::SplineND::valueVDD2	.\itkSplineND.h	/^  double  valueVDD2(VectorType & x, VectorType & d, VectorType & d2);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & x, VectorType & d, VectorType & d2)
itk::SplineND::xMax	.\itkSplineND.cxx	/^  SplineND::IntVectorType & SplineND::xMax(void)$/;"	f	class:itk::SplineND	signature:(void)
itk::SplineND::xMax	.\itkSplineND.cxx	/^  void SplineND::xMax(IntVectorType newXMax)$/;"	f	class:itk::SplineND	signature:(IntVectorType newXMax)
itk::SplineND::xMax	.\itkSplineND.h	/^  IntVectorType &   xMax();$/;"	p	class:itk::SplineND	access:public	signature:()
itk::SplineND::xMax	.\itkSplineND.h	/^  void            xMax(IntVectorType newXMax);$/;"	p	class:itk::SplineND	access:public	signature:(IntVectorType newXMax)
itk::SplineND::xMin	.\itkSplineND.cxx	/^  SplineND::IntVectorType & SplineND::xMin(void)$/;"	f	class:itk::SplineND	signature:(void)
itk::SplineND::xMin	.\itkSplineND.cxx	/^  void SplineND::xMin(IntVectorType newXMin)$/;"	f	class:itk::SplineND	signature:(IntVectorType newXMin)
itk::SplineND::xMin	.\itkSplineND.h	/^  IntVectorType &   xMin();$/;"	p	class:itk::SplineND	access:public	signature:()
itk::SplineND::xMin	.\itkSplineND.h	/^  void            xMin(IntVectorType newXMin);$/;"	p	class:itk::SplineND	access:public	signature:(IntVectorType newXMin)
itk::SplineND::~SplineND	.\itkSplineND.cxx	/^  SplineND::~SplineND()$/;"	f	class:itk::SplineND	signature:()
itk::SplineND::~SplineND	.\itkSplineND.h	/^  virtual ~SplineND();$/;"	p	class:itk::SplineND	access:public	signature:()
itk::SplineNDDerivFunc	.\itkSplineND.cxx	/^  class SplineNDDerivFunc : public UserFunc< vnl_vector<double>*, vnl_vector<double> & > $/;"	c	namespace:itk	file:	inherits:UserFunc
itk::SplineNDDerivFunc::SplineNDDerivFunc	.\itkSplineND.cxx	/^  SplineNDDerivFunc(SplineND * newSpline)$/;"	f	class:itk::SplineNDDerivFunc	access:public	signature:(SplineND * newSpline)
itk::SplineNDDerivFunc::cSpline	.\itkSplineND.cxx	/^  SplineND * cSpline;$/;"	m	class:itk::SplineNDDerivFunc	file:	access:private
itk::SplineNDDerivFunc::value	.\itkSplineND.cxx	/^  vnl_vector<double> & value(vnl_vector<double>* x)$/;"	f	class:itk::SplineNDDerivFunc	access:public	signature:(vnl_vector<double>* x)
itk::SplineNDValFunc	.\itkSplineND.cxx	/^  class SplineNDValFunc : public UserFunc<vnl_vector<double> *, double> $/;"	c	namespace:itk	file:	inherits:UserFunc
itk::SplineNDValFunc::SplineNDValFunc	.\itkSplineND.cxx	/^  SplineNDValFunc(SplineND * newSpline)$/;"	f	class:itk::SplineNDValFunc	access:public	signature:(SplineND * newSpline)
itk::SplineNDValFunc::cSpline	.\itkSplineND.cxx	/^  SplineND * cSpline;$/;"	m	class:itk::SplineNDValFunc	file:	access:private
itk::SplineNDValFunc::value	.\itkSplineND.cxx	/^  double value(vnl_vector<double>* x)$/;"	f	class:itk::SplineNDValFunc	access:public	signature:(vnl_vector<double>* x)
itk::Tqli	.\itkMatrixMath.h	/^template <class T> void Tqli (vnl_vector<T> &diag, vnl_vector<T> &subD, vnl_matrix<T> &mat);$/;"	p	namespace:itk	signature:(vnl_vector<T> &diag, vnl_vector<T> &subD, vnl_matrix<T> &mat)
itk::TriDiag	.\itkMatrixMath.h	/^template <class T> void TriDiag(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD);$/;"	p	namespace:itk	signature:(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD)
itk::TriDiag2D	.\itkMatrixMath.h	/^template <class T> void TriDiag2D(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD);$/;"	p	namespace:itk	signature:(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD)
itk::TriDiag3D	.\itkMatrixMath.h	/^template <class T> void TriDiag3D(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD);$/;"	p	namespace:itk	signature:(vnl_matrix<T> &mat, vnl_vector<T> &diag, vnl_vector<T> &subD)
itk::TubeExtractor	.\itkTubeExtractor.h	/^class ITK_EXPORT TubeExtractor : public Object $/;"	c	namespace:itk	inherits:Object
itk::TubeExtractor2D	.\2D\itkTubeExtractor2D.h	/^class ITK_EXPORT TubeExtractor2D : public Object $/;"	c	namespace:itk	inherits:Object
itk::TubeExtractor2D::AbortProcess	.\2D\itkTubeExtractor2D.h	/^  void   AbortProcess(bool (*abortProcess)());$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(bool (abortProcess)))
itk::TubeExtractor2D::ConstPointer	.\2D\itkTubeExtractor2D.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::DeleteTube	.\2D\itkTubeExtractor2D.h	/^  bool DeleteTube(TubeType* tube);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(TubeType* tube)
itk::TubeExtractor2D::ExtractRidge	.\2D\itkTubeExtractor2D.h	/^  bool ExtractRidge(void); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
itk::TubeExtractor2D::ExtractRidge	.\2D\itkTubeExtractor2D.h	/^  void ExtractRidge(bool extractRidge); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(bool extractRidge)
itk::TubeExtractor2D::ExtractTube	.\2D\itkTubeExtractor2D.h	/^  bool ExtractTube(float x, float y, unsigned int tubeID); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(float x, float y, unsigned int tubeID)
itk::TubeExtractor2D::ExtractValley	.\2D\itkTubeExtractor2D.h	/^  bool ExtractValley(void); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
itk::TubeExtractor2D::ExtractValley	.\2D\itkTubeExtractor2D.h	/^  void ExtractValley(bool extractValley); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(bool extractValley)
itk::TubeExtractor2D::GetDataMax	.\2D\itkTubeExtractor2D.h	/^  double GetDataMax(void); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
itk::TubeExtractor2D::GetDataMin	.\2D\itkTubeExtractor2D.h	/^  double GetDataMin(void); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
itk::TubeExtractor2D::GetLastPosition	.\2D\itkTubeExtractor2D.h	/^  VectorType* GetLastPosition(void);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
itk::TubeExtractor2D::GetLastTube	.\2D\itkTubeExtractor2D.h	/^  TubePointer GetLastTube(void);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
itk::TubeExtractor2D::GetRadius	.\2D\itkTubeExtractor2D.h	/^  double GetRadius(void); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
itk::TubeExtractor2D::GetRadiusOp	.\2D\itkTubeExtractor2D.h	/^  typename RadiusExtractor2D<TInputImage>::Pointer GetRadiusOp(void);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
itk::TubeExtractor2D::GetRidgeOp	.\2D\itkTubeExtractor2D.h	/^  typename RidgeExtractor2D<TInputImage>::Pointer GetRidgeOp(void);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void)
itk::TubeExtractor2D::IdleCallBack	.\2D\itkTubeExtractor2D.h	/^  void   IdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(bool (idleCallBack)))
itk::TubeExtractor2D::ImageConstPointer	.\2D\itkTubeExtractor2D.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::ImageDimension	.\2D\itkTubeExtractor2D.h	/^  enum {ImageDimension = ImageType::ImageDimension};$/;"	e	enum:itk::TubeExtractor2D::__anon3
itk::TubeExtractor2D::ImagePointer	.\2D\itkTubeExtractor2D.h	/^  typedef typename TInputImage::Pointer  ImagePointer;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::ImageType	.\2D\itkTubeExtractor2D.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::NewTubeCallBack	.\2D\itkTubeExtractor2D.h	/^  void   NewTubeCallBack(void (*newTubeCallBack)(Tube *));$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void (*newTubeCallBack)(Tube *))
itk::TubeExtractor2D::PixelType	.\2D\itkTubeExtractor2D.h	/^  typedef typename TInputImage::PixelType PixelType;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::Pointer	.\2D\itkTubeExtractor2D.h	/^  typedef SmartPointer<Self>   Pointer;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::Self	.\2D\itkTubeExtractor2D.h	/^  typedef TubeExtractor2D Self;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::SetColor	.\2D\itkTubeExtractor2D.h	/^  void SetColor(float* color);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(float* color)
itk::TubeExtractor2D::SetDataMax	.\2D\itkTubeExtractor2D.h	/^  void SetDataMax(double dataMax); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(double dataMax)
itk::TubeExtractor2D::SetDataMin	.\2D\itkTubeExtractor2D.h	/^  void SetDataMin(double dataMin); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(double dataMin)
itk::TubeExtractor2D::SetInputImage	.\2D\itkTubeExtractor2D.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(ImagePointer inputImage)
itk::TubeExtractor2D::SetModeRetina	.\2D\itkTubeExtractor2D.h	/^  void SetModeRetina(bool modeRetina);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(bool modeRetina)
itk::TubeExtractor2D::SetRadius	.\2D\itkTubeExtractor2D.h	/^  void SetRadius(double radius); $/;"	p	class:itk::TubeExtractor2D	access:public	signature:(double radius)
itk::TubeExtractor2D::StatusCallBack	.\2D\itkTubeExtractor2D.h	/^  void   StatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(void (*statusCallBack)(char *, char *, int))
itk::TubeExtractor2D::Superclass	.\2D\itkTubeExtractor2D.h	/^  typedef Object  Superclass;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::TubeExtractor2D	.\2D\itkTubeExtractor2D.h	/^  TubeExtractor2D();$/;"	p	class:itk::TubeExtractor2D	access:protected	signature:()
itk::TubeExtractor2D::TubeExtractor2D	.\2D\itkTubeExtractor2D.h	/^  TubeExtractor2D(const Self&) {}$/;"	f	class:itk::TubeExtractor2D	access:protected	signature:(const Self&)
itk::TubeExtractor2D::TubePointType	.\2D\itkTubeExtractor2D.h	/^  typedef typename TubeType::TubePointType TubePointType;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::TubePointer	.\2D\itkTubeExtractor2D.h	/^  typedef typename TubeType::Pointer TubePointer;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::TubeType	.\2D\itkTubeExtractor2D.h	/^  typedef VesselTubeSpatialObject<2> TubeType;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::VectorType	.\2D\itkTubeExtractor2D.h	/^  typedef itk::Vector<double,2> VectorType;$/;"	t	class:itk::TubeExtractor2D	access:public
itk::TubeExtractor2D::itkGetConstObjectMacro	.\2D\itkTubeExtractor2D.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(Image,ImageType)
itk::TubeExtractor2D::itkGetMacro	.\2D\itkTubeExtractor2D.h	/^  itkGetMacro(Color,float*);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(Color,float*)
itk::TubeExtractor2D::itkNewMacro	.\2D\itkTubeExtractor2D.h	/^  itkNewMacro(Self);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(Self)
itk::TubeExtractor2D::itkTypeMacro	.\2D\itkTubeExtractor2D.h	/^  itkTypeMacro(Self, Object);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(Self, Object)
itk::TubeExtractor2D::m_AbortProcess	.\2D\itkTubeExtractor2D.h	/^  bool (*m_AbortProcess)();$/;"	m	class:itk::TubeExtractor2D	access:protected
itk::TubeExtractor2D::m_Color	.\2D\itkTubeExtractor2D.h	/^  float* m_Color;$/;"	m	class:itk::TubeExtractor2D	access:private
itk::TubeExtractor2D::m_Debug	.\2D\itkTubeExtractor2D.h	/^  bool m_Debug;$/;"	m	class:itk::TubeExtractor2D	access:private
itk::TubeExtractor2D::m_IdleCallBack	.\2D\itkTubeExtractor2D.h	/^  bool (*m_IdleCallBack)();$/;"	m	class:itk::TubeExtractor2D	access:protected
itk::TubeExtractor2D::m_Image	.\2D\itkTubeExtractor2D.h	/^  ImagePointer    m_Image;   $/;"	m	class:itk::TubeExtractor2D	access:private
itk::TubeExtractor2D::m_NewTubeCallBack	.\2D\itkTubeExtractor2D.h	/^  void (*m_NewTubeCallBack)(TubeType *);$/;"	m	class:itk::TubeExtractor2D	access:protected
itk::TubeExtractor2D::m_RadiusOp	.\2D\itkTubeExtractor2D.h	/^  typename RadiusExtractor2D<ImageType>::Pointer m_RadiusOp;$/;"	m	class:itk::TubeExtractor2D	access:protected
itk::TubeExtractor2D::m_RidgeOp	.\2D\itkTubeExtractor2D.h	/^  typename RidgeExtractor2D<ImageType>::Pointer  m_RidgeOp;$/;"	m	class:itk::TubeExtractor2D	access:protected
itk::TubeExtractor2D::m_StatusCallBack	.\2D\itkTubeExtractor2D.h	/^  void (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::TubeExtractor2D	access:protected
itk::TubeExtractor2D::m_Tube	.\2D\itkTubeExtractor2D.h	/^   TubePointer  m_Tube;$/;"	m	class:itk::TubeExtractor2D	access:protected
itk::TubeExtractor2D::m_X	.\2D\itkTubeExtractor2D.h	/^  VectorType *m_X;$/;"	m	class:itk::TubeExtractor2D	access:private
itk::TubeExtractor2D::operator =	.\2D\itkTubeExtractor2D.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::TubeExtractor2D	access:protected	signature:(const Self&)
itk::TubeExtractor2D::~TubeExtractor2D	.\2D\itkTubeExtractor2D.h	/^  virtual ~TubeExtractor2D();$/;"	p	class:itk::TubeExtractor2D	access:protected	signature:()
itk::TubeExtractor::AbortProcess	.\itkTubeExtractor.h	/^  void   AbortProcess(bool (*abortProcess)());$/;"	p	class:itk::TubeExtractor	access:public	signature:(bool (abortProcess)))
itk::TubeExtractor::ConstPointer	.\itkTubeExtractor.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::ContinuousIndexType	.\itkTubeExtractor.h	/^  typedef typename ContinuousIndex<double, 3>  ContinuousIndexType;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::DeleteTube	.\itkTubeExtractor.h	/^  bool DeleteTube(TubeType* tube);$/;"	p	class:itk::TubeExtractor	access:public	signature:(TubeType* tube)
itk::TubeExtractor::ExtractRidge	.\itkTubeExtractor.h	/^  bool ExtractRidge(void); $/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
itk::TubeExtractor::ExtractRidge	.\itkTubeExtractor.h	/^  void ExtractRidge(bool extractRidge); $/;"	p	class:itk::TubeExtractor	access:public	signature:(bool extractRidge)
itk::TubeExtractor::ExtractTube	.\itkTubeExtractor.h	/^  bool ExtractTube(float x, float y, float z, unsigned int tubeID); $/;"	p	class:itk::TubeExtractor	access:public	signature:(float x, float y, float z, unsigned int tubeID)
itk::TubeExtractor::ExtractValley	.\itkTubeExtractor.h	/^  bool ExtractValley(void); $/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
itk::TubeExtractor::ExtractValley	.\itkTubeExtractor.h	/^  void ExtractValley(bool extractValley); $/;"	p	class:itk::TubeExtractor	access:public	signature:(bool extractValley)
itk::TubeExtractor::GetDataMax	.\itkTubeExtractor.h	/^  double GetDataMax(void); $/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
itk::TubeExtractor::GetDataMin	.\itkTubeExtractor.h	/^  double GetDataMin(void); $/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
itk::TubeExtractor::GetLastPosition	.\itkTubeExtractor.h	/^  ContinuousIndexType   GetLastPosition(void);$/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
itk::TubeExtractor::GetLastTube	.\itkTubeExtractor.h	/^  TubePointer GetLastTube(void);$/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
itk::TubeExtractor::GetRadius	.\itkTubeExtractor.h	/^  double GetRadius(void); $/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
itk::TubeExtractor::GetRadiusOp	.\itkTubeExtractor.h	/^  typename RadiusExtractor<ImageType>::Pointer GetRadiusOp(void);$/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
itk::TubeExtractor::GetRidgeOp	.\itkTubeExtractor.h	/^  typename RidgeExtractor<ImageType>::Pointer GetRidgeOp(void);$/;"	p	class:itk::TubeExtractor	access:public	signature:(void)
itk::TubeExtractor::IdleCallBack	.\itkTubeExtractor.h	/^  void   IdleCallBack(bool (*idleCallBack)());$/;"	p	class:itk::TubeExtractor	access:public	signature:(bool (idleCallBack)))
itk::TubeExtractor::ImageConstPointer	.\itkTubeExtractor.h	/^  typedef typename ImageType::ConstPointer ImageConstPointer;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::ImagePointer	.\itkTubeExtractor.h	/^  typedef typename ImageType::Pointer      ImagePointer;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::ImageType	.\itkTubeExtractor.h	/^  typedef TInputImage                        ImageType;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::NewTubeCallBack	.\itkTubeExtractor.h	/^  void   NewTubeCallBack(void (*newTubeCallBack)(TubeType *));$/;"	p	class:itk::TubeExtractor	access:public	signature:(void (*newTubeCallBack)(TubeType *))
itk::TubeExtractor::PixelType	.\itkTubeExtractor.h	/^  typedef typename ImageType::PixelType    PixelType;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::Pointer	.\itkTubeExtractor.h	/^  typedef SmartPointer<Self>        Pointer;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::Self	.\itkTubeExtractor.h	/^  typedef TubeExtractor             Self;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::SetColor	.\itkTubeExtractor.h	/^  void SetColor(float* color);$/;"	p	class:itk::TubeExtractor	access:public	signature:(float* color)
itk::TubeExtractor::SetDataMax	.\itkTubeExtractor.h	/^  void SetDataMax(double dataMax); $/;"	p	class:itk::TubeExtractor	access:public	signature:(double dataMax)
itk::TubeExtractor::SetDataMin	.\itkTubeExtractor.h	/^  void SetDataMin(double dataMin); $/;"	p	class:itk::TubeExtractor	access:public	signature:(double dataMin)
itk::TubeExtractor::SetInputImage	.\itkTubeExtractor.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::TubeExtractor	access:public	signature:(ImagePointer inputImage)
itk::TubeExtractor::SetRadius	.\itkTubeExtractor.h	/^  void SetRadius(double radius); $/;"	p	class:itk::TubeExtractor	access:public	signature:(double radius)
itk::TubeExtractor::StatusCallBack	.\itkTubeExtractor.h	/^  void   StatusCallBack(void (*statusCallBack)(char *, char *, int));$/;"	p	class:itk::TubeExtractor	access:public	signature:(void (*statusCallBack)(char *, char *, int))
itk::TubeExtractor::Superclass	.\itkTubeExtractor.h	/^  typedef Object                    Superclass;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::TubeExtractor	.\itkTubeExtractor.h	/^  TubeExtractor();$/;"	p	class:itk::TubeExtractor	access:protected	signature:()
itk::TubeExtractor::TubeExtractor	.\itkTubeExtractor.h	/^  TubeExtractor(const Self&) {}$/;"	f	class:itk::TubeExtractor	access:protected	signature:(const Self&)
itk::TubeExtractor::TubePointType	.\itkTubeExtractor.h	/^  typedef typename TubeType::TubePointType   TubePointType;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::TubePointer	.\itkTubeExtractor.h	/^  typedef typename TubeType::Pointer         TubePointer;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::TubeType	.\itkTubeExtractor.h	/^  typedef VesselTubeSpatialObject<3>         TubeType;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::VectorType	.\itkTubeExtractor.h	/^  typedef itk::Vector<double, 3>                     VectorType;$/;"	t	class:itk::TubeExtractor	access:public
itk::TubeExtractor::itkGetConstObjectMacro	.\itkTubeExtractor.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::TubeExtractor	access:public	signature:(Image,ImageType)
itk::TubeExtractor::itkGetMacro	.\itkTubeExtractor.h	/^  itkGetMacro(Color,float*);$/;"	p	class:itk::TubeExtractor	access:public	signature:(Color,float*)
itk::TubeExtractor::itkNewMacro	.\itkTubeExtractor.h	/^  itkNewMacro(TubeExtractor);$/;"	p	class:itk::TubeExtractor	access:public	signature:(TubeExtractor)
itk::TubeExtractor::itkStaticConstMacro	.\itkTubeExtractor.h	/^  itkStaticConstMacro(ImageDimension, unsigned int,$/;"	p	class:itk::TubeExtractor	access:public	signature:(ImageDimension, unsigned int, ::itk::GetImageDimension<TInputImage>::ImageDimension)
itk::TubeExtractor::itkTypeMacro	.\itkTubeExtractor.h	/^  itkTypeMacro(TubeExtractor, Object);$/;"	p	class:itk::TubeExtractor	access:public	signature:(TubeExtractor, Object)
itk::TubeExtractor::m_AbortProcess	.\itkTubeExtractor.h	/^  bool (*m_AbortProcess)();$/;"	m	class:itk::TubeExtractor	access:protected
itk::TubeExtractor::m_Color	.\itkTubeExtractor.h	/^  float *                  m_Color;$/;"	m	class:itk::TubeExtractor	access:private
itk::TubeExtractor::m_Debug	.\itkTubeExtractor.h	/^  bool                     m_Debug;$/;"	m	class:itk::TubeExtractor	access:private
itk::TubeExtractor::m_IdleCallBack	.\itkTubeExtractor.h	/^  bool (*m_IdleCallBack)();$/;"	m	class:itk::TubeExtractor	access:protected
itk::TubeExtractor::m_Image	.\itkTubeExtractor.h	/^  ImagePointer             m_Image;   $/;"	m	class:itk::TubeExtractor	access:private
itk::TubeExtractor::m_NewTubeCallBack	.\itkTubeExtractor.h	/^  void (*m_NewTubeCallBack)(TubeType *);$/;"	m	class:itk::TubeExtractor	access:protected
itk::TubeExtractor::m_RadiusOp	.\itkTubeExtractor.h	/^  typename RadiusExtractor<ImageType>::Pointer m_RadiusOp;$/;"	m	class:itk::TubeExtractor	access:protected
itk::TubeExtractor::m_RidgeOp	.\itkTubeExtractor.h	/^  typename RidgeExtractor<ImageType>::Pointer  m_RidgeOp;$/;"	m	class:itk::TubeExtractor	access:protected
itk::TubeExtractor::m_StatusCallBack	.\itkTubeExtractor.h	/^  void (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::TubeExtractor	access:protected
itk::TubeExtractor::m_Tube	.\itkTubeExtractor.h	/^  TubePointer                                  m_Tube;$/;"	m	class:itk::TubeExtractor	access:protected
itk::TubeExtractor::m_X	.\itkTubeExtractor.h	/^  ContinuousIndexType      m_X;$/;"	m	class:itk::TubeExtractor	access:private
itk::TubeExtractor::operator =	.\itkTubeExtractor.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::TubeExtractor	access:protected	signature:(const Self&)
itk::TubeExtractor::~TubeExtractor	.\itkTubeExtractor.h	/^  virtual ~TubeExtractor();$/;"	p	class:itk::TubeExtractor	access:protected	signature:()
itk::TubeNetExtractor	.\itkTubeNetExtractor.h	/^class ITK_EXPORT TubeNetExtractor : public TubeExtractor<TInputImage> $/;"	c	namespace:itk	inherits:TubeExtractor
itk::TubeNetExtractor2D	.\2D\itkTubeNetExtractor2D.h	/^class ITK_EXPORT TubeNetExtractor2D : public TubeExtractor<TInputImage> $/;"	c	namespace:itk	inherits:TubeExtractor
itk::TubeNetExtractor2D::AutoExtract	.\2D\itkTubeNetExtractor2D.h	/^  bool   AutoExtract(int zMin, int zMax);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(int zMin, int zMax)
itk::TubeNetExtractor2D::AutoExtractAutoThresh	.\2D\itkTubeNetExtractor2D.h	/^  void   AutoExtractAutoThresh(double alpha=0.002);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(double alpha=0.002)
itk::TubeNetExtractor2D::AutoExtractThresh	.\2D\itkTubeNetExtractor2D.h	/^  double  AutoExtractThresh(void);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(void)
itk::TubeNetExtractor2D::AutoExtractThresh	.\2D\itkTubeNetExtractor2D.h	/^  void   AutoExtractThresh(double newAEThresh);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(double newAEThresh)
itk::TubeNetExtractor2D::ConstPointer	.\2D\itkTubeNetExtractor2D.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::TubeNetExtractor2D	access:public
itk::TubeNetExtractor2D::DeleteTube	.\2D\itkTubeNetExtractor2D.h	/^  bool DeleteTube(Tube * newTube);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(Tube * newTube)
itk::TubeNetExtractor2D::ExtractTube	.\2D\itkTubeNetExtractor2D.h	/^  bool ExtractTube(float x, float y);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(float x, float y)
itk::TubeNetExtractor2D::GetTubeNet	.\2D\itkTubeNetExtractor2D.h	/^  TubeNet::Pointer GetTubeNet(void);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(void)
itk::TubeNetExtractor2D::ImageConstPointer	.\2D\itkTubeNetExtractor2D.h	/^  typedef typename TInputImage::ConstPointer ImageConstPointer;$/;"	t	class:itk::TubeNetExtractor2D	access:public
itk::TubeNetExtractor2D::ImageDimension	.\2D\itkTubeNetExtractor2D.h	/^  enum {ImageDimension = ImageType::ImageDimension};$/;"	e	enum:itk::TubeNetExtractor2D::__anon4
itk::TubeNetExtractor2D::ImagePointer	.\2D\itkTubeNetExtractor2D.h	/^  typedef typename TInputImage::Pointer  ImagePointer;$/;"	t	class:itk::TubeNetExtractor2D	access:public
itk::TubeNetExtractor2D::ImageType	.\2D\itkTubeNetExtractor2D.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::TubeNetExtractor2D	access:public
itk::TubeNetExtractor2D::NewTubeCallBack	.\2D\itkTubeNetExtractor2D.h	/^  void   NewTubeCallBack(void (*newTubeCallBack)(Tube *));$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(void (*newTubeCallBack)(Tube *))
itk::TubeNetExtractor2D::PixelType	.\2D\itkTubeNetExtractor2D.h	/^  typedef typename TInputImage::PixelType PixelType;$/;"	t	class:itk::TubeNetExtractor2D	access:public
itk::TubeNetExtractor2D::Pointer	.\2D\itkTubeNetExtractor2D.h	/^  typedef SmartPointer<Self>   Pointer;$/;"	t	class:itk::TubeNetExtractor2D	access:public
itk::TubeNetExtractor2D::Self	.\2D\itkTubeNetExtractor2D.h	/^  typedef TubeNetExtractor2D Self;$/;"	t	class:itk::TubeNetExtractor2D	access:public
itk::TubeNetExtractor2D::SetAutoExtractMask	.\2D\itkTubeNetExtractor2D.h	/^  void SetAutoExtractMask(ImagePointer autoExtractMask);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(ImagePointer autoExtractMask)
itk::TubeNetExtractor2D::SetInputImage	.\2D\itkTubeNetExtractor2D.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(ImagePointer inputImage)
itk::TubeNetExtractor2D::Superclass	.\2D\itkTubeNetExtractor2D.h	/^  typedef Object  Superclass;$/;"	t	class:itk::TubeNetExtractor2D	access:public
itk::TubeNetExtractor2D::TubeNetExtractor2D	.\2D\itkTubeNetExtractor2D.h	/^  TubeNetExtractor2D();$/;"	p	class:itk::TubeNetExtractor2D	access:protected	signature:()
itk::TubeNetExtractor2D::TubeNetExtractor2D	.\2D\itkTubeNetExtractor2D.h	/^  TubeNetExtractor2D(const Self&) {}$/;"	f	class:itk::TubeNetExtractor2D	access:protected	signature:(const Self&)
itk::TubeNetExtractor2D::VectorType	.\2D\itkTubeNetExtractor2D.h	/^	typedef vnl_vector<double> VectorType; $/;"	t	class:itk::TubeNetExtractor2D	access:public
itk::TubeNetExtractor2D::itkGetConstObjectMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkGetConstObjectMacro(AEMask,ImageType);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(AEMask,ImageType)
itk::TubeNetExtractor2D::itkGetConstObjectMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(Image,ImageType)
itk::TubeNetExtractor2D::itkGetMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkGetMacro(AEUseMask,bool);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(AEUseMask,bool)
itk::TubeNetExtractor2D::itkNewMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkNewMacro(Self);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(Self)
itk::TubeNetExtractor2D::itkSetMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkSetMacro(AEUseMask,bool);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(AEUseMask,bool)
itk::TubeNetExtractor2D::itkTypeMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkTypeMacro(Self, Object);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(Self, Object)
itk::TubeNetExtractor2D::m_AEMask	.\2D\itkTubeNetExtractor2D.h	/^  ImagePointer            m_AEMask;$/;"	m	class:itk::TubeNetExtractor2D	access:private
itk::TubeNetExtractor2D::m_AEThresh	.\2D\itkTubeNetExtractor2D.h	/^  float                  *m_AEThresh;$/;"	m	class:itk::TubeNetExtractor2D	access:private
itk::TubeNetExtractor2D::m_AEUseMask	.\2D\itkTubeNetExtractor2D.h	/^  bool                    m_AEUseMask;$/;"	m	class:itk::TubeNetExtractor2D	access:private
itk::TubeNetExtractor2D::m_Image	.\2D\itkTubeNetExtractor2D.h	/^  ImagePointer    m_Image; $/;"	m	class:itk::TubeNetExtractor2D	access:private
itk::TubeNetExtractor2D::m_TubeNet	.\2D\itkTubeNetExtractor2D.h	/^  TubeNet::Pointer  m_TubeNet;$/;"	m	class:itk::TubeNetExtractor2D	access:private
itk::TubeNetExtractor2D::m_TubeNum	.\2D\itkTubeNetExtractor2D.h	/^  int               m_TubeNum;$/;"	m	class:itk::TubeNetExtractor2D	access:private
itk::TubeNetExtractor2D::operator =	.\2D\itkTubeNetExtractor2D.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::TubeNetExtractor2D	access:protected	signature:(const Self&)
itk::TubeNetExtractor2D::~TubeNetExtractor2D	.\2D\itkTubeNetExtractor2D.h	/^  virtual ~TubeNetExtractor2D();$/;"	p	class:itk::TubeNetExtractor2D	access:protected	signature:()
itk::TubeNetExtractor::AutoExtract	.\itkTubeNetExtractor.h	/^  bool   AutoExtract(int zMin, int zMax);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(int zMin, int zMax)
itk::TubeNetExtractor::AutoExtractAutoThresh	.\itkTubeNetExtractor.h	/^  void   AutoExtractAutoThresh(double alpha=0.002);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(double alpha=0.002)
itk::TubeNetExtractor::AutoExtractThresh	.\itkTubeNetExtractor.h	/^  double  AutoExtractThresh(void);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(void)
itk::TubeNetExtractor::AutoExtractThresh	.\itkTubeNetExtractor.h	/^  void   AutoExtractThresh(double newAEThresh);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(double newAEThresh)
itk::TubeNetExtractor::ConstPointer	.\itkTubeNetExtractor.h	/^  typedef SmartPointer<const Self>  ConstPointer;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::DeleteTube	.\itkTubeNetExtractor.h	/^  bool DeleteTube(TubeType * newTube);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(TubeType * newTube)
itk::TubeNetExtractor::ExtractTube	.\itkTubeNetExtractor.h	/^  bool ExtractTube(float x, float y);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(float x, float y)
itk::TubeNetExtractor::ExtractTube	.\itkTubeNetExtractor.h	/^  bool ExtractTube(float x, float y, float z);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(float x, float y, float z)
itk::TubeNetExtractor::GetTubeNet	.\itkTubeNetExtractor.h	/^  TubeType::Pointer GetTubeNet(void);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(void)
itk::TubeNetExtractor::ImagePointer	.\itkTubeNetExtractor.h	/^  typedef typename ImageType::Pointer      ImagePointer;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::ImageType	.\itkTubeNetExtractor.h	/^  typedef TInputImage  ImageType;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::IndexType	.\itkTubeNetExtractor.h	/^  typedef typename TInputImage::IndexType  IndexType;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::MaskPointer	.\itkTubeNetExtractor.h	/^  typedef typename MaskType::Pointer       MaskPointer;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::MaskType	.\itkTubeNetExtractor.h	/^  typedef TInputMask                       MaskType;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::NewTubeCallBack	.\itkTubeNetExtractor.h	/^  void   NewTubeCallBack(void (*newTubeCallBack)(TubeType *));$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(void (*newTubeCallBack)(TubeType *))
itk::TubeNetExtractor::PixelType	.\itkTubeNetExtractor.h	/^  typedef typename TInputImage::PixelType  PixelType;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::Pointer	.\itkTubeNetExtractor.h	/^  typedef SmartPointer<Self>        Pointer;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::Self	.\itkTubeNetExtractor.h	/^  typedef TubeNetExtractor          Self;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::SetAutoExtractMask	.\itkTubeNetExtractor.h	/^  void SetAutoExtractMask(MaskPointer autoExtractMask);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(MaskPointer autoExtractMask)
itk::TubeNetExtractor::SetInputImage	.\itkTubeNetExtractor.h	/^  void SetInputImage(ImagePointer inputImage);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(ImagePointer inputImage)
itk::TubeNetExtractor::Superclass	.\itkTubeNetExtractor.h	/^  typedef Object                    Superclass;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::TubeNetExtractor	.\itkTubeNetExtractor.h	/^  TubeNetExtractor();$/;"	p	class:itk::TubeNetExtractor	access:protected	signature:()
itk::TubeNetExtractor::TubeNetExtractor	.\itkTubeNetExtractor.h	/^  TubeNetExtractor(const Self&) {}$/;"	f	class:itk::TubeNetExtractor	access:protected	signature:(const Self&)
itk::TubeNetExtractor::TubePointer	.\itkTubeNetExtractor.h	/^  typedef typename TubeType::Pointer       TubePointer;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::TubeType	.\itkTubeNetExtractor.h	/^  typedef TubeSpatialObject<3>             TubeType;$/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::VectorType	.\itkTubeNetExtractor.h	/^  typedef Vector<double, 3>                VectorType; $/;"	t	class:itk::TubeNetExtractor	access:public
itk::TubeNetExtractor::itkGetConstObjectMacro	.\itkTubeNetExtractor.h	/^  itkGetConstObjectMacro(AEMask, MaskType);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(AEMask, MaskType)
itk::TubeNetExtractor::itkGetConstObjectMacro	.\itkTubeNetExtractor.h	/^  itkGetConstObjectMacro(Image, ImageType);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(Image, ImageType)
itk::TubeNetExtractor::itkGetMacro	.\itkTubeNetExtractor.h	/^  itkGetMacro(AEUseMask,bool);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(AEUseMask,bool)
itk::TubeNetExtractor::itkNewMacro	.\itkTubeNetExtractor.h	/^  itkNewMacro(Self);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(Self)
itk::TubeNetExtractor::itkSetMacro	.\itkTubeNetExtractor.h	/^  itkSetMacro(AEUseMask,bool);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(AEUseMask,bool)
itk::TubeNetExtractor::itkStaticConstMacro	.\itkTubeNetExtractor.h	/^  itkStaticConstMacro(ImageDimension, unsigned int,$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(ImageDimension, unsigned int, ::itk::GetImageDimension< TInputImage>::ImageDimension)
itk::TubeNetExtractor::itkTypeMacro	.\itkTubeNetExtractor.h	/^  itkTypeMacro(Self, Object);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(Self, Object)
itk::TubeNetExtractor::m_AEMask	.\itkTubeNetExtractor.h	/^  MaskPointer       m_AEMask;$/;"	m	class:itk::TubeNetExtractor	access:private
itk::TubeNetExtractor::m_AEThresh	.\itkTubeNetExtractor.h	/^  float             m_AEThresh;$/;"	m	class:itk::TubeNetExtractor	access:private
itk::TubeNetExtractor::m_AEUseMask	.\itkTubeNetExtractor.h	/^  bool              m_AEUseMask;$/;"	m	class:itk::TubeNetExtractor	access:private
itk::TubeNetExtractor::m_Image	.\itkTubeNetExtractor.h	/^  ImagePointer      m_Image; $/;"	m	class:itk::TubeNetExtractor	access:private
itk::TubeNetExtractor::m_TubeNet	.\itkTubeNetExtractor.h	/^  TubePointer       m_TubeNet;$/;"	m	class:itk::TubeNetExtractor	access:private
itk::TubeNetExtractor::m_TubeNum	.\itkTubeNetExtractor.h	/^  int               m_TubeNum;$/;"	m	class:itk::TubeNetExtractor	access:private
itk::TubeNetExtractor::operator =	.\itkTubeNetExtractor.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::TubeNetExtractor	access:protected	signature:(const Self&)
itk::TubeNetExtractor::~TubeNetExtractor	.\itkTubeNetExtractor.h	/^  virtual ~TubeNetExtractor();$/;"	p	class:itk::TubeNetExtractor	access:protected	signature:()
itk::UserFunc	.\UserFunc.h	/^class UserFunc$/;"	c	namespace:itk
itk::UserFunc::UserFunc	.\UserFunc.h	/^  UserFunc();$/;"	p	class:itk::UserFunc	access:public	signature:()
itk::UserFunc::UserFunc	.\UserFunc.h	/^UserFunc<InT, OutT>::UserFunc()$/;"	f	class:itk::UserFunc	signature:()
itk::UserFunc::value	.\UserFunc.h	/^  virtual OutT value(InT x) = 0;$/;"	p	class:itk::UserFunc	access:public	signature:(InT x)
itk::UserFunc::~UserFunc	.\UserFunc.h	/^  virtual ~UserFunc();$/;"	p	class:itk::UserFunc	access:public	signature:()
itk::UserFunc::~UserFunc	.\UserFunc.h	/^UserFunc<InT, OutT>::~UserFunc()$/;"	f	class:itk::UserFunc	signature:()
itkGetConstObjectMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Image,ImageType)
itkGetConstObjectMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetConstObjectMacro(DataMask,ImageType);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(DataMask,ImageType)
itkGetConstObjectMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(Image,ImageType)
itkGetConstObjectMacro	.\2D\itkTubeExtractor2D.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(Image,ImageType)
itkGetConstObjectMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkGetConstObjectMacro(AEMask,ImageType);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(AEMask,ImageType)
itkGetConstObjectMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(Image,ImageType)
itkGetConstObjectMacro	.\itkRadiusExtractor.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(Image,ImageType)
itkGetConstObjectMacro	.\itkTubeExtractor.h	/^  itkGetConstObjectMacro(Image,ImageType);$/;"	p	class:itk::TubeExtractor	access:public	signature:(Image,ImageType)
itkGetConstObjectMacro	.\itkTubeNetExtractor.h	/^  itkGetConstObjectMacro(AEMask, MaskType);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(AEMask, MaskType)
itkGetConstObjectMacro	.\itkTubeNetExtractor.h	/^  itkGetConstObjectMacro(Image, ImageType);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(Image, ImageType)
itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(DataMax,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(DataMax,double)
itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(DataMin,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(DataMin,double)
itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(Extent,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Extent,double)
itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(ExtractRidge,bool); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ExtractRidge,bool)
itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(Radius0,double); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Radius0,double)
itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(RadiusMax,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(RadiusMax,double)
itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(RadiusMin,double);  $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(RadiusMin,double)
itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(Scale,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Scale,double)
itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(ThreshWVal,double); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ThreshWVal,double)
itkGetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkGetMacro(ThreshWValStart,double); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ThreshWValStart,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(AutoScale,bool);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(AutoScale,bool)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(AutoScaleUsed,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(AutoScaleUsed,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(DataMax,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(DataMax,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(DataMin,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(DataMin,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(DynamicScale,bool);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(DynamicScale,bool)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(RecoveryMax,int);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(RecoveryMax,int)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(StepX,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(StepX,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshEV,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEV,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshEVRatio,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEVRatio,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshEVRatioStart,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEVRatioStart,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshP2Q2,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshP2Q2,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshP2Q2Start,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshP2Q2Start,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshT,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshT,double)
itkGetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkGetMacro(ThreshX,double);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshX,double)
itkGetMacro	.\2D\itkTubeExtractor2D.h	/^  itkGetMacro(Color,float*);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(Color,float*)
itkGetMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkGetMacro(AEUseMask,bool);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(AEUseMask,bool)
itkGetMacro	.\itkBlur3DImageFunction.h	/^   itkGetMacro( Scale, double);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( Scale, double)
itkGetMacro	.\itkBlur3DImageFunction.h	/^  itkGetMacro( Extent, double);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( Extent, double)
itkGetMacro	.\itkBlur3DImageFunction.h	/^  itkGetMacro( Spacing, SpacingType );$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( Spacing, SpacingType )
itkGetMacro	.\itkBlur3DImageFunction.h	/^  itkGetMacro( UseRelativeSpacing, bool );$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:( UseRelativeSpacing, bool )
itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(DataMax,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(DataMax,double)
itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(DataMin,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(DataMin,double)
itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(Extent,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(Extent,double)
itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(ExtractRidge,bool); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(ExtractRidge,bool)
itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(Radius0,double); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(Radius0,double)
itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(RadiusMax,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(RadiusMax,double)
itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(RadiusMin,double);  $/;"	p	class:itk::RadiusExtractor	access:public	signature:(RadiusMin,double)
itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(Scale,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(Scale,double)
itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(ThreshWVal,double); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(ThreshWVal,double)
itkGetMacro	.\itkRadiusExtractor.h	/^  itkGetMacro(ThreshWValStart,double); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(ThreshWValStart,double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(DataMax, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(DataMax, double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(DataMin, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(DataMin, double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(DynamicScale, bool);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(DynamicScale, bool)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(DynamicScaleUsed, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(DynamicScaleUsed, double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ExtractBoundMax, IndexType); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ExtractBoundMax, IndexType)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ExtractBoundMin, IndexType); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ExtractBoundMin, IndexType)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(RecoveryMax, int);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(RecoveryMax, int)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(StepX, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(StepX, double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshEV, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEV, double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshEVRatio, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEVRatio, double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshEVRatioStart, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEVRatioStart, double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshP2Q2, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshP2Q2, double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshP2Q2Start, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshP2Q2Start, double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshT, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshT, double)
itkGetMacro	.\itkRidgeExtractor.h	/^  itkGetMacro(ThreshX, double);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshX, double)
itkGetMacro	.\itkTubeExtractor.h	/^  itkGetMacro(Color,float*);$/;"	p	class:itk::TubeExtractor	access:public	signature:(Color,float*)
itkGetMacro	.\itkTubeNetExtractor.h	/^  itkGetMacro(AEUseMask,bool);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(AEUseMask,bool)
itkGetObjectMacro	.\itkRidgeExtractor.h	/^  itkGetObjectMacro(DataMask, MaskType);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(DataMask, MaskType)
itkGetObjectMacro	.\itkRidgeExtractor.h	/^  itkGetObjectMacro(Image, ImageType);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(Image, ImageType)
itkNewMacro	.\2D\itkRadiusExtractor2D.h	/^  itkNewMacro(Self);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Self)
itkNewMacro	.\2D\itkRidgeExtractor2D.h	/^  itkNewMacro(Self);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(Self)
itkNewMacro	.\2D\itkTubeExtractor2D.h	/^  itkNewMacro(Self);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(Self)
itkNewMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkNewMacro(Self);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(Self)
itkNewMacro	.\itkBlur3DImageFunction.h	/^  itkNewMacro(Self);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(Self)
itkNewMacro	.\itkRadiusExtractor.h	/^  itkNewMacro(RadiusExtractor);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(RadiusExtractor)
itkNewMacro	.\itkRidgeExtractor.h	/^  itkNewMacro(RidgeExtractor);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(RidgeExtractor)
itkNewMacro	.\itkTubeExtractor.h	/^  itkNewMacro(TubeExtractor);$/;"	p	class:itk::TubeExtractor	access:public	signature:(TubeExtractor)
itkNewMacro	.\itkTubeNetExtractor.h	/^  itkNewMacro(Self);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(Self)
itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(DataMax,double); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(DataMax,double)
itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(DataMin,double); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(DataMin,double)
itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(ExtractRidge,bool);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ExtractRidge,bool)
itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(ModeMR,bool); $/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ModeMR,bool)
itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(Radius0,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Radius0,double)
itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(ThreshWVal,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ThreshWVal,double)
itkSetMacro	.\2D\itkRadiusExtractor2D.h	/^  itkSetMacro(ThreshWValStart,double);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(ThreshWValStart,double)
itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ExtractRidge,bool);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ExtractRidge,bool)
itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(RecoveryMax,int);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(RecoveryMax,int)
itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(StepX,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(StepX,double)
itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshEV,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEV,double)
itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshEVRatio,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEVRatio,double)
itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshEVRatioStart,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshEVRatioStart,double)
itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshP2Q2,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshP2Q2,double)
itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshP2Q2Start,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshP2Q2Start,double)
itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshT,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshT,double)
itkSetMacro	.\2D\itkRidgeExtractor2D.h	/^  itkSetMacro(ThreshX,double); $/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(ThreshX,double)
itkSetMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkSetMacro(AEUseMask,bool);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(AEUseMask,bool)
itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(DataMax,double); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(DataMax,double)
itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(DataMin,double); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(DataMin,double)
itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(ExtractRidge,bool);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(ExtractRidge,bool)
itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(ModeMR,bool); $/;"	p	class:itk::RadiusExtractor	access:public	signature:(ModeMR,bool)
itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(Radius0,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(Radius0,double)
itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(ThreshWVal,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(ThreshWVal,double)
itkSetMacro	.\itkRadiusExtractor.h	/^  itkSetMacro(ThreshWValStart,double);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(ThreshWValStart,double)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ExtractBoundMax, IndexType); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ExtractBoundMax, IndexType)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ExtractBoundMin, IndexType); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ExtractBoundMin, IndexType)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(RecoveryMax, int);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(RecoveryMax, int)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(StepX, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(StepX, double)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshEV, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEV, double)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshEVRatio, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEVRatio, double)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshEVRatioStart, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshEVRatioStart, double)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshP2Q2, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshP2Q2, double)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshP2Q2Start, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshP2Q2Start, double)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshT, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshT, double)
itkSetMacro	.\itkRidgeExtractor.h	/^  itkSetMacro(ThreshX, double); $/;"	p	class:itk::RidgeExtractor	access:public	signature:(ThreshX, double)
itkSetMacro	.\itkTubeNetExtractor.h	/^  itkSetMacro(AEUseMask,bool);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(AEUseMask,bool)
itkSpline1D_h	.\itkSpline1D.h	18;"	d
itkSplineApproximation1D_h	.\itkSplineApproximation1D.h	18;"	d
itkSplineND_h	.\itkSplineND.h	18;"	d
itkStaticConstMacro	.\itkBlur3DImageFunction.h	/^  itkStaticConstMacro(ImageDimension, unsigned int, 3 ); $/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(ImageDimension, unsigned int, 3 )
itkStaticConstMacro	.\itkRadiusExtractor.h	/^  itkStaticConstMacro(ImageDimension, unsigned int,$/;"	p	class:itk::RadiusExtractor	access:public	signature:(ImageDimension, unsigned int, ::itk::GetImageDimension< TInputImage>::ImageDimension)
itkStaticConstMacro	.\itkRidgeExtractor.h	/^  itkStaticConstMacro(ImageDimension, unsigned int,$/;"	p	class:itk::RidgeExtractor	access:public	signature:(ImageDimension, unsigned int, ::itk::GetImageDimension< TInputImage>::ImageDimension)
itkStaticConstMacro	.\itkSplineND.h	/^  itkStaticConstMacro(ImageDimension, unsigned int, 3);$/;"	p	class:itk::SplineND	access:public	signature:(ImageDimension, unsigned int, 3)
itkStaticConstMacro	.\itkTubeExtractor.h	/^  itkStaticConstMacro(ImageDimension, unsigned int,$/;"	p	class:itk::TubeExtractor	access:public	signature:(ImageDimension, unsigned int, ::itk::GetImageDimension<TInputImage>::ImageDimension)
itkStaticConstMacro	.\itkTubeNetExtractor.h	/^  itkStaticConstMacro(ImageDimension, unsigned int,$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(ImageDimension, unsigned int, ::itk::GetImageDimension< TInputImage>::ImageDimension)
itkTypeMacro	.\2D\itkRadiusExtractor2D.h	/^  itkTypeMacro(Self, Object);$/;"	p	class:itk::RadiusExtractor2D	access:public	signature:(Self, Object)
itkTypeMacro	.\2D\itkRidgeExtractor2D.h	/^  itkTypeMacro(Self, Object);$/;"	p	class:itk::RidgeExtractor2D	access:public	signature:(Self, Object)
itkTypeMacro	.\2D\itkTubeExtractor2D.h	/^  itkTypeMacro(Self, Object);$/;"	p	class:itk::TubeExtractor2D	access:public	signature:(Self, Object)
itkTypeMacro	.\2D\itkTubeNetExtractor2D.h	/^  itkTypeMacro(Self, Object);$/;"	p	class:itk::TubeNetExtractor2D	access:public	signature:(Self, Object)
itkTypeMacro	.\itkBlur3DImageFunction.h	/^  itkTypeMacro(Blur3DImageFunction, ImageFunction);$/;"	p	class:itk::Blur3DImageFunction	access:public	signature:(Blur3DImageFunction, ImageFunction)
itkTypeMacro	.\itkRadiusExtractor.h	/^  itkTypeMacro(RadiusExtractor, Object);$/;"	p	class:itk::RadiusExtractor	access:public	signature:(RadiusExtractor, Object)
itkTypeMacro	.\itkRidgeExtractor.h	/^  itkTypeMacro(RidgeExtractor, Object);$/;"	p	class:itk::RidgeExtractor	access:public	signature:(RidgeExtractor, Object)
itkTypeMacro	.\itkTubeExtractor.h	/^  itkTypeMacro(TubeExtractor, Object);$/;"	p	class:itk::TubeExtractor	access:public	signature:(TubeExtractor, Object)
itkTypeMacro	.\itkTubeNetExtractor.h	/^  itkTypeMacro(Self, Object);$/;"	p	class:itk::TubeNetExtractor	access:public	signature:(Self, Object)
itk_cross_3d	.\itkRadiusExtractor.h	27;"	d
itk_cross_3d	.\itkRadiusExtractor.h	29;"	d
lsw	.\vMathPrivate.h	/^    unsigned int lsw;$/;"	m	struct:__anon5::__anon6	access:public
lsw	.\vMathPrivate.h	/^    unsigned int lsw;$/;"	m	struct:__anon7::__anon8	access:public
m_AEMask	.\2D\itkTubeNetExtractor2D.h	/^  ImagePointer            m_AEMask;$/;"	m	class:itk::TubeNetExtractor2D	access:private
m_AEMask	.\itkTubeNetExtractor.h	/^  MaskPointer       m_AEMask;$/;"	m	class:itk::TubeNetExtractor	access:private
m_AEThresh	.\2D\itkTubeNetExtractor2D.h	/^  float                  *m_AEThresh;$/;"	m	class:itk::TubeNetExtractor2D	access:private
m_AEThresh	.\itkTubeNetExtractor.h	/^  float             m_AEThresh;$/;"	m	class:itk::TubeNetExtractor	access:private
m_AEUseMask	.\2D\itkTubeNetExtractor2D.h	/^  bool                    m_AEUseMask;$/;"	m	class:itk::TubeNetExtractor2D	access:private
m_AEUseMask	.\itkTubeNetExtractor.h	/^  bool              m_AEUseMask;$/;"	m	class:itk::TubeNetExtractor	access:private
m_AbortProcess	.\2D\itkTubeExtractor2D.h	/^  bool (*m_AbortProcess)();$/;"	m	class:itk::TubeExtractor2D	access:protected
m_AbortProcess	.\itkTubeExtractor.h	/^  bool (*m_AbortProcess)();$/;"	m	class:itk::TubeExtractor	access:protected
m_ArrayLen	.\2D\itkRadiusExtractor2D.h	/^  int      m_ArrayLen;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_ArrayLen	.\itkRadiusExtractor.h	/^  int      m_ArrayLen;$/;"	m	class:itk::RadiusExtractor	access:private
m_AutoScale	.\2D\itkRidgeExtractor2D.h	/^  bool             m_AutoScale;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_AutoScaleUsed	.\2D\itkRidgeExtractor2D.h	/^  double           m_AutoScaleUsed;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_CalcTangents	.\2D\itkRidgeExtractor2D.h	/^  bool   m_CalcTangents(TubeType *);$/;"	p	class:itk::RidgeExtractor2D	access:private	signature:(TubeType *)
m_Color	.\2D\itkTubeExtractor2D.h	/^  float* m_Color;$/;"	m	class:itk::TubeExtractor2D	access:private
m_Color	.\itkTubeExtractor.h	/^  float *                  m_Color;$/;"	m	class:itk::TubeExtractor	access:private
m_DataMask	.\2D\itkRidgeExtractor2D.h	/^  ImagePointer     m_DataMask;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_DataMask	.\itkRidgeExtractor.h	/^  MaskType::Pointer  m_DataMask;$/;"	m	class:itk::RidgeExtractor	access:private
m_DataMax	.\2D\itkRadiusExtractor2D.h	/^  double   m_DataMax;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_DataMax	.\2D\itkRidgeExtractor2D.h	/^  double           m_DataMax;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_DataMax	.\itkRadiusExtractor.h	/^  double   m_DataMax;$/;"	m	class:itk::RadiusExtractor	access:private
m_DataMax	.\itkRidgeExtractor.h	/^  double           m_DataMax;$/;"	m	class:itk::RidgeExtractor	access:private
m_DataMin	.\2D\itkRadiusExtractor2D.h	/^  double   m_DataMin;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_DataMin	.\2D\itkRidgeExtractor2D.h	/^  double           m_DataMin;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_DataMin	.\itkRadiusExtractor.h	/^  double   m_DataMin;$/;"	m	class:itk::RadiusExtractor	access:private
m_DataMin	.\itkRidgeExtractor.h	/^  double           m_DataMin;$/;"	m	class:itk::RidgeExtractor	access:private
m_DataOp	.\2D\itkRadiusExtractor2D.h	/^  typename BlurImageFunction<ImageType>::Pointer m_DataOp;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_DataOp	.\2D\itkRidgeExtractor2D.h	/^  typename BlurImageFunction<ImageType>::Pointer m_DataOp;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_DataOp	.\itkRadiusExtractor.h	/^  typename Blur3DImageFunction<ImageType>::Pointer m_DataOp;$/;"	m	class:itk::RadiusExtractor	access:private
m_DataOp	.\itkRidgeExtractor.h	/^  typename Blur3DImageFunction<ImageType>::Pointer m_DataOp;$/;"	m	class:itk::RidgeExtractor	access:private
m_DataRange	.\2D\itkRidgeExtractor2D.h	/^  double           m_DataRange;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_DataRange	.\itkRidgeExtractor.h	/^  double           m_DataRange;$/;"	m	class:itk::RidgeExtractor	access:private
m_DataSpline	.\2D\itkRidgeExtractor2D.h	/^  SplineND *       m_DataSpline;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_DataSpline	.\itkRidgeExtractor.h	/^  SplineND*                             m_DataSpline;$/;"	m	class:itk::RidgeExtractor	access:private
m_DataSpline1D	.\2D\itkRidgeExtractor2D.h	/^  SplineApproximation1D      m_DataSpline1D;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_DataSpline1D	.\itkRidgeExtractor.h	/^  SplineApproximation1D                 m_DataSpline1D;$/;"	m	class:itk::RidgeExtractor	access:private
m_DataSplineOpt	.\2D\itkRidgeExtractor2D.h	/^  OptimizerType       m_DataSplineOpt;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_DataSplineOpt	.\itkRidgeExtractor.h	/^  OptParabolicFit1D                     m_DataSplineOpt;$/;"	m	class:itk::RidgeExtractor	access:private
m_Debug	.\2D\itkRadiusExtractor2D.h	/^  bool m_Debug;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_Debug	.\2D\itkRidgeExtractor2D.h	/^  bool m_Debug;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_Debug	.\2D\itkTubeExtractor2D.h	/^  bool m_Debug;$/;"	m	class:itk::TubeExtractor2D	access:private
m_Debug	.\itkBlur3DImageFunction.h	/^  bool                    m_Debug;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_Debug	.\itkRadiusExtractor.h	/^  bool m_Debug;$/;"	m	class:itk::RadiusExtractor	access:private
m_Debug	.\itkRidgeExtractor.h	/^  bool m_Debug;$/;"	m	class:itk::RidgeExtractor	access:private
m_Debug	.\itkTubeExtractor.h	/^  bool                     m_Debug;$/;"	m	class:itk::TubeExtractor	access:private
m_DynamicScale	.\2D\itkRidgeExtractor2D.h	/^  bool             m_DynamicScale;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_DynamicScale	.\itkRidgeExtractor.h	/^  bool             m_DynamicScale;$/;"	m	class:itk::RidgeExtractor	access:private
m_DynamicScaleUsed	.\2D\itkRidgeExtractor2D.h	/^  double           m_DynamicScaleUsed;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_DynamicScaleUsed	.\itkRidgeExtractor.h	/^  double           m_DynamicScaleUsed;$/;"	m	class:itk::RidgeExtractor	access:private
m_Extent	.\2D\itkRadiusExtractor2D.h	/^  double m_Extent;   $/;"	m	class:itk::RadiusExtractor2D	access:private
m_Extent	.\itkBlur3DImageFunction.h	/^  double                  m_Extent;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_Extent	.\itkRadiusExtractor.h	/^  double m_Extent;   $/;"	m	class:itk::RadiusExtractor	access:private
m_ExtractBoundMax	.\2D\itkRidgeExtractor2D.h	/^  IntVectorType m_ExtractBoundMax;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_ExtractBoundMax	.\itkRidgeExtractor.h	/^  IndexType        m_ExtractBoundMax;$/;"	m	class:itk::RidgeExtractor	access:private
m_ExtractBoundMin	.\2D\itkRidgeExtractor2D.h	/^  IntVectorType m_ExtractBoundMin;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_ExtractBoundMin	.\itkRidgeExtractor.h	/^  IndexType        m_ExtractBoundMin;$/;"	m	class:itk::RidgeExtractor	access:private
m_ExtractRidge	.\2D\itkRadiusExtractor2D.h	/^  bool     m_ExtractRidge;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_ExtractRidge	.\2D\itkRidgeExtractor2D.h	/^  bool             m_ExtractRidge;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_ExtractRidge	.\itkRadiusExtractor.h	/^  bool     m_ExtractRidge;$/;"	m	class:itk::RadiusExtractor	access:private
m_IdleCallBack	.\2D\itkRadiusExtractor2D.h	/^  bool (*m_IdleCallBack)();$/;"	m	class:itk::RadiusExtractor2D	access:private
m_IdleCallBack	.\2D\itkRidgeExtractor2D.h	/^  bool  (*m_IdleCallBack)();$/;"	m	class:itk::RidgeExtractor2D	access:private
m_IdleCallBack	.\2D\itkTubeExtractor2D.h	/^  bool (*m_IdleCallBack)();$/;"	m	class:itk::TubeExtractor2D	access:protected
m_IdleCallBack	.\itkRadiusExtractor.h	/^  bool (*m_IdleCallBack)();$/;"	m	class:itk::RadiusExtractor	access:private
m_IdleCallBack	.\itkRidgeExtractor.h	/^  bool  (*m_IdleCallBack)();$/;"	m	class:itk::RidgeExtractor	access:private
m_IdleCallBack	.\itkTubeExtractor.h	/^  bool (*m_IdleCallBack)();$/;"	m	class:itk::TubeExtractor	access:protected
m_Image	.\2D\itkRadiusExtractor2D.h	/^  ImagePointer    m_Image; $/;"	m	class:itk::RadiusExtractor2D	access:private
m_Image	.\2D\itkRidgeExtractor2D.h	/^  ImagePointer    m_Image; $/;"	m	class:itk::RidgeExtractor2D	access:private
m_Image	.\2D\itkTubeExtractor2D.h	/^  ImagePointer    m_Image;   $/;"	m	class:itk::TubeExtractor2D	access:private
m_Image	.\2D\itkTubeNetExtractor2D.h	/^  ImagePointer    m_Image; $/;"	m	class:itk::TubeNetExtractor2D	access:private
m_Image	.\itkRadiusExtractor.h	/^  ImagePointer    m_Image; $/;"	m	class:itk::RadiusExtractor	access:private
m_Image	.\itkRidgeExtractor.h	/^  ImagePointer    m_Image; $/;"	m	class:itk::RidgeExtractor	access:private
m_Image	.\itkTubeExtractor.h	/^  ImagePointer             m_Image;   $/;"	m	class:itk::TubeExtractor	access:private
m_Image	.\itkTubeNetExtractor.h	/^  ImagePointer      m_Image; $/;"	m	class:itk::TubeNetExtractor	access:private
m_ImageSize	.\itkBlur3DImageFunction.h	/^  Size<itkGetStaticConstMacro(ImageDimension)>    m_ImageSize;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_IterPntArray	.\2D\itkRadiusExtractor2D.h	/^  std::list<TubePoint *>::iterator * m_IterPntArray;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_IterPntArray	.\itkRadiusExtractor.h	/^  std::vector<TubePointType>::iterator  * m_IterPntArray;$/;"	m	class:itk::RadiusExtractor	access:private
m_Kern	.\2D\itkRadiusExtractor2D.h	/^  std::list<TubePointType>*    m_Kern;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_Kern	.\itkRadiusExtractor.h	/^  std::list<TubePointType>* m_Kern;$/;"	m	class:itk::RadiusExtractor	access:private
m_KernBranch	.\2D\itkRadiusExtractor2D.h	/^  double   m_KernBranch;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernBranch	.\itkRadiusExtractor.h	/^  double   m_KernBranch;$/;"	m	class:itk::RadiusExtractor	access:private
m_KernBrn	.\2D\itkRadiusExtractor2D.h	/^  double m_KernBrn[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernBrn	.\itkRadiusExtractor.h	/^  double m_KernBrn[40];$/;"	m	class:itk::RadiusExtractor	access:private
m_KernBrnCnt	.\2D\itkRadiusExtractor2D.h	/^  double m_KernBrnCnt[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernBrnCnt	.\itkRadiusExtractor.h	/^  double m_KernBrnCnt[40];$/;"	m	class:itk::RadiusExtractor	access:private
m_KernCosT	.\2D\itkRadiusExtractor2D.h	/^  double m_KernCosT[20], m_KernSinT[20];$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernCosT	.\itkRadiusExtractor.h	/^  double m_KernCosT[20], m_KernSinT[20];$/;"	m	class:itk::RadiusExtractor	access:private
m_KernMedial	.\2D\itkRadiusExtractor2D.h	/^  double   m_KernMedial;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernMedial	.\itkRadiusExtractor.h	/^  double   m_KernMedial;$/;"	m	class:itk::RadiusExtractor	access:private
m_KernN0	.\2D\itkRadiusExtractor2D.h	/^  VectorType* m_KernN0;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernN0	.\itkRadiusExtractor.h	/^  VectorType* m_KernN0;$/;"	m	class:itk::RadiusExtractor	access:private
m_KernN1	.\2D\itkRadiusExtractor2D.h	/^  VectorType* m_KernN1;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernN1	.\itkRadiusExtractor.h	/^  VectorType* m_KernN1;$/;"	m	class:itk::RadiusExtractor	access:private
m_KernNeg	.\2D\itkRadiusExtractor2D.h	/^  double m_KernPos[40], m_KernNeg[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernNeg	.\itkRadiusExtractor.h	/^  double m_KernPos[40], m_KernNeg[40];$/;"	m	class:itk::RadiusExtractor	access:private
m_KernNegCnt	.\2D\itkRadiusExtractor2D.h	/^  double m_KernPosCnt[40], m_KernNegCnt[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernNegCnt	.\itkRadiusExtractor.h	/^  double m_KernPosCnt[40], m_KernNegCnt[40];$/;"	m	class:itk::RadiusExtractor	access:private
m_KernNumT	.\2D\itkRadiusExtractor2D.h	/^  int m_KernNumT;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernNumT	.\itkRadiusExtractor.h	/^  int m_KernNumT;$/;"	m	class:itk::RadiusExtractor	access:private
m_KernPntArray	.\2D\itkRadiusExtractor2D.h	/^  TubePoint ** m_KernPntArray;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernPntArray	.\itkRadiusExtractor.h	/^  TubePointType * m_KernPntArray;$/;"	m	class:itk::RadiusExtractor	access:private
m_KernPos	.\2D\itkRadiusExtractor2D.h	/^  double m_KernPos[40], m_KernNeg[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernPos	.\itkRadiusExtractor.h	/^  double m_KernPos[40], m_KernNeg[40];$/;"	m	class:itk::RadiusExtractor	access:private
m_KernPosCnt	.\2D\itkRadiusExtractor2D.h	/^  double m_KernPosCnt[40], m_KernNegCnt[40];$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernPosCnt	.\itkRadiusExtractor.h	/^  double m_KernPosCnt[40], m_KernNegCnt[40];$/;"	m	class:itk::RadiusExtractor	access:private
m_KernSinT	.\2D\itkRadiusExtractor2D.h	/^  double m_KernCosT[20], m_KernSinT[20];$/;"	m	class:itk::RadiusExtractor2D	access:private
m_KernSinT	.\itkRadiusExtractor.h	/^  double m_KernCosT[20], m_KernSinT[20];$/;"	m	class:itk::RadiusExtractor	access:private
m_KernelMax	.\itkBlur3DImageFunction.h	/^  IndexType               m_KernelMax;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_KernelMin	.\itkBlur3DImageFunction.h	/^  IndexType               m_KernelMin;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_KernelTotal	.\itkBlur3DImageFunction.h	/^  double                  m_KernelTotal;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_KernelWeights	.\itkBlur3DImageFunction.h	/^  KernelWeightsListType   m_KernelWeights;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_KernelX	.\itkBlur3DImageFunction.h	/^  KernelXListType         m_KernelX;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_MedialnessAtKern	.\2D\itkRadiusExtractor2D.h	/^  UserFunc<double, double> * m_MedialnessAtKern;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_MedialnessAtKern	.\itkRadiusExtractor.h	/^  UserFunc<double, double> * m_MedialnessAtKern;$/;"	m	class:itk::RadiusExtractor	access:private
m_MedialnessOpt	.\2D\itkRadiusExtractor2D.h	/^  OptimizerType m_MedialnessOpt;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_MedialnessOpt	.\itkRadiusExtractor.h	/^  OptParabolicFit1D m_MedialnessOpt;$/;"	m	class:itk::RadiusExtractor	access:private
m_ModeMR	.\2D\itkRadiusExtractor2D.h	/^  bool     m_ModeMR;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_ModeMR	.\2D\itkRidgeExtractor2D.h	/^  bool             m_ModeMR;   $/;"	m	class:itk::RidgeExtractor2D	access:private
m_ModeMR	.\itkRadiusExtractor.h	/^  bool     m_ModeMR;$/;"	m	class:itk::RadiusExtractor	access:private
m_NewTubeCallBack	.\2D\itkTubeExtractor2D.h	/^  void (*m_NewTubeCallBack)(TubeType *);$/;"	m	class:itk::TubeExtractor2D	access:protected
m_NewTubeCallBack	.\itkTubeExtractor.h	/^  void (*m_NewTubeCallBack)(TubeType *);$/;"	m	class:itk::TubeExtractor	access:protected
m_NumRadiusPoints	.\2D\itkRadiusExtractor2D.h	/^  int      m_NumRadiusPoints;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_NumRadiusPoints	.\itkRadiusExtractor.h	/^  int      m_NumRadiusPoints;$/;"	m	class:itk::RadiusExtractor	access:private
m_OriginalSpacing	.\itkBlur3DImageFunction.h	/^  SpacingType             m_OriginalSpacing;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_Radius0	.\2D\itkRadiusExtractor2D.h	/^  double   m_Radius0;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_Radius0	.\itkRadiusExtractor.h	/^  double   m_Radius0;$/;"	m	class:itk::RadiusExtractor	access:private
m_RadiusExtractor	.\2D\itkRidgeExtractor2D.h	/^  RadiusExtractor2D<TInputImage> * m_RadiusExtractor;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_RadiusExtractor	.\itkRidgeExtractor.h	/^  RadiusExtractor<TInputImage> * m_RadiusExtractor;$/;"	m	class:itk::RidgeExtractor	access:private
m_RadiusMax	.\2D\itkRadiusExtractor2D.h	/^  double   m_RadiusMax;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_RadiusMax	.\itkRadiusExtractor.h	/^  double   m_RadiusMax;$/;"	m	class:itk::RadiusExtractor	access:private
m_RadiusMin	.\2D\itkRadiusExtractor2D.h	/^  double   m_RadiusMin;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_RadiusMin	.\itkRadiusExtractor.h	/^  double   m_RadiusMin;$/;"	m	class:itk::RadiusExtractor	access:private
m_RadiusOp	.\2D\itkTubeExtractor2D.h	/^  typename RadiusExtractor2D<ImageType>::Pointer m_RadiusOp;$/;"	m	class:itk::TubeExtractor2D	access:protected
m_RadiusOp	.\itkTubeExtractor.h	/^  typename RadiusExtractor<ImageType>::Pointer m_RadiusOp;$/;"	m	class:itk::TubeExtractor	access:protected
m_RadiusPointSpacing	.\2D\itkRadiusExtractor2D.h	/^  int      m_RadiusPointSpacing;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_RadiusPointSpacing	.\itkRadiusExtractor.h	/^  int      m_RadiusPointSpacing;$/;"	m	class:itk::RadiusExtractor	access:private
m_RecoveryMax	.\2D\itkRidgeExtractor2D.h	/^  int              m_RecoveryMax;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_RecoveryMax	.\itkRidgeExtractor.h	/^  int              m_RecoveryMax;$/;"	m	class:itk::RidgeExtractor	access:private
m_RidgeOp	.\2D\itkTubeExtractor2D.h	/^  typename RidgeExtractor2D<ImageType>::Pointer  m_RidgeOp;$/;"	m	class:itk::TubeExtractor2D	access:protected
m_RidgeOp	.\itkTubeExtractor.h	/^  typename RidgeExtractor<ImageType>::Pointer  m_RidgeOp;$/;"	m	class:itk::TubeExtractor	access:protected
m_Scale	.\2D\itkRadiusExtractor2D.h	/^  double m_Scale;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_Scale	.\itkBlur3DImageFunction.h	/^  double                  m_Scale;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_Scale	.\itkRadiusExtractor.h	/^  double m_Scale;$/;"	m	class:itk::RadiusExtractor	access:private
m_Spacing	.\itkBlur3DImageFunction.h	/^  SpacingType             m_Spacing;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_SplineValueFunc	.\2D\itkRidgeExtractor2D.h	/^  UserFunc<vnl_vector<int> *, double> * m_SplineValueFunc;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_SplineValueFunc	.\itkRidgeExtractor.h	/^  UserFunc<vnl_vector<int> *, double> * m_SplineValueFunc;$/;"	m	class:itk::RidgeExtractor	access:private
m_StatusCallBack	.\2D\itkRadiusExtractor2D.h	/^  void (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::RadiusExtractor2D	access:private
m_StatusCallBack	.\2D\itkRidgeExtractor2D.h	/^  void  (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::RidgeExtractor2D	access:private
m_StatusCallBack	.\2D\itkTubeExtractor2D.h	/^  void (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::TubeExtractor2D	access:protected
m_StatusCallBack	.\itkRadiusExtractor.h	/^  void (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::RadiusExtractor	access:private
m_StatusCallBack	.\itkRidgeExtractor.h	/^  void  (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::RidgeExtractor	access:private
m_StatusCallBack	.\itkTubeExtractor.h	/^  void (*m_StatusCallBack)(char *, char *, int);$/;"	m	class:itk::TubeExtractor	access:protected
m_StepX	.\2D\itkRidgeExtractor2D.h	/^  double           m_StepX;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_StepX	.\itkRidgeExtractor.h	/^  double           m_StepX;$/;"	m	class:itk::RidgeExtractor	access:private
m_ThreshEV	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshEV;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_ThreshEV	.\itkRidgeExtractor.h	/^  double           m_ThreshEV;$/;"	m	class:itk::RidgeExtractor	access:private
m_ThreshEVRatio	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshEVRatio;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_ThreshEVRatio	.\itkRidgeExtractor.h	/^  double           m_ThreshEVRatio;$/;"	m	class:itk::RidgeExtractor	access:private
m_ThreshEVRatioStart	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshEVRatioStart;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_ThreshEVRatioStart	.\itkRidgeExtractor.h	/^  double           m_ThreshEVRatioStart;$/;"	m	class:itk::RidgeExtractor	access:private
m_ThreshP2Q2	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshP2Q2;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_ThreshP2Q2	.\itkRidgeExtractor.h	/^  double           m_ThreshP2Q2;$/;"	m	class:itk::RidgeExtractor	access:private
m_ThreshP2Q2Start	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshP2Q2Start;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_ThreshP2Q2Start	.\itkRidgeExtractor.h	/^  double           m_ThreshP2Q2Start;$/;"	m	class:itk::RidgeExtractor	access:private
m_ThreshT	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshT;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_ThreshT	.\itkRidgeExtractor.h	/^  double           m_ThreshT;$/;"	m	class:itk::RidgeExtractor	access:private
m_ThreshWVal	.\2D\itkRadiusExtractor2D.h	/^  double   m_ThreshWVal;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_ThreshWVal	.\itkRadiusExtractor.h	/^  double   m_ThreshWVal;$/;"	m	class:itk::RadiusExtractor	access:private
m_ThreshWValStart	.\2D\itkRadiusExtractor2D.h	/^  double   m_ThreshWValStart;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_ThreshWValStart	.\itkRadiusExtractor.h	/^  double   m_ThreshWValStart;$/;"	m	class:itk::RadiusExtractor	access:private
m_ThreshX	.\2D\itkRidgeExtractor2D.h	/^  double           m_ThreshX;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_ThreshX	.\itkRidgeExtractor.h	/^  double           m_ThreshX;$/;"	m	class:itk::RidgeExtractor	access:private
m_Tube	.\2D\itkRidgeExtractor2D.h	/^  TubePointer     m_Tube;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_Tube	.\2D\itkTubeExtractor2D.h	/^   TubePointer  m_Tube;$/;"	m	class:itk::TubeExtractor2D	access:protected
m_Tube	.\itkRidgeExtractor.h	/^  TubePointer      m_Tube;$/;"	m	class:itk::RidgeExtractor	access:private
m_Tube	.\itkTubeExtractor.h	/^  TubePointer                                  m_Tube;$/;"	m	class:itk::TubeExtractor	access:protected
m_TubeID	.\2D\itkRidgeExtractor2D.h	/^  int         m_TubeID;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_TubeID	.\itkRidgeExtractor.h	/^  int              m_TubeID;$/;"	m	class:itk::RidgeExtractor	access:private
m_TubeLength	.\2D\itkRadiusExtractor2D.h	/^  int m_TubeLength;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_TubeLength	.\itkRadiusExtractor.h	/^  int m_TubeLength;$/;"	m	class:itk::RadiusExtractor	access:private
m_TubeNet	.\2D\itkTubeNetExtractor2D.h	/^  TubeNet::Pointer  m_TubeNet;$/;"	m	class:itk::TubeNetExtractor2D	access:private
m_TubeNet	.\itkTubeNetExtractor.h	/^  TubePointer       m_TubeNet;$/;"	m	class:itk::TubeNetExtractor	access:private
m_TubeNum	.\2D\itkTubeNetExtractor2D.h	/^  int               m_TubeNum;$/;"	m	class:itk::TubeNetExtractor2D	access:private
m_TubeNum	.\itkTubeNetExtractor.h	/^  int               m_TubeNum;$/;"	m	class:itk::TubeNetExtractor	access:private
m_TubePointCount	.\2D\itkRadiusExtractor2D.h	/^  int m_TubePointCount;$/;"	m	class:itk::RadiusExtractor2D	access:private
m_TubePointCount	.\2D\itkRidgeExtractor2D.h	/^  int         m_TubePointCount;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_TubePointCount	.\itkRadiusExtractor.h	/^  int m_TubePointCount;$/;"	m	class:itk::RadiusExtractor	access:private
m_TubePointCount	.\itkRidgeExtractor.h	/^  int              m_TubePointCount;$/;"	m	class:itk::RidgeExtractor	access:private
m_TubePointList	.\2D\itkRidgeExtractor2D.h	/^  std::list<TubePointType> m_TubePointList;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_TubePointList	.\itkRidgeExtractor.h	/^  std::list<TubePointType>               m_TubePointList;$/;"	m	class:itk::RidgeExtractor	access:private
m_UseRelativeSpacing	.\itkBlur3DImageFunction.h	/^  bool                    m_UseRelativeSpacing;$/;"	m	class:itk::Blur3DImageFunction	access:private
m_Verbose	.\itkRidgeExtractor.h	/^  bool m_Verbose;$/;"	m	class:itk::RidgeExtractor	access:private
m_X	.\2D\itkRidgeExtractor2D.h	/^  VectorType* m_X;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_X	.\2D\itkTubeExtractor2D.h	/^  VectorType *m_X;$/;"	m	class:itk::TubeExtractor2D	access:private
m_X	.\itkRidgeExtractor.h	/^  ContinuousIndexType       m_X;$/;"	m	class:itk::RidgeExtractor	access:private
m_X	.\itkTubeExtractor.h	/^  ContinuousIndexType      m_X;$/;"	m	class:itk::TubeExtractor	access:private
m_XD	.\2D\itkRidgeExtractor2D.h	/^  VectorType* m_XD;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_XD	.\itkRidgeExtractor.h	/^  VectorType       m_XD;$/;"	m	class:itk::RidgeExtractor	access:private
m_XH	.\2D\itkRidgeExtractor2D.h	/^  VnlMatrixType* m_XH;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_XH	.\itkRidgeExtractor.h	/^  MatrixType       m_XH;$/;"	m	class:itk::RidgeExtractor	access:private
m_XHEVal	.\2D\itkRidgeExtractor2D.h	/^  VectorType m_XHEVal;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_XHEVal	.\itkRidgeExtractor.h	/^  VectorType       m_XHEVal;$/;"	m	class:itk::RidgeExtractor	access:private
m_XHEVect	.\2D\itkRidgeExtractor2D.h	/^  VnlMatrixType* m_XHEVect;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_XHEVect	.\itkRidgeExtractor.h	/^  MatrixType       m_XHEVect;$/;"	m	class:itk::RidgeExtractor	access:private
m_XP	.\2D\itkRidgeExtractor2D.h	/^  double                   m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_XP	.\itkRidgeExtractor.h	/^  double                    m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor	access:private
m_XQ	.\2D\itkRidgeExtractor2D.h	/^  double                   m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_XQ	.\itkRidgeExtractor.h	/^  double                    m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor	access:private
m_XR	.\2D\itkRidgeExtractor2D.h	/^  double                   m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_XR	.\itkRidgeExtractor.h	/^  double                    m_XP, m_XQ, m_XR;$/;"	m	class:itk::RidgeExtractor	access:private
m_XVal	.\2D\itkRidgeExtractor2D.h	/^  double                   m_XVal;$/;"	m	class:itk::RidgeExtractor2D	access:private
m_XVal	.\itkRidgeExtractor.h	/^  double                    m_XVal;$/;"	m	class:itk::RidgeExtractor	access:private
m_debug	.\itkSplineND.h	/^  bool m_debug;$/;"	m	class:itk::SplineND	access:protected
main	.\Testing\ImageCompare.cxx	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	.\Testing\ImageCompareCommand.cxx	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	.\Testing\ImageCopy.cxx	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
maxIterations	.\itkOptimizer1D.cxx	/^unsigned int Optimizer1D::maxIterations(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
maxIterations	.\itkOptimizer1D.cxx	/^void Optimizer1D::maxIterations(unsigned int newMaxIterations)$/;"	f	class:itk::Optimizer1D	signature:(unsigned int newMaxIterations)
maxIterations	.\itkOptimizer1D.h	/^  unsigned int     maxIterations(void);$/;"	p	class:itk::Optimizer1D	access:public	signature:(void)
maxIterations	.\itkOptimizer1D.h	/^  void     maxIterations(unsigned int newMaxIterations); $/;"	p	class:itk::Optimizer1D	access:public	signature:(unsigned int newMaxIterations)
maxIterations	.\itkOptimizerND.cxx	/^unsigned int OptimizerND::maxIterations(void)$/;"	f	class:itk::OptimizerND	signature:(void)
maxIterations	.\itkOptimizerND.cxx	/^void OptimizerND::maxIterations(unsigned int newMaxIterations)$/;"	f	class:itk::OptimizerND	signature:(unsigned int newMaxIterations)
maxIterations	.\itkOptimizerND.h	/^  unsigned int    maxIterations(void);$/;"	p	class:itk::OptimizerND	access:public	signature:(void)
maxIterations	.\itkOptimizerND.h	/^  void    maxIterations(unsigned int newMaxIterations);$/;"	p	class:itk::OptimizerND	access:public	signature:(unsigned int newMaxIterations)
msw	.\vMathPrivate.h	/^    unsigned int msw;$/;"	m	struct:__anon5::__anon6	access:public
msw	.\vMathPrivate.h	/^    unsigned int msw;$/;"	m	struct:__anon7::__anon8	access:public
newData	.\itkSpline1D.cxx	/^bool Spline1D::newData(void)$/;"	f	class:itk::Spline1D	signature:(void)
newData	.\itkSpline1D.cxx	/^void Spline1D::newData(bool newNewData)$/;"	f	class:itk::Spline1D	signature:(bool newNewData)
newData	.\itkSpline1D.h	/^  bool    newData();$/;"	p	class:itk::Spline1D	access:public	signature:()
newData	.\itkSpline1D.h	/^  void    newData(bool newNewData);$/;"	p	class:itk::Spline1D	access:public	signature:(bool newNewData)
newData	.\itkSplineND.cxx	/^  bool SplineND::newData(void)$/;"	f	class:itk::SplineND	signature:(void)
newData	.\itkSplineND.cxx	/^  void SplineND::newData(bool newNewData)$/;"	f	class:itk::SplineND	signature:(bool newNewData)
newData	.\itkSplineND.h	/^  bool    newData();$/;"	p	class:itk::SplineND	access:public	signature:()
newData	.\itkSplineND.h	/^  void    newData(bool newNewData);$/;"	p	class:itk::SplineND	access:public	signature:(bool newNewData)
one	.\vErf.cxx	/^one =  1.00000000000000000000e+00, \/* 0x3FF00000, 0x00000000 *\/$/;"	v	file:
operator =	.\2D\itkRadiusExtractor2D.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::RadiusExtractor2D	access:protected	signature:(const Self&)
operator =	.\2D\itkRidgeExtractor2D.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::RidgeExtractor2D	access:protected	signature:(const Self&)
operator =	.\2D\itkTubeExtractor2D.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::TubeExtractor2D	access:protected	signature:(const Self&)
operator =	.\2D\itkTubeNetExtractor2D.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::TubeNetExtractor2D	access:protected	signature:(const Self&)
operator =	.\itkBlur3DImageFunction.h	/^  void operator=( const Self& );$/;"	p	class:itk::Blur3DImageFunction	access:private	signature:( const Self& )
operator =	.\itkRadiusExtractor.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::RadiusExtractor	access:protected	signature:(const Self&)
operator =	.\itkRidgeExtractor.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::RidgeExtractor	access:protected	signature:(const Self&)
operator =	.\itkTubeExtractor.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::TubeExtractor	access:protected	signature:(const Self&)
operator =	.\itkTubeNetExtractor.h	/^  void operator=(const Self&) {}$/;"	f	class:itk::TubeNetExtractor	access:protected	signature:(const Self&)
pa0	.\vErf.cxx	/^pa0  = -2.36211856075265944077e-03, \/* 0xBF6359B8, 0xBEF77538 *\/$/;"	v	file:
pa1	.\vErf.cxx	/^pa1  =  4.14856118683748331666e-01, \/* 0x3FDA8D00, 0xAD92B34D *\/$/;"	v	file:
pa2	.\vErf.cxx	/^pa2  = -3.72207876035701323847e-01, \/* 0xBFD7D240, 0xFBB8C3F1 *\/$/;"	v	file:
pa3	.\vErf.cxx	/^pa3  =  3.18346619901161753674e-01, \/* 0x3FD45FCA, 0x805120E4 *\/$/;"	v	file:
pa4	.\vErf.cxx	/^pa4  = -1.10894694282396677476e-01, \/* 0xBFBC6398, 0x3D3E28EC *\/$/;"	v	file:
pa5	.\vErf.cxx	/^pa5  =  3.54783043256182359371e-02, \/* 0x3FA22A36, 0x599795EB *\/$/;"	v	file:
pa6	.\vErf.cxx	/^pa6  = -2.16637559486879084300e-03, \/* 0xBF61BF38, 0x0A96073F *\/$/;"	v	file:
parts	.\vMathPrivate.h	/^  } parts;$/;"	m	union:__anon5	typeref:struct:__anon5::__anon6
parts	.\vMathPrivate.h	/^  } parts;$/;"	m	union:__anon7	typeref:struct:__anon7::__anon8
pp0	.\vErf.cxx	/^pp0  =  1.28379167095512558561e-01, \/* 0x3FC06EBA, 0x8214DB68 *\/$/;"	v	file:
pp1	.\vErf.cxx	/^pp1  = -3.25042107247001499370e-01, \/* 0xBFD4CD7D, 0x691CB913 *\/$/;"	v	file:
pp2	.\vErf.cxx	/^pp2  = -2.84817495755985104766e-02, \/* 0xBF9D2A51, 0xDBD7194F *\/$/;"	v	file:
pp3	.\vErf.cxx	/^pp3  = -5.77027029648944159157e-03, \/* 0xBF77A291, 0x236668E4 *\/$/;"	v	file:
pp4	.\vErf.cxx	/^pp4  = -2.37630166566501626084e-05, \/* 0xBEF8EAD6, 0x120016AC *\/$/;"	v	file:
qa1	.\vErf.cxx	/^qa1  =  1.06420880400844228286e-01, \/* 0x3FBB3E66, 0x18EEE323 *\/$/;"	v	file:
qa2	.\vErf.cxx	/^qa2  =  5.40397917702171048937e-01, \/* 0x3FE14AF0, 0x92EB6F33 *\/$/;"	v	file:
qa3	.\vErf.cxx	/^qa3  =  7.18286544141962662868e-02, \/* 0x3FB2635C, 0xD99FE9A7 *\/$/;"	v	file:
qa4	.\vErf.cxx	/^qa4  =  1.26171219808761642112e-01, \/* 0x3FC02660, 0xE763351F *\/$/;"	v	file:
qa5	.\vErf.cxx	/^qa5  =  1.36370839120290507362e-02, \/* 0x3F8BEDC2, 0x6B51DD1C *\/$/;"	v	file:
qa6	.\vErf.cxx	/^qa6  =  1.19844998467991074170e-02, \/* 0x3F888B54, 0x5735151D *\/$/;"	v	file:
qq1	.\vErf.cxx	/^qq1  =  3.97917223959155352819e-01, \/* 0x3FD97779, 0xCDDADC09 *\/$/;"	v	file:
qq2	.\vErf.cxx	/^qq2  =  6.50222499887672944485e-02, \/* 0x3FB0A54C, 0x5536CEBA *\/$/;"	v	file:
qq3	.\vErf.cxx	/^qq3  =  5.08130628187576562776e-03, \/* 0x3F74D022, 0xC4D36B0F *\/$/;"	v	file:
qq4	.\vErf.cxx	/^qq4  =  1.32494738004321644526e-04, \/* 0x3F215DC9, 0x221C1A10 *\/$/;"	v	file:
qq5	.\vErf.cxx	/^qq5  = -3.96022827877536812320e-06, \/* 0xBED09C43, 0x42A26120 *\/$/;"	v	file:
ra0	.\vErf.cxx	/^ra0  = -9.86494403484714822705e-03, \/* 0xBF843412, 0x600D6435 *\/$/;"	v	file:
ra1	.\vErf.cxx	/^ra1  = -6.93858572707181764372e-01, \/* 0xBFE63416, 0xE4BA7360 *\/$/;"	v	file:
ra2	.\vErf.cxx	/^ra2  = -1.05586262253232909814e+01, \/* 0xC0251E04, 0x41B0E726 *\/$/;"	v	file:
ra3	.\vErf.cxx	/^ra3  = -6.23753324503260060396e+01, \/* 0xC04F300A, 0xE4CBA38D *\/$/;"	v	file:
ra4	.\vErf.cxx	/^ra4  = -1.62396669462573470355e+02, \/* 0xC0644CB1, 0x84282266 *\/$/;"	v	file:
ra5	.\vErf.cxx	/^ra5  = -1.84605092906711035994e+02, \/* 0xC067135C, 0xEBCCABB2 *\/$/;"	v	file:
ra6	.\vErf.cxx	/^ra6  = -8.12874355063065934246e+01, \/* 0xC0545265, 0x57E4D2F2 *\/$/;"	v	file:
ra7	.\vErf.cxx	/^ra7  = -9.81432934416914548592e+00, \/* 0xC023A0EF, 0xC69AC25C *\/$/;"	v	file:
rb0	.\vErf.cxx	/^rb0  = -9.86494292470009928597e-03, \/* 0xBF843412, 0x39E86F4A *\/$/;"	v	file:
rb1	.\vErf.cxx	/^rb1  = -7.99283237680523006574e-01, \/* 0xBFE993BA, 0x70C285DE *\/$/;"	v	file:
rb2	.\vErf.cxx	/^rb2  = -1.77579549177547519889e+01, \/* 0xC031C209, 0x555F995A *\/$/;"	v	file:
rb3	.\vErf.cxx	/^rb3  = -1.60636384855821916062e+02, \/* 0xC064145D, 0x43C5ED98 *\/$/;"	v	file:
rb4	.\vErf.cxx	/^rb4  = -6.37566443368389627722e+02, \/* 0xC083EC88, 0x1375F228 *\/$/;"	v	file:
rb5	.\vErf.cxx	/^rb5  = -1.02509513161107724954e+03, \/* 0xC0900461, 0x6A2E5992 *\/$/;"	v	file:
rb6	.\vErf.cxx	/^rb6  = -4.83519191608651397019e+02, \/* 0xC07E384E, 0x9BDC383F *\/$/;"	v	file:
rcsid	.\vErf.cxx	/^static char rcsid[] = "$NetBSD: s_erf.c,v 1.8 1995\/05\/10 20:47:05 jtc Exp $";$/;"	v	file:
rcsid	.\vRInt.cxx	/^static char rcsid[] = "$NetBSD: s_rint.c,v 1.8 1995\/05\/10 20:48:04 jtc Exp $";$/;"	v	file:
sa1	.\vErf.cxx	/^sa1  =  1.96512716674392571292e+01, \/* 0x4033A6B9, 0xBD707687 *\/$/;"	v	file:
sa2	.\vErf.cxx	/^sa2  =  1.37657754143519042600e+02, \/* 0x4061350C, 0x526AE721 *\/$/;"	v	file:
sa3	.\vErf.cxx	/^sa3  =  4.34565877475229228821e+02, \/* 0x407B290D, 0xD58A1A71 *\/$/;"	v	file:
sa4	.\vErf.cxx	/^sa4  =  6.45387271733267880336e+02, \/* 0x40842B19, 0x21EC2868 *\/$/;"	v	file:
sa5	.\vErf.cxx	/^sa5  =  4.29008140027567833386e+02, \/* 0x407AD021, 0x57700314 *\/$/;"	v	file:
sa6	.\vErf.cxx	/^sa6  =  1.08635005541779435134e+02, \/* 0x405B28A3, 0xEE48AE2C *\/$/;"	v	file:
sa7	.\vErf.cxx	/^sa7  =  6.57024977031928170135e+00, \/* 0x401A47EF, 0x8E484A93 *\/$/;"	v	file:
sa8	.\vErf.cxx	/^sa8  = -6.04244152148580987438e-02, \/* 0xBFAEEFF2, 0xEE749A62 *\/$/;"	v	file:
sb1	.\vErf.cxx	/^sb1  =  3.03380607434824582924e+01, \/* 0x403E568B, 0x261D5190 *\/$/;"	v	file:
sb2	.\vErf.cxx	/^sb2  =  3.25792512996573918826e+02, \/* 0x40745CAE, 0x221B9F0A *\/$/;"	v	file:
sb3	.\vErf.cxx	/^sb3  =  1.53672958608443695994e+03, \/* 0x409802EB, 0x189D5118 *\/$/;"	v	file:
sb4	.\vErf.cxx	/^sb4  =  3.19985821950859553908e+03, \/* 0x40A8FFB7, 0x688C246A *\/$/;"	v	file:
sb5	.\vErf.cxx	/^sb5  =  2.55305040643316442583e+03, \/* 0x40A3F219, 0xCEDF3BE6 *\/$/;"	v	file:
sb6	.\vErf.cxx	/^sb6  =  4.74528541206955367215e+02, \/* 0x407DA874, 0xE79FE763 *\/$/;"	v	file:
sb7	.\vErf.cxx	/^sb7  = -2.24409524465858183362e+01; \/* 0xC03670E2, 0x42712D62 *\/$/;"	v	file:
searchForMin	.\itkOptimizer1D.cxx	/^bool Optimizer1D::searchForMin(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
searchForMin	.\itkOptimizer1D.cxx	/^void Optimizer1D::searchForMin(bool newSearchForMin)$/;"	f	class:itk::Optimizer1D	signature:(bool newSearchForMin)
searchForMin	.\itkOptimizer1D.h	/^  bool     searchForMin();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
searchForMin	.\itkOptimizer1D.h	/^  void     searchForMin(bool newSearchForMin);$/;"	p	class:itk::Optimizer1D	access:public	signature:(bool newSearchForMin)
searchForMin	.\itkOptimizerND.cxx	/^bool OptimizerND::searchForMin(void)$/;"	f	class:itk::OptimizerND	signature:(void)
searchForMin	.\itkOptimizerND.cxx	/^void OptimizerND::searchForMin(bool newSearchForMin)$/;"	f	class:itk::OptimizerND	signature:(bool newSearchForMin)
searchForMin	.\itkOptimizerND.h	/^  bool    searchForMin();$/;"	p	class:itk::OptimizerND	access:public	signature:()
searchForMin	.\itkOptimizerND.h	/^  void    searchForMin(bool newSearchForMin);$/;"	p	class:itk::OptimizerND	access:public	signature:(bool newSearchForMin)
smallDouble	.\itkOptBrent1D.h	/^  double   smallDouble();$/;"	p	class:itk::OptBrent1D	access:public	signature:()
smallDouble	.\itkOptBrent1D.h	/^  void     smallDouble(double newSmall);$/;"	p	class:itk::OptBrent1D	access:public	signature:(double newSmall)
spline	.\itkSpline1D.cxx	/^    Spline1D * spline;$/;"	m	class:itk::Spline1DDerivFunc	file:	access:private
spline	.\itkSpline1D.cxx	/^    Spline1D * spline;$/;"	m	class:itk::Spline1DValFunc	file:	access:private
tiny	.\vErf.cxx	/^tiny	    = 1e-300,$/;"	v	file:
tolerance	.\itkOptimizer1D.cxx	/^double Optimizer1D::tolerance(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
tolerance	.\itkOptimizer1D.cxx	/^void Optimizer1D::tolerance(double newTolerance)$/;"	f	class:itk::Optimizer1D	signature:(double newTolerance)
tolerance	.\itkOptimizer1D.h	/^  double   tolerance();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
tolerance	.\itkOptimizer1D.h	/^  void     tolerance(double newTolerance);$/;"	p	class:itk::Optimizer1D	access:public	signature:(double newTolerance)
tolerance	.\itkOptimizerND.cxx	/^double OptimizerND::tolerance(void)$/;"	f	class:itk::OptimizerND	signature:(void)
tolerance	.\itkOptimizerND.cxx	/^void OptimizerND::tolerance(double newTolerance)$/;"	f	class:itk::OptimizerND	signature:(double newTolerance)
tolerance	.\itkOptimizerND.h	/^  double  tolerance();$/;"	p	class:itk::OptimizerND	access:public	signature:()
tolerance	.\itkOptimizerND.h	/^  void    tolerance(double newTolerance);$/;"	p	class:itk::OptimizerND	access:public	signature:(double newTolerance)
two	.\vErf.cxx	/^two =  2.00000000000000000000e+00, \/* 0x40000000, 0x00000000 *\/$/;"	v	file:
use	.\itkOptBrent1D.cxx	/^void OptBrent1D::use(UserFunc<double, double> * newFuncVal)$/;"	f	class:itk::OptBrent1D	signature:(UserFunc<double, double> * newFuncVal)
use	.\itkOptBrent1D.h	/^  void use(UserFunc<double, double> *newFuncVal);$/;"	p	class:itk::OptBrent1D	access:public	signature:(UserFunc<double, double> *newFuncVal)
use	.\itkOptGoldenMean1D.cxx	/^void OptGoldenMean1D::use(UserFunc<double, double> * newFuncVal)$/;"	f	class:itk::OptGoldenMean1D	signature:(UserFunc<double, double> * newFuncVal)
use	.\itkOptGoldenMean1D.h	/^  void use(UserFunc<double, double> *newFuncVal);$/;"	p	class:itk::OptGoldenMean1D	access:public	signature:(UserFunc<double, double> *newFuncVal)
use	.\itkOptParabolicFit1D.cxx	/^void OptParabolicFit1D::use(UserFunc<double, double> * newFuncVal,$/;"	f	class:itk::OptParabolicFit1D	signature:(UserFunc<double, double> * newFuncVal, UserFunc<double,double> * itkNotUsed(derivative))
use	.\itkOptParabolicFit1D.h	/^  void use(UserFunc<double, double> *newFuncVal, UserFunc<double,double>* deriv = NULL);$/;"	p	class:itk::OptParabolicFit1D	access:public	signature:(UserFunc<double, double> *newFuncVal, UserFunc<double,double>* deriv = NULL)
use	.\itkOptimizer1D.cxx	/^void Optimizer1D::use(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)$/;"	f	class:itk::Optimizer1D	signature:(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)
use	.\itkOptimizer1D.h	/^  void     use(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv);$/;"	p	class:itk::Optimizer1D	access:public	signature:(UserFunc<double, double> *newFuncVal, UserFunc<double, double> *newFuncDeriv)
use	.\itkOptimizerND.cxx	/^void OptimizerND::use(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)$/;"	f	class:itk::OptimizerND	signature:(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)
use	.\itkOptimizerND.h	/^  void use(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D);$/;"	p	class:itk::OptimizerND	access:public	signature:(int newNDims, UserFunc<VectorType*, double> * newFuncValND, UserFunc<VectorType*, VectorType &> * newFuncDerivND, Optimizer1D *newOpt1D)
use	.\itkSpline1D.cxx	/^void Spline1D::use(UserFunc<int, double> *newFuncVal, Optimizer1D *newOpt1D)$/;"	f	class:itk::Spline1D	signature:(UserFunc<int, double> *newFuncVal, Optimizer1D *newOpt1D)
use	.\itkSpline1D.h	/^   void    use(UserFunc<int, double> *newFuncVal, Optimizer1D * newOpt1D);    $/;"	p	class:itk::Spline1D	access:public	signature:(UserFunc<int, double> *newFuncVal, Optimizer1D * newOpt1D)
use	.\itkSplineND.cxx	/^  void SplineND::use(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOpt1D)$/;"	f	class:itk::SplineND	signature:(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOpt1D)
use	.\itkSplineND.h	/^  void    use(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOptND);$/;"	p	class:itk::SplineND	access:public	signature:(unsigned int newNDims, UserFunc<IntVectorType*, double> * newFuncVal, Spline1D * newSpline1D, Optimizer1D * newOptND)
vErf	.\vErf.cxx	/^double vErf(double x) $/;"	f	signature:(double x)
vErf	.\vErf.h	/^extern double vErf(double x);$/;"	p	signature:(double x)
vErfc	.\vErf.cxx	/^double vErfc(double x) $/;"	f	signature:(double x)
vErfc	.\vErf.h	/^extern double vErfc(double x);$/;"	p	signature:(double x)
vRInt	.\vRInt.cxx	/^double vRInt(double x)$/;"	f	signature:(double x)
vRInt	.\vRInt.h	/^extern double vRInt(double x);$/;"	p	signature:(double x)
value	.\UserFunc.h	/^  virtual OutT value(InT x) = 0;$/;"	p	class:itk::UserFunc	access:public	signature:(InT x)
value	.\itkOptimizerND.cxx	/^  double value(double x)$/;"	f	class:itk::OptDerivFuncND	access:public	signature:(double x)
value	.\itkOptimizerND.cxx	/^  double value(double x)$/;"	f	class:itk::OptValFuncND	access:public	signature:(double x)
value	.\itkSpline1D.cxx	/^    double value(double x)$/;"	f	class:itk::Spline1DDerivFunc	access:public	signature:(double x)
value	.\itkSpline1D.cxx	/^    double value(double x)$/;"	f	class:itk::Spline1DValFunc	access:public	signature:(double x)
value	.\itkSpline1D.cxx	/^double Spline1D::value(double x)$/;"	f	class:itk::Spline1D	signature:(double x)
value	.\itkSpline1D.h	/^  double  value(double x);$/;"	p	class:itk::Spline1D	access:public	signature:(double x)
value	.\itkSplineND.cxx	/^  double SplineND::value(VectorType & x)$/;"	f	class:itk::SplineND	signature:(VectorType & x)
value	.\itkSplineND.cxx	/^  double value(vnl_vector<double>* x)$/;"	f	class:itk::SplineNDValFunc	access:public	signature:(vnl_vector<double>* x)
value	.\itkSplineND.cxx	/^  vnl_vector<double> & value(vnl_vector<double>* x)$/;"	f	class:itk::SplineNDDerivFunc	access:public	signature:(vnl_vector<double>* x)
value	.\itkSplineND.h	/^  double              value(VectorType & x);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & x)
value	.\vMathPrivate.h	/^  double value;$/;"	m	union:__anon5
value	.\vMathPrivate.h	/^  double value;$/;"	m	union:__anon7
value	.\vMathPrivate.h	/^  float value;$/;"	m	union:__anon9
valueD	.\itkSpline1D.cxx	/^double Spline1D::valueD(double x)$/;"	f	class:itk::Spline1D	signature:(double x)
valueD	.\itkSpline1D.h	/^  double  valueD(double x);$/;"	p	class:itk::Spline1D	access:public	signature:(double x)
valueD	.\itkSplineND.cxx	/^  SplineND::VectorType & SplineND::valueD(VectorType & x)$/;"	f	class:itk::SplineND	signature:(VectorType & x)
valueD	.\itkSplineND.cxx	/^  double SplineND::valueD(VectorType & x, IntVectorType & dx)$/;"	f	class:itk::SplineND	signature:(VectorType & x, IntVectorType & dx)
valueD	.\itkSplineND.h	/^  VectorType &    valueD(VectorType & x);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & x)
valueD	.\itkSplineND.h	/^  double              valueD(VectorType & x, IntVectorType & dx);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & x, IntVectorType & dx)
valueD2	.\itkSpline1D.cxx	/^double Spline1D::valueD2(double x)$/;"	f	class:itk::Spline1D	signature:(double x)
valueD2	.\itkSpline1D.h	/^  double  valueD2(double x);$/;"	p	class:itk::Spline1D	access:public	signature:(double x)
valueJet	.\itkSpline1D.cxx	/^double Spline1D::valueJet(double x, double * d, double * d2)$/;"	f	class:itk::Spline1D	signature:(double x, double * d, double * d2)
valueJet	.\itkSpline1D.h	/^  double  valueJet(double x, double * d, double * d2);$/;"	p	class:itk::Spline1D	access:public	signature:(double x, double * d, double * d2)
valueJet	.\itkSplineND.cxx	/^  double SplineND::valueJet(VectorRefType x, VectorRefType d, MatrixType & h)$/;"	f	class:itk::SplineND	signature:(VectorRefType x, VectorRefType d, MatrixType & h)
valueJet	.\itkSplineND.h	/^  double   valueJet(VectorRefType x, VectorRefType d, MatrixType & h);$/;"	p	class:itk::SplineND	access:public	signature:(VectorRefType x, VectorRefType d, MatrixType & h)
valueVDD2	.\itkSplineND.cxx	/^  double SplineND::valueVDD2(VectorType & x, VectorType & d, VectorType & d2)$/;"	f	class:itk::SplineND	signature:(VectorType & x, VectorType & d, VectorType & d2)
valueVDD2	.\itkSplineND.h	/^  double  valueVDD2(VectorType & x, VectorType & d, VectorType & d2);$/;"	p	class:itk::SplineND	access:public	signature:(VectorType & x, VectorType & d, VectorType & d2)
word	.\vMathPrivate.h	/^  unsigned int word;$/;"	m	union:__anon9
xMax	.\itkOptimizer1D.cxx	/^double Optimizer1D::xMax(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
xMax	.\itkOptimizer1D.cxx	/^void Optimizer1D::xMax(double newXMax)$/;"	f	class:itk::Optimizer1D	signature:(double newXMax)
xMax	.\itkOptimizer1D.h	/^  double   xMax();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
xMax	.\itkOptimizer1D.h	/^  void     xMax(double newXMax);$/;"	p	class:itk::Optimizer1D	access:public	signature:(double newXMax)
xMax	.\itkOptimizerND.cxx	/^OptimizerND::VectorType & OptimizerND::xMax(void)$/;"	f	class:itk::OptimizerND	signature:(void)
xMax	.\itkOptimizerND.cxx	/^void OptimizerND::xMax(VectorType & newXMaxx)$/;"	f	class:itk::OptimizerND	signature:(VectorType & newXMaxx)
xMax	.\itkOptimizerND.h	/^  VectorType & xMax(void);$/;"	p	class:itk::OptimizerND	access:public	signature:(void)
xMax	.\itkOptimizerND.h	/^  void    xMax(VectorType & newXMaxx);$/;"	p	class:itk::OptimizerND	access:public	signature:(VectorType & newXMaxx)
xMax	.\itkSpline1D.cxx	/^int Spline1D::xMax(void)$/;"	f	class:itk::Spline1D	signature:(void)
xMax	.\itkSpline1D.cxx	/^void Spline1D::xMax(int newXMax)$/;"	f	class:itk::Spline1D	signature:(int newXMax)
xMax	.\itkSpline1D.h	/^  int     xMax();$/;"	p	class:itk::Spline1D	access:public	signature:()
xMax	.\itkSpline1D.h	/^  void    xMax(int newXMax);$/;"	p	class:itk::Spline1D	access:public	signature:(int newXMax)
xMax	.\itkSplineND.cxx	/^  SplineND::IntVectorType & SplineND::xMax(void)$/;"	f	class:itk::SplineND	signature:(void)
xMax	.\itkSplineND.cxx	/^  void SplineND::xMax(IntVectorType newXMax)$/;"	f	class:itk::SplineND	signature:(IntVectorType newXMax)
xMax	.\itkSplineND.h	/^  IntVectorType &   xMax();$/;"	p	class:itk::SplineND	access:public	signature:()
xMax	.\itkSplineND.h	/^  void            xMax(IntVectorType newXMax);$/;"	p	class:itk::SplineND	access:public	signature:(IntVectorType newXMax)
xMin	.\itkOptimizer1D.cxx	/^double Optimizer1D::xMin(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
xMin	.\itkOptimizer1D.cxx	/^void Optimizer1D::xMin(double newXMin)$/;"	f	class:itk::Optimizer1D	signature:(double newXMin)
xMin	.\itkOptimizer1D.h	/^  double   xMin();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
xMin	.\itkOptimizer1D.h	/^  void     xMin(double newXMin);$/;"	p	class:itk::Optimizer1D	access:public	signature:(double newXMin)
xMin	.\itkOptimizerND.cxx	/^OptimizerND::VectorType & OptimizerND::xMin(void)$/;"	f	class:itk::OptimizerND	signature:(void)
xMin	.\itkOptimizerND.cxx	/^void OptimizerND::xMin(VectorType & newXMinn)$/;"	f	class:itk::OptimizerND	signature:(VectorType & newXMinn)
xMin	.\itkOptimizerND.h	/^  VectorType & xMin(void);$/;"	p	class:itk::OptimizerND	access:public	signature:(void)
xMin	.\itkOptimizerND.h	/^  void    xMin(VectorType & newXMinn);$/;"	p	class:itk::OptimizerND	access:public	signature:(VectorType & newXMinn)
xMin	.\itkSpline1D.cxx	/^int Spline1D::xMin(void)$/;"	f	class:itk::Spline1D	signature:(void)
xMin	.\itkSpline1D.cxx	/^void Spline1D::xMin(int newXMin)$/;"	f	class:itk::Spline1D	signature:(int newXMin)
xMin	.\itkSpline1D.h	/^  int     xMin();$/;"	p	class:itk::Spline1D	access:public	signature:()
xMin	.\itkSpline1D.h	/^  void    xMin(int newXMin);$/;"	p	class:itk::Spline1D	access:public	signature:(int newXMin)
xMin	.\itkSplineND.cxx	/^  SplineND::IntVectorType & SplineND::xMin(void)$/;"	f	class:itk::SplineND	signature:(void)
xMin	.\itkSplineND.cxx	/^  void SplineND::xMin(IntVectorType newXMin)$/;"	f	class:itk::SplineND	signature:(IntVectorType newXMin)
xMin	.\itkSplineND.h	/^  IntVectorType &   xMin();$/;"	p	class:itk::SplineND	access:public	signature:()
xMin	.\itkSplineND.h	/^  void            xMin(IntVectorType newXMin);$/;"	p	class:itk::SplineND	access:public	signature:(IntVectorType newXMin)
xStep	.\itkOptimizer1D.cxx	/^double Optimizer1D::xStep(void)$/;"	f	class:itk::Optimizer1D	signature:(void)
xStep	.\itkOptimizer1D.cxx	/^void Optimizer1D::xStep(double newXStep)$/;"	f	class:itk::Optimizer1D	signature:(double newXStep)
xStep	.\itkOptimizer1D.h	/^  double   xStep();$/;"	p	class:itk::Optimizer1D	access:public	signature:()
xStep	.\itkOptimizer1D.h	/^  void     xStep(double newXStep);$/;"	p	class:itk::Optimizer1D	access:public	signature:(double newXStep)
xStep	.\itkOptimizerND.cxx	/^OptimizerND::VectorType & OptimizerND::xStep(void)$/;"	f	class:itk::OptimizerND	signature:(void)
xStep	.\itkOptimizerND.cxx	/^void OptimizerND::xStep(VectorType & newXStepp)$/;"	f	class:itk::OptimizerND	signature:(VectorType & newXStepp)
xStep	.\itkOptimizerND.h	/^  VectorType & xStep(void);$/;"	p	class:itk::OptimizerND	access:public	signature:(void)
xStep	.\itkOptimizerND.h	/^  void    xStep(VectorType & newXStepp);$/;"	p	class:itk::OptimizerND	access:public	signature:(VectorType & newXStepp)
~Blur3DImageFunction	.\itkBlur3DImageFunction.h	/^  virtual ~Blur3DImageFunction(){};$/;"	f	class:itk::Blur3DImageFunction	access:protected	signature:()
~OptBrent1D	.\itkOptBrent1D.cxx	/^OptBrent1D::~OptBrent1D()$/;"	f	class:itk::OptBrent1D	signature:()
~OptBrent1D	.\itkOptBrent1D.h	/^  ~OptBrent1D();$/;"	p	class:itk::OptBrent1D	access:public	signature:()
~OptGoldenMean1D	.\itkOptGoldenMean1D.cxx	/^OptGoldenMean1D::~OptGoldenMean1D()$/;"	f	class:itk::OptGoldenMean1D	signature:()
~OptGoldenMean1D	.\itkOptGoldenMean1D.h	/^  ~OptGoldenMean1D();$/;"	p	class:itk::OptGoldenMean1D	access:public	signature:()
~OptParabolicFit1D	.\itkOptParabolicFit1D.cxx	/^OptParabolicFit1D::~OptParabolicFit1D()$/;"	f	class:itk::OptParabolicFit1D	signature:()
~OptParabolicFit1D	.\itkOptParabolicFit1D.h	/^  ~OptParabolicFit1D();$/;"	p	class:itk::OptParabolicFit1D	access:public	signature:()
~Optimizer1D	.\itkOptimizer1D.cxx	/^Optimizer1D::~Optimizer1D()$/;"	f	class:itk::Optimizer1D	signature:()
~Optimizer1D	.\itkOptimizer1D.h	/^  virtual ~Optimizer1D();  $/;"	p	class:itk::Optimizer1D	access:public	signature:()
~OptimizerND	.\itkOptimizerND.cxx	/^OptimizerND::~OptimizerND()$/;"	f	class:itk::OptimizerND	signature:()
~OptimizerND	.\itkOptimizerND.h	/^  virtual ~OptimizerND();$/;"	p	class:itk::OptimizerND	access:public	signature:()
~RadiusExtractor	.\itkRadiusExtractor.h	/^  virtual ~RadiusExtractor();$/;"	p	class:itk::RadiusExtractor	access:protected	signature:()
~RadiusExtractor2D	.\2D\itkRadiusExtractor2D.h	/^  virtual ~RadiusExtractor2D();$/;"	p	class:itk::RadiusExtractor2D	access:protected	signature:()
~RidgeExtractor	.\itkRidgeExtractor.h	/^  virtual ~RidgeExtractor();$/;"	p	class:itk::RidgeExtractor	access:protected	signature:()
~RidgeExtractor2D	.\2D\itkRidgeExtractor2D.h	/^  virtual ~RidgeExtractor2D();$/;"	p	class:itk::RidgeExtractor2D	access:protected	signature:()
~Spline1D	.\itkSpline1D.cxx	/^Spline1D::~Spline1D()$/;"	f	class:itk::Spline1D	signature:()
~Spline1D	.\itkSpline1D.h	/^  virtual ~Spline1D();$/;"	p	class:itk::Spline1D	access:public	signature:()
~SplineApproximation1D	.\itkSplineApproximation1D.cxx	/^SplineApproximation1D::~SplineApproximation1D()$/;"	f	class:itk::SplineApproximation1D	signature:()
~SplineApproximation1D	.\itkSplineApproximation1D.h	/^  virtual ~SplineApproximation1D();$/;"	p	class:itk::SplineApproximation1D	access:public	signature:()
~SplineND	.\itkSplineND.cxx	/^  SplineND::~SplineND()$/;"	f	class:itk::SplineND	signature:()
~SplineND	.\itkSplineND.h	/^  virtual ~SplineND();$/;"	p	class:itk::SplineND	access:public	signature:()
~TubeExtractor	.\itkTubeExtractor.h	/^  virtual ~TubeExtractor();$/;"	p	class:itk::TubeExtractor	access:protected	signature:()
~TubeExtractor2D	.\2D\itkTubeExtractor2D.h	/^  virtual ~TubeExtractor2D();$/;"	p	class:itk::TubeExtractor2D	access:protected	signature:()
~TubeNetExtractor	.\itkTubeNetExtractor.h	/^  virtual ~TubeNetExtractor();$/;"	p	class:itk::TubeNetExtractor	access:protected	signature:()
~TubeNetExtractor2D	.\2D\itkTubeNetExtractor2D.h	/^  virtual ~TubeNetExtractor2D();$/;"	p	class:itk::TubeNetExtractor2D	access:protected	signature:()
~UserFunc	.\UserFunc.h	/^  virtual ~UserFunc();$/;"	p	class:itk::UserFunc	access:public	signature:()
~UserFunc	.\UserFunc.h	/^UserFunc<InT, OutT>::~UserFunc()$/;"	f	class:itk::UserFunc	signature:()
